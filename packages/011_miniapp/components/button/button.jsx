// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project c32b11589f2bc68b "humanpass", do not edit manually */
"use client";

// virtual:button
/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
 * variant?: 'Secondary' | 'Primary' | 'Nav Button Secondary' | 'Nav Button Primary' | 'Oversized' | 'Primary Small' | 'Secondary Small' // Variant
 * label?: string // Label
 * link?: string // Link
 * fill?: boolean // Fill
 * state?: 'Default' | 'Roll' // State
 * click?: Function // Click
}} Props

 */
import { Fragment as Fragment2 } from "react";
import { ContextProviders } from "unframer";

// /:https://framerusercontent.com/modules/trbsDeTZsoLYHyDQQAOE/yxTf8kqmtdD9XEmVxZE6/wLxpqDnwB.js
import { jsx as _jsx3, jsxs as _jsxs2 } from "react/jsx-runtime";
import {
	addFonts,
	addPropertyControls as addPropertyControls3,
	ComponentViewportProvider,
	ControlType as ControlType3,
	cx,
	getFonts,
	getPropertyControls,
	Link,
	SmartComponentScopedContainer,
	useActiveVariantCallback,
	useComponentViewport,
	useLocaleInfo,
	useVariantState,
	withCSS,
} from "unframer";
import { LayoutGroup, motion as motion2, MotionConfigContext } from "unframer";
import * as React from "react";
import { useRef as useRef2 } from "react";

// /:https://framerusercontent.com/modules/aeEe477xpzEFqqaZhiTE/ltgP15qtviN0Ho7MrfaG/RollingText.js
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { addPropertyControls, ControlType } from "unframer";
import { motion } from "unframer";
var uuidv4 = () => {
	return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
		const r = (Math.random() * 16) | 0;
		const v = c === "x" ? r : (r & 3) | 8;
		return v.toString(16);
	});
};
function RollingText({
	text,
	transition,
	stagger,
	reverse,
	font,
	color,
	textTransform,
	tag,
	padding,
	variable,
	state,
}) {
	const innerClassName = `rolling-text-inner-${uuidv4()}`;
	const Tag = tag;
	const fontSizeStr = font?.fontSize ?? "16px";
	const letterSpacingStr = font?.letterSpacing ?? "0px";
	const rawLineHeight = font?.lineHeight;
	const fontFamily = font?.fontFamily ?? "Inter";
	const fontSizeNum = parseInt(fontSizeStr, 10) || 16;
	let absoluteLineHeightPx;
	if (typeof rawLineHeight === "number") {
		absoluteLineHeightPx = fontSizeNum * rawLineHeight;
	} else if (
		typeof rawLineHeight === "string" &&
		rawLineHeight.includes("em")
	) {
		const emValue = parseFloat(rawLineHeight) || 1.2;
		absoluteLineHeightPx = fontSizeNum * emValue;
	} else if (typeof rawLineHeight === "string") {
		const pxValue = parseFloat(rawLineHeight);
		absoluteLineHeightPx = isNaN(pxValue) ? rawLineHeight : `${pxValue}px`;
	} else {
		absoluteLineHeightPx = fontSizeNum * 1.2;
	}
	const absoluteLineHeightStr =
		typeof absoluteLineHeightPx === "number"
			? `${absoluteLineHeightPx}px`
			: absoluteLineHeightPx;
	const yOffset = `-${absoluteLineHeightStr}`;
	const variableFontStyles = variable
		? {
				fontVariationSettings: `'wght' ${variable.weight}, 'opsz' ${variable.optical}`,
			}
		: {};
	const styles = `
    .${innerClassName} {
      --font-size: ${fontSizeStr};
      --text: ${color};
      --line-height-abs: ${absoluteLineHeightStr};
      box-sizing: border-box; margin: 0; padding: 0; vertical-align: top;
      display: flex; overflow: hidden; width: max-content;
      font-family: ${fontFamily}; font-size: ${fontSizeStr};
      text-transform: ${textTransform}; user-select: none;
      text-shadow: 0 var(--line-height-abs) 0 var(--text);
    }
    .${innerClassName} span {
      display: block; -webkit-backface-visibility: hidden; backface-visibility: hidden;
      white-space: pre; flex-shrink: 0;
      font-family: inherit; font-weight: inherit; font-style: inherit;
      font-size: inherit; letter-spacing: inherit;
      line-height: ${rawLineHeight ?? 1.2};
      color: var(--text);
    }
  `;
	const wrapperStyle = {
		display: "flex",
		alignItems: "center",
		justifyContent: "center",
		width: "100%",
		height: "100%",
		overflow: "hidden",
		padding,
		boxSizing: "border-box",
	};
	const spanVariants = {
		initial: {
			y: "0%",
		},
		roll: {
			y: yOffset,
		},
	};
	const baseDuration =
		typeof transition?.duration === "number" ? transition.duration : 0.5;
	const staggerFactor = stagger / 100;
	const animateState = state === "Roll" ? "roll" : "initial";
	return (
		<div style={wrapperStyle}>
			<Tag className={innerClassName} style={variableFontStyles}>
				{[...text].map((str, index) => {
					const charIndex = reverse ? text.length - 1 - index : index;
					const delay =
						text.length > 0
							? (baseDuration / text.length) * charIndex * staggerFactor
							: 0;
					const motionSpanStyle = {
						display: "block",
						...font,
						...variableFontStyles,
					};
					return (
						<motion.span
							variants={spanVariants}
							initial={"initial"}
							animate={animateState}
							transition={{
								...transition,
								delay,
							}}
							style={motionSpanStyle}
						>
							{str === " " ? "\xA0" : str}
						</motion.span>
					);
				})}
			</Tag>
			<style>{styles}</style>
		</div>
	);
}
RollingText.displayName = "Rolling Text";
var defaultFont = {
	fontFamily: "Inter",
	fontWeight: "400",
	fontSize: "16px",
	fontStyle: "normal",
	letterSpacing: "0px",
	lineHeight: 1.2,
};
var defaultTransition = {
	type: "spring",
	duration: 0.4,
	bounce: 0,
};
addPropertyControls(RollingText, {
	text: {
		type: ControlType.String,
		title: "Text",
		defaultValue: "Rolling Text",
	},
	font: {
		type: ControlType.Font,
		title: "Font",
		controls: "extended",
		defaultValue: defaultFont,
	},
	variable: {
		type: ControlType.Object,
		title: "Variable",
		controls: {
			optical: {
				type: ControlType.Number,
				title: "Optical",
				min: 14,
				max: 32,
				step: 1,
				defaultValue: 16,
			},
			weight: {
				type: ControlType.Number,
				title: "Weight",
				min: 100,
				max: 900,
				step: 1,
				defaultValue: 400,
			},
		},
		defaultValue: {
			optical: 16,
			weight: 400,
		},
	},
	color: {
		type: ControlType.Color,
		title: "Color",
		defaultValue: "#808080",
	},
	transition: {
		type: ControlType.Transition,
		title: "Transition",
		defaultValue: defaultTransition,
	},
	stagger: {
		title: "Stagger",
		type: ControlType.Number,
		min: 0,
		max: 100,
		step: 1,
		defaultValue: 35,
		unit: "%",
	},
	padding: {
		title: "Padding",
		type: ControlType.Padding,
		defaultValue: "0px",
	},
	reverse: {
		type: ControlType.Boolean,
		title: "Reverse",
		defaultValue: false,
		enabledTitle: "Yes",
		disabledTitle: "No",
	},
	textTransform: {
		title: "Transform",
		type: ControlType.Enum,
		defaultValue: "none",
		options: ["none", "uppercase", "lowercase", "capitalize"],
		optionTitles: ["None", "Uppercase", "Lowercase", "Capitalize"],
	},
	tag: {
		type: ControlType.Enum,
		title: "Tag",
		options: ["p", "span", "h1", "h2", "h3", "h4", "h5", "h6"],
		optionTitles: ["p", "span", "h1", "h2", "h3", "h4", "h5", "h6"],
		defaultValue: "p",
	},
	state: {
		type: ControlType.Enum,
		title: "State",
		options: ["Default", "Roll"],
		optionTitles: ["Default", "Roll"],
		displaySegmentedControl: true,
		segmentedControlDirection: "vertical",
		defaultValue: "Default",
	},
});

// /:https://framerusercontent.com/modules/XBWSgdKr3syOFOYW80i8/4FKsp3EPd3QDaqVONEJD/DashedBorder.js
import { jsx as _jsx2 } from "react/jsx-runtime";
import { useEffect, useRef, useState, useMemo, useCallback } from "react";
import {
	addPropertyControls as addPropertyControls2,
	ControlType as ControlType2,
	RenderTarget,
} from "unframer";
function DashedBorderFrame(props) {
	const defaultProps = useMemo(
		() => ({
			borderColor: "#0099FF",
			borderWidth: 3,
			borderRadius: 16,
			dashLength: 12,
			gapLength: 8,
			animation: {
				animated: true,
				speed: 2,
				direction: "clockwise",
			},
			top: true,
			right: true,
			bottom: true,
			left: true,
		}),
		[],
	);
	const {
		borderColor = defaultProps.borderColor,
		borderWidth = defaultProps.borderWidth,
		borderRadius = defaultProps.borderRadius,
		dashLength = defaultProps.dashLength,
		gapLength = defaultProps.gapLength,
		animation = defaultProps.animation,
		style = {},
	} = props;
	const { animated, speed, direction } = animation;
	const uniqueIdRef = useRef(Math.random().toString(36).substr(2, 9));
	const animName = `dash-anim-${direction}-${uniqueIdRef.current}`;
	const minDuration = 0.1;
	const animationDuration = `${Math.max(minDuration, 2 / Math.max(0.01, speed))}s`;
	const containerRef = useRef(null);
	const resizeObserverRef = useRef(null);
	const [size, setSize] = useState({
		width: 400,
		height: 250,
	});
	const getCurrentSize = useCallback(() => {
		let w = 200,
			h = 100;
		if (!containerRef.current)
			return {
				width: w,
				height: h,
			};
		if (
			RenderTarget.current() === RenderTarget.canvas ||
			RenderTarget.current() === RenderTarget.thumbnail
		) {
			if (props.style && typeof props.style.width === "number")
				w = props.style.width;
			else w = containerRef.current.offsetWidth;
			if (props.style && typeof props.style.height === "number")
				h = props.style.height;
			else h = containerRef.current.offsetHeight;
		} else {
			const rect = containerRef.current.getBoundingClientRect();
			w = rect.width;
			h = rect.height;
		}
		return {
			width: w,
			height: h,
		};
	}, [props.style?.width, props.style?.height]);
	useEffect(() => {
		if (!containerRef.current) return;
		const updateSize = () => {
			const { width: w, height: h } = getCurrentSize();
			setSize((prev) =>
				prev.width !== w || prev.height !== h
					? {
							width: w,
							height: h,
						}
					: prev,
			);
		};
		updateSize();
		if (resizeObserverRef.current) {
			resizeObserverRef.current.disconnect();
		}
		resizeObserverRef.current = new window.ResizeObserver(updateSize);
		resizeObserverRef.current.observe(containerRef.current);
		return () => {
			if (resizeObserverRef.current) {
				resizeObserverRef.current.disconnect();
				resizeObserverRef.current = null;
			}
		};
	}, [getCurrentSize]);
	const width = size.width;
	const height = size.height;
	const bw = Math.max(1, Math.min(16, borderWidth));
	const normalizedRadius = useMemo(() => {
		if (typeof borderRadius === "number") return borderRadius;
		if (typeof borderRadius === "string") {
			if (borderRadius.endsWith("px")) return parseFloat(borderRadius);
			if (borderRadius.endsWith("%")) {
				const ratio = parseFloat(borderRadius) / 100;
				return Math.max(0, (ratio * Math.min(width, height)) / 2);
			}
			return parseFloat(borderRadius);
		}
		return 0;
	}, [borderRadius, width, height]);
	const half = bw / 2;
	const sides = useMemo(
		() => ({
			top: props.top ?? true,
			right: props.right ?? true,
			bottom: props.bottom ?? true,
			left: props.left ?? true,
		}),
		[props.top, props.right, props.bottom, props.left],
	);
	const perimeter = useMemo(() => {
		const maxR = Math.min(width - bw, height - bw) / 2;
		const cr = Math.max(0, Math.min(normalizedRadius, maxR));
		return 2 * (width - bw + height - bw - 4 * cr) + 2 * Math.PI * cr;
	}, [width, height, bw, normalizedRadius]);
	const patternLength = dashLength + gapLength;
	const animOffset = direction === "clockwise" ? -patternLength : patternLength;
	const getBorderPath = useCallback((w, h, bw2, r, sides2) => {
		const half2 = bw2 / 2;
		const maxR = Math.min(r, (w - bw2) / 2, (h - bw2) / 2);
		if (!sides2.top && !sides2.right && !sides2.bottom && !sides2.left)
			return "";
		if (sides2.top && sides2.right && sides2.bottom && sides2.left) {
			return [
				`M${half2 + maxR},${half2}`,
				`H${w - half2 - maxR}`,
				`A${maxR},${maxR} 0 0 1 ${w - half2},${half2 + maxR}`,
				`V${h - half2 - maxR}`,
				`A${maxR},${maxR} 0 0 1 ${w - half2 - maxR},${h - half2}`,
				`H${half2 + maxR}`,
				`A${maxR},${maxR} 0 0 1 ${half2},${h - half2 - maxR}`,
				`V${half2 + maxR}`,
				`A${maxR},${maxR} 0 0 1 ${half2 + maxR},${half2}`,
				"Z",
			].join(" ");
		}
		let d = "";
		if (sides2.top) {
			d += `M${half2 + maxR},${half2} H${w - half2 - maxR} `;
			if (sides2.right && maxR > 0) {
				d += `A${maxR},${maxR} 0 0 1 ${w - half2},${half2 + maxR} `;
			}
		}
		if (sides2.right) {
			d += `M${w - half2},${half2 + maxR} V${h - half2 - maxR} `;
			if (sides2.bottom && maxR > 0) {
				d += `A${maxR},${maxR} 0 0 1 ${w - half2 - maxR},${h - half2} `;
			}
		}
		if (sides2.bottom) {
			d += `M${w - half2 - maxR},${h - half2} H${half2 + maxR} `;
			if (sides2.left && maxR > 0) {
				d += `A${maxR},${maxR} 0 0 1 ${half2},${h - half2 - maxR} `;
			}
		}
		if (sides2.left) {
			d += `M${half2},${h - half2 - maxR} V${half2 + maxR} `;
			if (sides2.top && maxR > 0) {
				d += `A${maxR},${maxR} 0 0 1 ${half2 + maxR},${half2} `;
			}
		}
		return d.trim();
	}, []);
	const borderPath = useMemo(
		() => getBorderPath(width, height, bw, normalizedRadius, sides),
		[width, height, bw, normalizedRadius, sides, getBorderPath],
	);
	const [animationReady, setAnimationReady] = useState(false);
	useEffect(() => {
		setAnimationReady(false);
		const styleId = `dashed-border-keyframes-${direction}-${uniqueIdRef.current}`;
		let styleEl = null;
		if (typeof document !== "undefined") {
			styleEl = document.getElementById(styleId);
			if (!styleEl) {
				styleEl = document.createElement("style");
				styleEl.id = styleId;
				document.head.appendChild(styleEl);
			}
			styleEl.innerHTML = `
                @keyframes ${animName} {
                    100% {
                        stroke-dashoffset: ${animOffset};
                    }
                }
            `;
			setTimeout(() => setAnimationReady(true), 0);
		}
		return () => {
			if (styleEl && styleEl.parentNode) {
				styleEl.parentNode.removeChild(styleEl);
			}
		};
	}, [direction, animName, animOffset]);
	const [visible, setVisible] = useState(false);
	useEffect(() => {
		const loaded =
			props.borderColor !== defaultProps.borderColor ||
			props.borderWidth !== defaultProps.borderWidth ||
			props.borderRadius !== defaultProps.borderRadius ||
			props.dashLength !== defaultProps.dashLength ||
			props.gapLength !== defaultProps.gapLength ||
			(props.animation &&
				(props.animation.animated !== defaultProps.animation.animated ||
					props.animation.speed !== defaultProps.animation.speed ||
					props.animation.direction !== defaultProps.animation.direction)) ||
			props.top !== defaultProps.top ||
			props.right !== defaultProps.right ||
			props.bottom !== defaultProps.bottom ||
			props.left !== defaultProps.left;
		if (loaded && !visible) {
			setTimeout(() => setVisible(true), 10);
		}
	}, [
		props.borderColor,
		props.borderWidth,
		props.borderRadius,
		props.dashLength,
		props.gapLength,
		props.animation,
		props.top,
		props.right,
		props.bottom,
		props.left,
		visible,
		defaultProps,
	]);
	return (
		<div
			ref={containerRef}
			style={{
				...style,
				minWidth: 20,
				minHeight: 20,
				width: "100%",
				height: "100%",
				position: "relative",
				background: "transparent",
				borderRadius,
				overflow: "visible",
				pointerEvents: "none",
				opacity: visible ? 1 : 0,
				transition: visible ? "opacity 0.4s cubic-bezier(.4,0,.2,1)" : void 0,
			}}
		>
			<svg
				width={width}
				height={height}
				viewBox={`0 0 ${width} ${height}`}
				style={{
					position: "absolute",
					top: 0,
					left: 0,
					width: "100%",
					height: "100%",
					pointerEvents: "none",
				}}
				aria-hidden={"true"}
				preserveAspectRatio={"none"}
			>
				<path
					d={borderPath}
					fill={"none"}
					stroke={borderColor}
					strokeWidth={bw}
					strokeDasharray={`${dashLength},${gapLength}`}
					strokeDashoffset={0}
					style={{
						animation:
							!animated ||
							RenderTarget.current() === RenderTarget.canvas ||
							RenderTarget.current() === RenderTarget.thumbnail ||
							!animationReady
								? "none"
								: `${animName} ${animationDuration} linear infinite`,
					}}
				/>
			</svg>
		</div>
	);
}
DashedBorderFrame.displayName = "Animated Dashed Border";
addPropertyControls2(DashedBorderFrame, {
	borderColor: {
		type: ControlType2.Color,
		title: "Dash Color",
		defaultValue: "#0099FF",
	},
	borderWidth: {
		type: ControlType2.Number,
		title: "Thickness",
		defaultValue: 3,
		min: 1,
		max: 16,
		step: 1,
		displayStepper: true,
	},
	borderRadius: {
		type: ControlType2.Number,
		title: "Radius",
		defaultValue: 16,
		min: 0,
		max: 200,
		step: 1,
		displayStepper: false,
	},
	dashLength: {
		type: ControlType2.Number,
		title: "Dash",
		defaultValue: 12,
		min: 2,
		max: 40,
		step: 1,
	},
	gapLength: {
		type: ControlType2.Number,
		title: "Gap",
		defaultValue: 8,
		min: 0,
		max: 40,
		step: 1,
	},
	top: {
		type: ControlType2.Boolean,
		title: "Top",
		defaultValue: true,
		enabledTitle: "Yes",
		disabledTitle: "No",
	},
	right: {
		type: ControlType2.Boolean,
		title: "Right",
		defaultValue: true,
		enabledTitle: "Yes",
		disabledTitle: "No",
	},
	bottom: {
		type: ControlType2.Boolean,
		title: "Bottom",
		defaultValue: true,
		enabledTitle: "Yes",
		disabledTitle: "No",
	},
	left: {
		type: ControlType2.Boolean,
		title: "Left",
		defaultValue: true,
		enabledTitle: "Yes",
		disabledTitle: "No",
	},
	animation: {
		type: ControlType2.Object,
		title: "Animation",
		controls: {
			animated: {
				type: ControlType2.Boolean,
				title: "Animated",
				defaultValue: true,
				enabledTitle: "On",
				disabledTitle: "Off",
			},
			speed: {
				type: ControlType2.Number,
				title: "Speed",
				defaultValue: 2,
				min: 0.1,
				max: 10,
				step: 0.1,
				hidden: (obj) => !obj.animated,
			},
			direction: {
				type: ControlType2.Enum,
				title: "Direction",
				options: ["clockwise", "counterclockwise"],
				optionTitles: ["Clockwise", "Counterclockwise"],
				defaultValue: "clockwise",
				displaySegmentedControl: true,
				segmentedControlDirection: "vertical",
				hidden: (obj) => !obj.animated,
			},
		},
		defaultValue: {
			animated: true,
			speed: 2,
			direction: "clockwise",
		},
	},
});

// /:https://framerusercontent.com/modules/trbsDeTZsoLYHyDQQAOE/yxTf8kqmtdD9XEmVxZE6/wLxpqDnwB.js
var RollingTextFonts = getFonts(RollingText);
var AnimatedDashedBorderFonts = getFonts(DashedBorderFrame);
var RollingTextControls = getPropertyControls(RollingText);
var enabledGestures = {
	fSd_0l8pb: {
		hover: true,
	},
	IAsy97Er5: {
		hover: true,
	},
	ks076Zojt: {
		hover: true,
	},
	pdooW3wnZ: {
		hover: true,
	},
	rwbKBWJRY: {
		hover: true,
	},
	svyJsdYyH: {
		hover: true,
	},
	UItccn4nC: {
		hover: true,
	},
};
var cycleOrder = [
	"svyJsdYyH",
	"UItccn4nC",
	"rwbKBWJRY",
	"IAsy97Er5",
	"pdooW3wnZ",
	"fSd_0l8pb",
	"ks076Zojt",
];
var serializationHash = "framer-loemB";
var variantClassNames = {
	fSd_0l8pb: "framer-v-ky9yjg",
	IAsy97Er5: "framer-v-1335nv",
	ks076Zojt: "framer-v-l6hzas",
	pdooW3wnZ: "framer-v-x4mgvm",
	rwbKBWJRY: "framer-v-s46390",
	svyJsdYyH: "framer-v-10r6x3m",
	UItccn4nC: "framer-v-owiuns",
};
function addPropertyOverrides(overrides, ...variants) {
	const nextOverrides = {};
	variants?.forEach(
		(variant) => variant && Object.assign(nextOverrides, overrides[variant]),
	);
	return nextOverrides;
}
var transition1 = {
	bounce: 0.2,
	delay: 0,
	duration: 0.4,
	type: "spring",
};
var negate = (value) => {
	return !value;
};
var Transition = ({ value, children }) => {
	const config = React.useContext(MotionConfigContext);
	const transition = value ?? config.transition;
	const contextValue = React.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var Variants = motion2.create(React.Fragment);
var humanReadableEnumMap = {
	Default: "Default",
	Roll: "Roll",
};
var humanReadableVariantMap = {
	"Nav Button Primary": "IAsy97Er5",
	"Nav Button Secondary": "rwbKBWJRY",
	"Primary Small": "fSd_0l8pb",
	"Secondary Small": "ks076Zojt",
	Oversized: "pdooW3wnZ",
	Primary: "UItccn4nC",
	Secondary: "svyJsdYyH",
};
var getProps = ({
	click,
	fill,
	height,
	id,
	label,
	link,
	state,
	width,
	...props
}) => {
	return {
		...props,
		D9dBYabSn: fill ?? props.D9dBYabSn,
		OLHf8SPKb: link ?? props.OLHf8SPKb,
		PcYKtiAUC: click ?? props.PcYKtiAUC,
		qCxNvGxTB:
			humanReadableEnumMap[state] ?? state ?? props.qCxNvGxTB ?? "Default",
		SMZpJms0Q: label ?? props.SMZpJms0Q ?? "Get started",
		variant:
			humanReadableVariantMap[props.variant] ?? props.variant ?? "svyJsdYyH",
	};
};
var createLayoutDependency = (props, variants) => {
	if (props.layoutDependency)
		return variants.join("-") + props.layoutDependency;
	return variants.join("-");
};
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
	const fallbackRef = useRef2(null);
	const refBinding = ref ?? fallbackRef;
	const defaultLayoutId = React.useId();
	const { activeLocale, setLocale } = useLocaleInfo();
	const componentViewport = useComponentViewport();
	const {
		style,
		className,
		layoutId,
		variant,
		SMZpJms0Q,
		OLHf8SPKb,
		D9dBYabSn,
		qCxNvGxTB,
		PcYKtiAUC,
		...restProps
	} = getProps(props);
	const {
		baseVariant,
		classNames,
		clearLoadingGesture,
		gestureHandlers,
		gestureVariant,
		isLoading,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		cycleOrder,
		defaultVariant: "svyJsdYyH",
		enabledGestures,
		ref: refBinding,
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const { activeVariantCallback, delay } =
		useActiveVariantCallback(baseVariant);
	const onTap184xdhl = activeVariantCallback(async (...args) => {
		setGestureState({
			isPressed: false,
		});
		if (PcYKtiAUC) {
			const res = await PcYKtiAUC(...args);
			if (res === false) return false;
		}
	});
	const sharedStyleClassNames = [];
	const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames);
	const visible = negate(D9dBYabSn);
	const isDisplayed = () => {
		if (
			[
				"UItccn4nC-hover",
				"IAsy97Er5-hover",
				"fSd_0l8pb-hover",
				"pdooW3wnZ-hover",
			].includes(gestureVariant)
		)
			return false;
		if (
			["UItccn4nC", "IAsy97Er5", "pdooW3wnZ", "fSd_0l8pb"].includes(baseVariant)
		)
			return false;
		return true;
	};
	return (
		<LayoutGroup id={layoutId ?? defaultLayoutId}>
			<Variants animate={variants} initial={false}>
				<Transition value={transition1}>
					<Link
						href={OLHf8SPKb}
						motionChild={true}
						nodeId={"svyJsdYyH"}
						scopeId={"wLxpqDnwB"}
						smoothScroll={true}
					>
						<motion2.a
							{...restProps}
							{...gestureHandlers}
							className={`${cx(scopingClassNames, "framer-10r6x3m", className, classNames)} framer-6oxrvz`}
							data-framer-name={"Secondary"}
							data-highlight={true}
							draggable={"false"}
							layoutDependency={layoutDependency}
							layoutId={"svyJsdYyH"}
							onTap={onTap184xdhl}
							ref={refBinding}
							style={{
								backgroundColor:
									"var(--token-fa07d228-afbe-4fad-9a44-2fb0dadd2a5e, rgb(23, 23, 23))",
								borderBottomLeftRadius: 20,
								borderBottomRightRadius: 20,
								borderTopLeftRadius: 20,
								borderTopRightRadius: 20,
								filter: "none",
								WebkitFilter: "none",
								...style,
							}}
							variants={{
								"fSd_0l8pb-hover": {
									filter: "brightness(0.8)",
									WebkitFilter: "brightness(0.8)",
								},
								"IAsy97Er5-hover": {
									filter: "brightness(0.8)",
									WebkitFilter: "brightness(0.8)",
								},
								"ks076Zojt-hover": {
									backgroundColor:
										"var(--token-bb3f9735-47c4-4ac2-b002-c5446021aee6, rgb(0, 0, 0))",
									filter: "none",
									WebkitFilter: "none",
								},
								"pdooW3wnZ-hover": {
									filter: "brightness(0.8)",
									WebkitFilter: "brightness(0.8)",
								},
								"rwbKBWJRY-hover": {
									backgroundColor:
										"var(--token-bb3f9735-47c4-4ac2-b002-c5446021aee6, rgb(0, 0, 0))",
									filter: "none",
									WebkitFilter: "none",
								},
								"svyJsdYyH-hover": {
									backgroundColor:
										"var(--token-bb3f9735-47c4-4ac2-b002-c5446021aee6, rgb(0, 0, 0))",
								},
								"UItccn4nC-hover": {
									filter: "brightness(0.8)",
									WebkitFilter: "brightness(0.8)",
								},
								fSd_0l8pb: {
									backgroundColor: "rgb(255, 255, 255)",
								},
								IAsy97Er5: {
									backgroundColor:
										"var(--token-4fef9130-aa55-4351-8ed5-cfba481137a7, rgb(255, 255, 255))",
									borderBottomLeftRadius: 6,
									borderBottomRightRadius: 6,
									borderTopLeftRadius: 6,
									borderTopRightRadius: 6,
								},
								pdooW3wnZ: {
									backgroundColor: "rgb(255, 255, 255)",
									borderBottomLeftRadius: 0,
									borderBottomRightRadius: 0,
									borderTopLeftRadius: 0,
									borderTopRightRadius: 0,
								},
								rwbKBWJRY: {
									borderBottomLeftRadius: 6,
									borderBottomRightRadius: 6,
									borderTopLeftRadius: 6,
									borderTopRightRadius: 6,
								},
								UItccn4nC: {
									backgroundColor: "rgb(255, 255, 255)",
								},
							}}
							{...addPropertyOverrides(
								{
									"fSd_0l8pb-hover": {
										"data-framer-name": void 0,
									},
									"IAsy97Er5-hover": {
										"data-framer-name": void 0,
									},
									"ks076Zojt-hover": {
										"data-framer-name": void 0,
									},
									"pdooW3wnZ-hover": {
										"data-framer-name": void 0,
									},
									"rwbKBWJRY-hover": {
										"data-framer-name": void 0,
									},
									"svyJsdYyH-hover": {
										"data-framer-name": void 0,
									},
									"UItccn4nC-hover": {
										"data-framer-name": void 0,
									},
									fSd_0l8pb: {
										"data-framer-name": "Primary Small",
									},
									IAsy97Er5: {
										"data-framer-name": "Nav Button Primary",
									},
									ks076Zojt: {
										"data-framer-name": "Secondary Small",
									},
									pdooW3wnZ: {
										"data-framer-name": "Oversized",
									},
									rwbKBWJRY: {
										"data-framer-name": "Nav Button Secondary",
									},
									UItccn4nC: {
										"data-framer-name": "Primary",
									},
								},
								baseVariant,
								gestureVariant,
							)}
						>
							{visible && (
								<ComponentViewportProvider>
									<SmartComponentScopedContainer
										className={"framer-zpabgk-container"}
										data-framer-name={"Fit"}
										isAuthoredByUser={true}
										isModuleExternal={true}
										layoutDependency={layoutDependency}
										layoutId={"KJk_ORIjP-container"}
										name={"Fit"}
										nodeId={"KJk_ORIjP"}
										rendersWithMotion={true}
										scopeId={"wLxpqDnwB"}
									>
										<RollingText
											color={
												"var(--token-4fef9130-aa55-4351-8ed5-cfba481137a7, rgb(255, 255, 255))"
											}
											font={{
												fontFamily: '"Raveo Variable Variable", sans-serif',
												fontSize: "16px",
												fontStyle: "normal",
												fontWeight: 1e3,
												letterSpacing: "0px",
												lineHeight: "1.7em",
											}}
											height={"100%"}
											id={"KJk_ORIjP"}
											layoutId={"KJk_ORIjP"}
											name={"Fit"}
											padding={"0px 18px 0px 18px"}
											reverse={false}
											stagger={25}
											state={qCxNvGxTB}
											style={{
												height: "100%",
											}}
											tag={"p"}
											text={SMZpJms0Q}
											textTransform={"none"}
											transition={{
												bounce: 0,
												delay: 0,
												duration: 0.4,
												type: "spring",
											}}
											variable={{
												optical: 14,
												weight: 550,
											}}
											width={"100%"}
											{...addPropertyOverrides(
												{
													"fSd_0l8pb-hover": {
														state: "Roll",
													},
													"IAsy97Er5-hover": {
														state: "Roll",
													},
													"ks076Zojt-hover": {
														state: "Roll",
													},
													"pdooW3wnZ-hover": {
														state: "Roll",
													},
													"rwbKBWJRY-hover": {
														state: "Roll",
													},
													"svyJsdYyH-hover": {
														state: "Roll",
													},
													"UItccn4nC-hover": {
														state: "Roll",
													},
													fSd_0l8pb: {
														color:
															"var(--token-bb3f9735-47c4-4ac2-b002-c5446021aee6, rgb(0, 0, 0))",
														font: {
															fontFamily:
																'"Raveo Variable Variable", sans-serif',
															fontSize: "12px",
															fontStyle: "normal",
															fontWeight: 1e3,
															letterSpacing: "0px",
															lineHeight: "1.7em",
														},
														padding: "0px 12px 0px 12px",
													},
													IAsy97Er5: {
														color:
															"var(--token-bb3f9735-47c4-4ac2-b002-c5446021aee6, rgb(0, 0, 0))",
														font: {
															fontFamily:
																'"Raveo Variable Variable", sans-serif',
															fontSize: "12px",
															fontStyle: "normal",
															fontWeight: 1e3,
															letterSpacing: "0px",
															lineHeight: "1.2em",
														},
														padding: "0px 12px 0px 12px",
													},
													ks076Zojt: {
														font: {
															fontFamily:
																'"Raveo Variable Variable", sans-serif',
															fontSize: "12px",
															fontStyle: "normal",
															fontWeight: 1e3,
															letterSpacing: "0px",
															lineHeight: "1.7em",
														},
														padding: "0px 12px 0px 12px",
													},
													pdooW3wnZ: {
														color:
															"var(--token-bb3f9735-47c4-4ac2-b002-c5446021aee6, rgb(0, 0, 0))",
														font: {
															fontFamily:
																'"Raveo Variable Variable", sans-serif',
															fontSize: "28px",
															fontStyle: "normal",
															fontWeight: 1e3,
															letterSpacing: "-0.02em",
															lineHeight: "1.7em",
														},
														padding: "0px 28px 0px 28px",
													},
													rwbKBWJRY: {
														font: {
															fontFamily:
																'"Raveo Variable Variable", sans-serif',
															fontSize: "12px",
															fontStyle: "normal",
															fontWeight: 1e3,
															letterSpacing: "0px",
															lineHeight: "1.8em",
														},
														padding: "0px 12px 0px 12px",
													},
													UItccn4nC: {
														color:
															"var(--token-bb3f9735-47c4-4ac2-b002-c5446021aee6, rgb(0, 0, 0))",
													},
												},
												baseVariant,
												gestureVariant,
											)}
										/>
									</SmartComponentScopedContainer>
								</ComponentViewportProvider>
							)}
							{D9dBYabSn && (
								<ComponentViewportProvider>
									<SmartComponentScopedContainer
										className={"framer-m5wg9d-container"}
										data-framer-name={"Fill"}
										isAuthoredByUser={true}
										isModuleExternal={true}
										layoutDependency={layoutDependency}
										layoutId={"wDswxR602-container"}
										name={"Fill"}
										nodeId={"wDswxR602"}
										rendersWithMotion={true}
										scopeId={"wLxpqDnwB"}
									>
										<RollingText
											color={
												"var(--token-4fef9130-aa55-4351-8ed5-cfba481137a7, rgb(255, 255, 255))"
											}
											font={{
												fontFamily: '"Raveo Variable Variable", sans-serif',
												fontSize: "14px",
												fontStyle: "normal",
												fontWeight: 1e3,
												letterSpacing: "0px",
												lineHeight: "1.7em",
											}}
											height={"100%"}
											id={"wDswxR602"}
											layoutId={"wDswxR602"}
											name={"Fill"}
											padding={"0px 18px 0px 18px"}
											reverse={false}
											stagger={25}
											state={qCxNvGxTB}
											style={{
												height: "100%",
												width: "100%",
											}}
											tag={"p"}
											text={SMZpJms0Q}
											textTransform={"none"}
											transition={{
												bounce: 0,
												delay: 0,
												duration: 0.4,
												type: "spring",
											}}
											variable={{
												optical: 14,
												weight: 550,
											}}
											width={"100%"}
											{...addPropertyOverrides(
												{
													"fSd_0l8pb-hover": {
														state: "Roll",
													},
													"IAsy97Er5-hover": {
														state: "Roll",
													},
													"ks076Zojt-hover": {
														state: "Roll",
													},
													"pdooW3wnZ-hover": {
														state: "Roll",
													},
													"rwbKBWJRY-hover": {
														state: "Roll",
													},
													"svyJsdYyH-hover": {
														state: "Roll",
													},
													"UItccn4nC-hover": {
														state: "Roll",
													},
													fSd_0l8pb: {
														color:
															"var(--token-bb3f9735-47c4-4ac2-b002-c5446021aee6, rgb(0, 0, 0))",
														font: {
															fontFamily:
																'"Raveo Variable Variable", sans-serif',
															fontSize: "12px",
															fontStyle: "normal",
															fontWeight: 1e3,
															letterSpacing: "0px",
															lineHeight: "1.7em",
														},
														padding: "0px 12px 0px 12px",
													},
													IAsy97Er5: {
														color:
															"var(--token-bb3f9735-47c4-4ac2-b002-c5446021aee6, rgb(0, 0, 0))",
														font: {
															fontFamily:
																'"Raveo Variable Variable", sans-serif',
															fontSize: "12px",
															fontStyle: "normal",
															fontWeight: 1e3,
															letterSpacing: "0px",
															lineHeight: "1.2em",
														},
														padding: "0px 12px 0px 12px",
													},
													ks076Zojt: {
														font: {
															fontFamily:
																'"Raveo Variable Variable", sans-serif',
															fontSize: "12px",
															fontStyle: "normal",
															fontWeight: 1e3,
															letterSpacing: "0px",
															lineHeight: "1.7em",
														},
														padding: "0px 12px 0px 12px",
													},
													pdooW3wnZ: {
														color:
															"var(--token-bb3f9735-47c4-4ac2-b002-c5446021aee6, rgb(0, 0, 0))",
														font: {
															fontFamily:
																'"Raveo Variable Variable", sans-serif',
															fontSize: "28px",
															fontStyle: "normal",
															fontWeight: 1e3,
															letterSpacing: "-0.02em",
															lineHeight: "1.7em",
														},
														padding: "0px 28px 0px 28px",
													},
													rwbKBWJRY: {
														font: {
															fontFamily:
																'"Raveo Variable Variable", sans-serif',
															fontSize: "12px",
															fontStyle: "normal",
															fontWeight: 1e3,
															letterSpacing: "0px",
															lineHeight: "1.8em",
														},
														padding: "0px 12px 0px 12px",
													},
													UItccn4nC: {
														color:
															"var(--token-bb3f9735-47c4-4ac2-b002-c5446021aee6, rgb(0, 0, 0))",
													},
												},
												baseVariant,
												gestureVariant,
											)}
										/>
									</SmartComponentScopedContainer>
								</ComponentViewportProvider>
							)}
							{isDisplayed() && (
								<ComponentViewportProvider>
									<SmartComponentScopedContainer
										className={"framer-1s7vqp7-container"}
										isAuthoredByUser={true}
										isModuleExternal={true}
										layoutDependency={layoutDependency}
										layoutId={"mPPkWa11v-container"}
										nodeId={"mPPkWa11v"}
										rendersWithMotion={true}
										scopeId={"wLxpqDnwB"}
										style={{
											opacity: 0,
										}}
										variants={{
											"ks076Zojt-hover": {
												opacity: 1,
											},
											"rwbKBWJRY-hover": {
												opacity: 1,
											},
											"svyJsdYyH-hover": {
												opacity: 1,
											},
										}}
									>
										<DashedBorderFrame
											animation={{
												animated: false,
												direction: "clockwise",
												speed: 2,
											}}
											borderColor={
												"var(--token-04a04e54-cbd8-4312-8418-e1527ef396e1, rgb(51, 51, 51))"
											}
											borderRadius={20}
											borderWidth={1}
											bottom={true}
											dashLength={8}
											gapLength={6}
											height={"100%"}
											id={"mPPkWa11v"}
											layoutId={"mPPkWa11v"}
											left={true}
											right={true}
											style={{
												height: "100%",
												width: "100%",
											}}
											top={true}
											width={"100%"}
											{...addPropertyOverrides(
												{
													"ks076Zojt-hover": {
														animation: {
															animated: true,
															direction: "clockwise",
															speed: 2,
														},
													},
													"rwbKBWJRY-hover": {
														animation: {
															animated: true,
															direction: "clockwise",
															speed: 2,
														},
													},
													"svyJsdYyH-hover": {
														animation: {
															animated: true,
															direction: "clockwise",
															speed: 2,
														},
													},
													ks076Zojt: {
														borderRadius: 15,
													},
													rwbKBWJRY: {
														borderRadius: 6,
														dashLength: 6,
														gapLength: 4,
													},
												},
												baseVariant,
												gestureVariant,
											)}
										/>
									</SmartComponentScopedContainer>
								</ComponentViewportProvider>
							)}
						</motion2.a>
					</Link>
				</Transition>
			</Variants>
		</LayoutGroup>
	);
});
var css = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-loemB.framer-6oxrvz, .framer-loemB .framer-6oxrvz { display: block; }",
	".framer-loemB.framer-10r6x3m { align-content: center; align-items: center; cursor: pointer; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 6px; height: 40px; justify-content: center; overflow: hidden; padding: 0px; position: relative; text-decoration: none; width: min-content; will-change: var(--framer-will-change-override, transform); }",
	".framer-loemB .framer-zpabgk-container { -webkit-user-select: none; flex: none; height: 100%; position: relative; user-select: none; width: auto; }",
	".framer-loemB .framer-m5wg9d-container { -webkit-user-select: none; flex: 1 0 0px; height: 100%; position: relative; user-select: none; width: 1px; }",
	".framer-loemB .framer-1s7vqp7-container { bottom: 2px; flex: none; left: 2px; pointer-events: none; position: absolute; right: 2px; top: 2px; z-index: 1; }",
	".framer-loemB.framer-v-s46390.framer-10r6x3m, .framer-loemB.framer-v-1335nv.framer-10r6x3m, .framer-loemB.framer-v-ky9yjg.framer-10r6x3m, .framer-loemB.framer-v-l6hzas.framer-10r6x3m { height: 30px; }",
	".framer-loemB.framer-v-x4mgvm.framer-10r6x3m { height: 74px; will-change: unset; }",
	".framer-loemB.framer-v-10r6x3m.hover .framer-1s7vqp7-container, .framer-loemB.framer-v-s46390.hover .framer-1s7vqp7-container, .framer-loemB.framer-v-l6hzas.hover .framer-1s7vqp7-container { bottom: 0px; left: 0px; right: 0px; top: 0px; }",
	".framer-loemB.framer-v-x4mgvm.hover.framer-10r6x3m { will-change: unset; }",
];
var FramerwLxpqDnwB = withCSS(Component, css, "framer-loemB");
var stdin_default = FramerwLxpqDnwB;
FramerwLxpqDnwB.displayName = "Button";
FramerwLxpqDnwB.defaultProps = {
	height: 40,
	width: 121.5,
};
addPropertyControls3(FramerwLxpqDnwB, {
	variant: {
		options: [
			"svyJsdYyH",
			"UItccn4nC",
			"rwbKBWJRY",
			"IAsy97Er5",
			"pdooW3wnZ",
			"fSd_0l8pb",
			"ks076Zojt",
		],
		optionTitles: [
			"Secondary",
			"Primary",
			"Nav Button Secondary",
			"Nav Button Primary",
			"Oversized",
			"Primary Small",
			"Secondary Small",
		],
		title: "Variant",
		type: ControlType3.Enum,
	},
	SMZpJms0Q: {
		defaultValue: "Get started",
		displayTextArea: false,
		title: "Label",
		type: ControlType3.String,
	},
	OLHf8SPKb: {
		title: "Link",
		type: ControlType3.Link,
	},
	D9dBYabSn: {
		defaultValue: false,
		description: 'Set to "Yes" when using the button with fill width.',
		title: "Fill",
		type: ControlType3.Boolean,
	},
	qCxNvGxTB: RollingTextControls?.["state"] && {
		...RollingTextControls["state"],
		defaultValue: "Default",
		description:
			"Used for triggering rolling of text when used within another component.",
		hidden: void 0,
		title: "State",
	},
	PcYKtiAUC: {
		title: "Click",
		type: ControlType3.EventHandler,
	},
});
var variationAxes = [
	{
		defaultValue: 14,
		maxValue: 32,
		minValue: 14,
		name: "Optical size",
		tag: "opsz",
	},
	{
		defaultValue: 400,
		maxValue: 900,
		minValue: 100,
		name: "Weight",
		tag: "wght",
	},
];
addFonts(
	FramerwLxpqDnwB,
	[
		{
			explicitInter: true,
			fonts: [
				{
					family: "Raveo Variable",
					source: "builtIn",
					style: "normal",
					url: "https://framerusercontent.com/assets/JEdA86oNqHX1i1CLD92Q7jTxV8.woff2",
					variationAxes,
					weight: "1000",
				},
			],
		},
		...RollingTextFonts,
		...AnimatedDashedBorderFonts,
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:button
import { WithFramerBreakpoints } from "unframer";

// virtual:__routes
var routes = {
	Agq1L2jDe: {
		path: "/lib/careers/:slug",
	},
	DEi7PWhxw: {
		path: "/done/coming-soon",
	},
	J_r8CT7G7: {
		path: "/lib/about",
	},
	MiKvYzstd: {
		path: "/disconnect",
	},
	Mxb74mbpa: {
		path: "/verify-social",
	},
	OegBE_J9e: {
		path: "/lib/home",
	},
	SOf0RbDE_: {
		path: "/lib/blog",
	},
	TQDjkQC2A: {
		path: "/lib/contact",
	},
	UVAM5_4oX: {
		path: "/verify",
	},
	XanNBrFME: {
		path: "/kyc",
	},
	YBTUYW5mq: {
		path: "/lib/pricing",
	},
	a5CCfdDiy: {
		path: "/lib/updates/:slug",
	},
	augiA20Il: {
		path: "/",
	},
	cpP7I9WGp: {
		path: "/done/404",
	},
	e9YIc4Uv5: {
		path: "/lib/waitlist",
	},
	inNalAASs: {
		path: "/lib/blog/:slug",
	},
	ixIXvnG3U: {
		path: "/lib/legal/:slug",
	},
	nhNLVf3qq: {
		path: "/connections",
	},
	rX7FOhQc0: {
		path: "/lib/updates",
	},
	so5jTiDIE: {
		path: "/lib/careers",
	},
};

// virtual:button
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {
	base: "fSd_0l8pb",
	xl: "UItccn4nC",
};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"c32b11589f2bc68bdb1b6d8b6f1517c87e280d7db56dec1009246311f93861da"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders ButtonFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"c32b11589f2bc68bdb1b6d8b6f1517c87e280d7db56dec1009246311f93861da"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default);
var button_default = ComponentWithRoot;
export { button_default as default };

// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project c32b11589f2bc68b "humanpass", do not edit manually */
"use client";
import { useNavStore } from "../../src/store";
/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
 * variant?: 'Desktop' | 'Tablet' | 'Phone' // Variant
}} Props

 */
var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {
      get: all[name],
      enumerable: true,
    });
};

// virtual:not-found
import { ContextProviders } from "unframer";

// /:https://framerusercontent.com/modules/mKbSgczVcnOPPynIy1bw/rAq59hfQfVLAopUwq7ed/jwaXCiVTZ.js
import * as React3 from "react";
import { useRef as useRef5 } from "react";
import { jsx as _jsx7 } from "react/jsx-runtime";
import {
  addFonts as addFonts3,
  addPropertyControls as addPropertyControls6,
  ComponentViewportProvider as ComponentViewportProvider3,
  ControlType as ControlType6,
  cx as cx3,
  getFonts as getFonts3,
  getFontsFromSharedStyle,
  LayoutGroup as LayoutGroup3,
  motion as motion4,
  MotionConfigContext as MotionConfigContext3,
  RichText,
  SmartComponentScopedContainer as SmartComponentScopedContainer3,
  useComponentViewport as useComponentViewport3,
  useLocaleInfo as useLocaleInfo3,
  useVariantState as useVariantState3,
  withCodeBoundaryForOverrides,
  withCSS as withCSS3,
  withFX,
  withMappedReactProps,
  withOptimizedAppearEffect,
} from "unframer";

// /:https://framerusercontent.com/modules/uPkD7RNUO1vmmtMstX6i/UuMuKV94f0TLVC5yiYVK/Dither_Archive.js
import { useEffect, useMemo, useRef } from "react";
import {
  addPropertyControls,
  ControlType,
  RenderTarget,
  useInView,
} from "unframer";
addPropertyControls(Dither, {
  image: {
    type: ControlType.ResponsiveImage,
  },
  algorithm: {
    type: ControlType.Enum,
    title: "Algorithm",
    options: ["floyd-steinberg", "ordered", "random", "atkinson"],
    optionTitles: ["Floyd-Steinberg", "Ordered (Bayer)", "Random", "Atkinson"],
    defaultValue: "floyd-steinberg",
  },
  threshold: {
    type: ControlType.Number,
    title: "Threshold",
    defaultValue: 128,
    min: 0,
    max: 255,
    step: 1,
  },
  brightness: {
    type: ControlType.Number,
    title: "Brightness",
    defaultValue: 0,
    min: -100,
    max: 100,
    step: 1,
  },
  midtones: {
    type: ControlType.Number,
    title: "Midtones",
    defaultValue: 50,
    min: 0,
    max: 100,
    step: 1,
  },
  pixelSize: {
    type: ControlType.Number,
    title: "Pixel Size",
    defaultValue: 1,
    min: 1,
    max: 100,
    step: 1,
  },
  glow: {
    type: ControlType.Number,
    title: "Glow",
    defaultValue: 0,
    min: 0,
    max: 50,
    step: 1,
  },
  backgroundColor: {
    type: ControlType.Color,
    title: "Background",
    defaultValue: "#000000",
  },
  dotColor: {
    type: ControlType.Color,
    title: "Pixel Color",
    defaultValue: "#FFFFFF",
  },
  animation: {
    type: ControlType.Object,
    icon: "effect",
    title: "Animation",
    controls: {
      enabled: {
        type: ControlType.Boolean,
        title: "Enabled",
        defaultValue: false,
      },
      canvasPreview: {
        type: ControlType.Boolean,
        title: "Preview",
        defaultValue: true,
        hidden: (props) => !props.enabled,
      },
      interval: {
        type: ControlType.Number,
        title: "Interval",
        defaultValue: 0.1,
        min: 0.01,
        max: 5,
        step: 0.01,
        unit: "s",
        displayStepper: true,
        hidden: (props) => !props.enabled,
      },
      intensity: {
        type: ControlType.Number,
        title: "Intensity",
        defaultValue: 10,
        min: 0,
        max: 100,
        hidden: (props) => !props.enabled,
      },
    },
  },
  radius: {
    // @ts-expect-error - BorderRadius is not in this NPM version
    type: ControlType.BorderRadius,
    defaultValue: "0px",
    title: "Radius",
  },
  enabled: {
    type: ControlType.Boolean,
    title: "Enabled",
    defaultValue: true,
  },
});
Dither.defaultProps = {
  algorithm: "floyd-steinberg",
  threshold: 128,
  pixelSize: 1,
  brightness: 0,
  glow: 0,
  midtones: 50,
  radius: 0,
  backgroundColor: "#000000",
  dotColor: "#ffffff",
  animation: {
    enabled: false,
    canvasPreview: true,
    interval: 0.1,
    intensity: 10,
  },
  enabled: true,
};
function Dither(props) {
  const isOnFramerCanvas = RenderTarget.hasRestrictions();
  const hasImage = "image" in props && props.image;
  const canvasRef = useRef(null);
  const isInView = useInView(canvasRef, {
    once: false,
  });
  const intensityTransformed = useMemo(() => {
    return transformValue(props.animation.intensity, [0, 100], [1e-3, 10]);
  }, [props.animation.intensity]);
  const animationFrameRef = useRef(null);
  const lastTimeRef = useRef(0);
  const elapsedTimeRef = useRef(0);
  const animatedValuesRef = useRef({
    brightness: props.brightness,
    glow: props.glow,
  });
  const handleProcessImage = () => {
    if (!canvasRef.current) return;
    const canvas = canvasRef.current;
    const ctx = canvas.getContext("2d", {
      willReadFrequently: true,
    });
    if (!ctx) return;
    const img = new Image();
    img.crossOrigin = "anonymous";
    img.onload = () => {
      try {
        const aspectRatio = img.naturalWidth / img.naturalHeight;
        const baseResolution = 800;
        let targetWidth, targetHeight;
        if (aspectRatio >= 1) {
          targetWidth = Math.floor(baseResolution / props.pixelSize);
          targetHeight = Math.floor(targetWidth / aspectRatio);
        } else {
          targetHeight = Math.floor(baseResolution / props.pixelSize);
          targetWidth = Math.floor(targetHeight * aspectRatio);
        }
        canvas.width = targetWidth;
        canvas.height = targetHeight;
        ctx.imageSmoothingEnabled = false;
        ctx.drawImage(img, 0, 0, targetWidth, targetHeight);
        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
        const brightAdjusted = DitherProcessor.adjustBrightness(
          imageData,
          animatedValuesRef.current.brightness
        );
        const adjustedThreshold = Math.round(
          (props.threshold * props.midtones) / 50
        );
        let processedData;
        switch (props.algorithm) {
          case "floyd-steinberg":
            processedData = DitherProcessor.floydSteinberg(
              brightAdjusted,
              adjustedThreshold,
              props.backgroundColor,
              props.dotColor
            );
            break;
          case "ordered":
            processedData = DitherProcessor.ordered(
              brightAdjusted,
              adjustedThreshold,
              props.backgroundColor,
              props.dotColor
            );
            break;
          case "random":
            processedData = DitherProcessor.random(
              brightAdjusted,
              adjustedThreshold,
              props.backgroundColor,
              props.dotColor
            );
            break;
          case "atkinson":
            processedData = DitherProcessor.atkinson(
              brightAdjusted,
              adjustedThreshold,
              props.backgroundColor,
              props.dotColor
            );
            break;
          default:
            processedData = DitherProcessor.floydSteinberg(
              brightAdjusted,
              adjustedThreshold,
              props.backgroundColor,
              props.dotColor
            );
        }
        const glowProcessed = DitherProcessor.applyGlow(
          processedData,
          animatedValuesRef.current.glow
        );
        ctx.putImageData(glowProcessed, 0, 0);
      } catch (err) {
        console.error("Failed to process image", err);
      }
    };
    img.src = props.image.src;
  };
  useEffect(() => {
    if (!props.animation.enabled || !isInView) {
      animatedValuesRef.current = {
        brightness: props.brightness,
        glow: props.glow,
      };
      handleProcessImage();
      return;
    }
    if (isOnFramerCanvas && !props.animation.canvasPreview) {
      animatedValuesRef.current = {
        brightness: props.brightness,
        glow: props.glow,
      };
      handleProcessImage();
      return;
    }
    const generateRandomValue = (baseValue) => {
      const variation = Math.abs(intensityTransformed);
      return baseValue + (Math.random() * 2 - 1) * variation;
    };
    const animate = (currentTime) => {
      if (!lastTimeRef.current) {
        lastTimeRef.current = currentTime;
      }
      const deltaTime = currentTime - lastTimeRef.current;
      elapsedTimeRef.current += deltaTime;
      if (elapsedTimeRef.current >= props.animation.interval * 1e3) {
        const newBrightness = generateRandomValue(props.brightness);
        animatedValuesRef.current = {
          brightness: newBrightness,
          glow: props.glow,
        };
        handleProcessImage();
        elapsedTimeRef.current = 0;
      }
      lastTimeRef.current = currentTime;
      animationFrameRef.current = requestAnimationFrame(animate);
    };
    animationFrameRef.current = requestAnimationFrame(animate);
    return () => {
      if (animationFrameRef.current) {
        cancelAnimationFrame(animationFrameRef.current);
      }
      lastTimeRef.current = 0;
      elapsedTimeRef.current = 0;
    };
  }, [
    props.animation.enabled,
    props.animation.interval,
    props.animation.intensity,
    props.animation.canvasPreview,
    props.brightness,
    props.glow,
    props.backgroundColor,
    props.dotColor,
    props.algorithm,
    props.threshold,
    props.pixelSize,
    props.midtones,
    isInView,
    props.enabled,
    intensityTransformed,
  ]);
  useEffect(() => {
    if (!hasImage) return;
    handleProcessImage();
  }, [
    props.image,
    props.algorithm,
    props.threshold,
    props.pixelSize,
    props.midtones,
    props.backgroundColor,
    props.dotColor,
    hasImage,
    props.enabled,
  ]);
  const getAriaLabel = () => {
    if (!props.image.alt) {
      return `Image with ${props.algorithm} dithering applied`;
    }
    return `Dithered version of ${props.image.alt} with ${props.algorithm} dithering applied`;
  };
  if (!hasImage) {
    return (
      <div
        style={{
          width: "100%",
          height: "100%",
          backgroundColor: "#8855FF10",
          color: "#9966FF",
          fontFamily: "Inter",
          fontSize: "11px",
          letterSpacing: "-0.03em",
          fontWeight: 400,
          padding: "40px",
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
        }}
      >
        {"Set up the component by uploading an image."}
      </div>
    );
  }
  return (
    <div
      style={{
        width: "100%",
        height: "100%",
        borderRadius: props.radius,
        overflow: "hidden",
      }}
    >
      {!props.enabled && (
        <img
          src={props.image.src}
          alt={props.image.alt}
          style={{
            width: "100%",
            height: "100%",
            objectFit: "cover",
          }}
        />
      )}
      <canvas
        ref={canvasRef}
        style={{
          width: "100%",
          height: "100%",
          objectFit: "cover",
          imageRendering: "pixelated",
          opacity: props.enabled ? 1 : 0,
        }}
        aria-label={getAriaLabel()}
      />
    </div>
  );
}
var DitherProcessor = class {
  // Utility function to convert hex color to RGB
  static hexToRgb(color) {
    color = color.replace(/\s+/g, "");
    const varMatch = color.match(/var\([^,]*,\s*(.*?)\)\s*(?:\/\*|$)/);
    if (varMatch) {
      color = varMatch[1].trim();
    }
    const rgbMatch = color.match(/^rgb\((\d+),(\d+),(\d+)\)$/);
    if (rgbMatch) {
      return {
        r: parseInt(rgbMatch[1], 10),
        g: parseInt(rgbMatch[2], 10),
        b: parseInt(rgbMatch[3], 10),
      };
    }
    const rgbaMatch = color.match(/^rgba\((\d+),(\d+),(\d+),[\d.]+\)$/);
    if (rgbaMatch) {
      return {
        r: parseInt(rgbaMatch[1], 10),
        g: parseInt(rgbaMatch[2], 10),
        b: parseInt(rgbaMatch[3], 10),
      };
    }
    const hexMatch = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(color);
    if (hexMatch) {
      return {
        r: parseInt(hexMatch[1], 16),
        g: parseInt(hexMatch[2], 16),
        b: parseInt(hexMatch[3], 16),
      };
    }
    console.warn("Could not parse color:", color);
    const numbers = color.match(/\d+/g);
    if (numbers && numbers.length >= 3) {
      return {
        r: parseInt(numbers[0], 10),
        g: parseInt(numbers[1], 10),
        b: parseInt(numbers[2], 10),
      };
    }
    return {
      r: 0,
      g: 0,
      b: 0,
    };
  }
  // Apply brightness adjustment to image data
  static adjustBrightness(imageData, brightness) {
    const data = new Uint8ClampedArray(imageData.data);
    const factor = 1 + brightness / 100;
    for (let i = 0; i < data.length; i += 4) {
      data[i] = Math.min(255, Math.max(0, Math.round(data[i] * factor)));
      data[i + 1] = Math.min(
        255,
        Math.max(0, Math.round(data[i + 1] * factor))
      );
      data[i + 2] = Math.min(
        255,
        Math.max(0, Math.round(data[i + 2] * factor))
      );
    }
    return new ImageData(data, imageData.width, imageData.height);
  }
  // Apply glow effect to image data
  static applyGlow(imageData, glowAmount) {
    if (glowAmount === 0) return imageData;
    const canvas = document.createElement("canvas");
    canvas.width = imageData.width;
    canvas.height = imageData.height;
    const ctx = canvas.getContext("2d", {
      willReadFrequently: true,
    });
    ctx.putImageData(imageData, 0, 0);
    ctx.filter = `blur(${glowAmount / 4}px)`;
    ctx.globalCompositeOperation = "lighter";
    ctx.drawImage(canvas, 0, 0);
    ctx.filter = "none";
    return ctx.getImageData(0, 0, imageData.width, imageData.height);
  }
  // Floyd-Steinberg error diffusion dithering
  static floydSteinberg(imageData, threshold, backgroundColor, dotColor) {
    const data = new Uint8ClampedArray(imageData.data);
    const width = imageData.width;
    const height = imageData.height;
    const bgColor = this.hexToRgb(backgroundColor);
    const dotColorRgb = this.hexToRgb(dotColor);
    for (let y = 0; y < height; y++) {
      for (let x = 0; x < width; x++) {
        const idx = (y * width + x) * 4;
        const luminance = Math.round(
          0.299 * data[idx] + 0.587 * data[idx + 1] + 0.114 * data[idx + 2]
        );
        const useDotColor = luminance > threshold;
        const targetColor = useDotColor ? dotColorRgb : bgColor;
        const errorR = data[idx] - targetColor.r;
        const errorG = data[idx + 1] - targetColor.g;
        const errorB = data[idx + 2] - targetColor.b;
        data[idx] = targetColor.r;
        data[idx + 1] = targetColor.g;
        data[idx + 2] = targetColor.b;
        data[idx + 3] = 255;
        if (x + 1 < width) {
          data[(y * width + (x + 1)) * 4] += (errorR * 7) / 16;
          data[(y * width + (x + 1)) * 4 + 1] += (errorG * 7) / 16;
          data[(y * width + (x + 1)) * 4 + 2] += (errorB * 7) / 16;
        }
        if (y + 1 < height) {
          if (x - 1 >= 0) {
            data[((y + 1) * width + (x - 1)) * 4] += (errorR * 3) / 16;
            data[((y + 1) * width + (x - 1)) * 4 + 1] += (errorG * 3) / 16;
            data[((y + 1) * width + (x - 1)) * 4 + 2] += (errorB * 3) / 16;
          }
          data[((y + 1) * width + x) * 4] += (errorR * 5) / 16;
          data[((y + 1) * width + x) * 4 + 1] += (errorG * 5) / 16;
          data[((y + 1) * width + x) * 4 + 2] += (errorB * 5) / 16;
          if (x + 1 < width) {
            data[((y + 1) * width + (x + 1)) * 4] += errorR / 16;
            data[((y + 1) * width + (x + 1)) * 4 + 1] += errorG / 16;
            data[((y + 1) * width + (x + 1)) * 4 + 2] += errorB / 16;
          }
        }
      }
    }
    return new ImageData(data, width, height);
  }
  // Ordered/Bayer dithering
  static ordered(imageData, threshold, backgroundColor, dotColor) {
    const data = new Uint8ClampedArray(imageData.data);
    const width = imageData.width;
    const height = imageData.height;
    const bgColor = this.hexToRgb(backgroundColor);
    const dotColorRgb = this.hexToRgb(dotColor);
    const bayerMatrix = [
      [0, 8, 2, 10],
      [12, 4, 14, 6],
      [3, 11, 1, 9],
      [15, 7, 13, 5],
    ];
    for (let y = 0; y < height; y++) {
      for (let x = 0; x < width; x++) {
        const idx = (y * width + x) * 4;
        const gray = Math.round(
          0.299 * data[idx] + 0.587 * data[idx + 1] + 0.114 * data[idx + 2]
        );
        const bayerValue = bayerMatrix[y % 4][x % 4];
        const adjustedThreshold = threshold + (bayerValue - 7.5) * 16;
        const useDotColor = gray > adjustedThreshold;
        const targetColor = useDotColor ? dotColorRgb : bgColor;
        data[idx] = targetColor.r;
        data[idx + 1] = targetColor.g;
        data[idx + 2] = targetColor.b;
      }
    }
    return new ImageData(data, width, height);
  }
  // Random dithering
  static random(imageData, threshold, backgroundColor, dotColor) {
    const data = new Uint8ClampedArray(imageData.data);
    const width = imageData.width;
    const height = imageData.height;
    const bgColor = this.hexToRgb(backgroundColor);
    const dotColorRgb = this.hexToRgb(dotColor);
    for (let y = 0; y < height; y++) {
      for (let x = 0; x < width; x++) {
        const idx = (y * width + x) * 4;
        const gray = Math.round(
          0.299 * data[idx] + 0.587 * data[idx + 1] + 0.114 * data[idx + 2]
        );
        const randomNoise = (Math.random() - 0.5) * 100;
        const adjustedThreshold = threshold + randomNoise;
        const useDotColor = gray > adjustedThreshold;
        const targetColor = useDotColor ? dotColorRgb : bgColor;
        data[idx] = targetColor.r;
        data[idx + 1] = targetColor.g;
        data[idx + 2] = targetColor.b;
      }
    }
    return new ImageData(data, width, height);
  }
  // Atkinson dithering
  static atkinson(imageData, threshold, backgroundColor, dotColor) {
    const data = new Uint8ClampedArray(imageData.data);
    const width = imageData.width;
    const height = imageData.height;
    const bgColor = this.hexToRgb(backgroundColor);
    const dotColorRgb = this.hexToRgb(dotColor);
    for (let y = 0; y < height; y++) {
      for (let x = 0; x < width; x++) {
        const idx = (y * width + x) * 4;
        const luminance = Math.round(
          0.299 * data[idx] + 0.587 * data[idx + 1] + 0.114 * data[idx + 2]
        );
        const useDotColor = luminance > threshold;
        const targetColor = useDotColor ? dotColorRgb : bgColor;
        const errorR = data[idx] - targetColor.r;
        const errorG = data[idx + 1] - targetColor.g;
        const errorB = data[idx + 2] - targetColor.b;
        data[idx] = targetColor.r;
        data[idx + 1] = targetColor.g;
        data[idx + 2] = targetColor.b;
        data[idx + 3] = 255;
        const positions = [
          [1, 0],
          [2, 0],
          [-1, 1],
          [0, 1],
          [1, 1],
          [0, 2],
        ];
        for (const [dx, dy] of positions) {
          const newX = x + dx;
          const newY = y + dy;
          if (newX >= 0 && newX < width && newY >= 0 && newY < height) {
            const newIdx = (newY * width + newX) * 4;
            data[newIdx] = Math.min(
              255,
              Math.max(0, data[newIdx] + errorR / 8)
            );
            data[newIdx + 1] = Math.min(
              255,
              Math.max(0, data[newIdx + 1] + errorG / 8)
            );
            data[newIdx + 2] = Math.min(
              255,
              Math.max(0, data[newIdx + 2] + errorB / 8)
            );
          }
        }
      }
    }
    return new ImageData(data, width, height);
  }
};
function transformValue(input, inputRange, outputRange, clamp = false) {
  const [inputMin, inputMax] = inputRange;
  const [outputMin, outputMax] = outputRange;
  const progress = (input - inputMin) / (inputMax - inputMin);
  let result = outputMin + progress * (outputMax - outputMin);
  if (clamp) {
    if (outputMax > outputMin) {
      result = Math.min(Math.max(result, outputMin), outputMax);
    } else {
      result = Math.min(Math.max(result, outputMax), outputMin);
    }
  }
  return result;
}
Dither.displayName = "Dither";

// /:https://framerusercontent.com/modules/MFuOmnRpQMGNsOKk8VGv/vJZEICg1RBhjm2TwvwA9/HumanPassComingSoon.js
import { forwardRef } from "react";

// /:https://framer.com/m/framer/store.js@^1.0.0
import { useEffect as useEffect2, useState } from "react";
import { Data, useObserveData } from "unframer";
function createStore(state1) {
  const dataStore = Data({
    state: Object.freeze({
      ...state1,
    }),
  });
  const setDataStore = (newState) => {
    if (typeof newState === "function") {
      newState = newState(dataStore.state);
    }
    dataStore.state = Object.freeze({
      ...dataStore.state,
      ...newState,
    });
  };
  let storeState =
    typeof state1 === "object"
      ? Object.freeze({
          ...state1,
        })
      : state1;
  const storeSetters = /* @__PURE__ */ new Set();
  const setStoreState = (newState) => {
    if (typeof newState === "function") {
      newState = newState(storeState);
    }
    storeState =
      typeof newState === "object"
        ? Object.freeze({
            ...storeState,
            ...newState,
          })
        : newState;
    storeSetters.forEach((setter) => setter(storeState));
  };
  function useStore2() {
    const [state, setState] = useState(storeState);
    useEffect2(() => {
      storeSetters.add(setState);
      return () => storeSetters.delete(setState);
    }, []);
    if (useObserveData() === true) {
      useObserveData();
      return [dataStore.state, setDataStore];
    } else {
      return [state, setStoreState];
    }
  }
  return useStore2;
}

// /:https://framerusercontent.com/modules/MFuOmnRpQMGNsOKk8VGv/vJZEICg1RBhjm2TwvwA9/HumanPassComingSoon.js
var useStore = createStore({
  background: "#0099FF",
});
function withNavigateBack(Component4) {
  return /* @__PURE__ */ forwardRef((props, ref) => {
    const navigate = useNavStore((s) => s.navigate);
    return <Component4 ref={ref} {...props} onClick={() => navigate(-1)} />;
  });
}

// /:https://framerusercontent.com/modules/yXFrli89e4rnKW93WjH0/Q7zcw2TI3MAi3ZiJezEE/bRzBDjLMv.js
import * as React from "react";
import { useRef as useRef3 } from "react";
import {
  addFonts,
  addPropertyControls as addPropertyControls4,
  ComponentViewportProvider,
  ControlType as ControlType4,
  cx,
  fontStore,
  getFonts,
  getPropertyControls,
  LayoutGroup,
  Link,
  motion as motion2,
  MotionConfigContext,
  SmartComponentScopedContainer,
  useActiveVariantCallback,
  useComponentViewport,
  useLocaleInfo,
  useVariantState,
  withCSS,
} from "unframer";
fontStore.loadFonts([
  "BI;Raveo Variable/variable/v0",
  "BI;Raveo Variable/variable/v0VF=Im9wc3oiIDE0LCAid2dodCIgNDUw",
  "BI;Raveo Variable/variable/v0VF=Im9wc3oiIDE0LCAid2dodCIgNDUw",
  "BI;Raveo Variable/variable/v0VF=Im9wc3oiIDE0LCAid2dodCIgNDUw",
]);
var variationAxes = [
  {
    defaultValue: 14,
    maxValue: 32,
    minValue: 14,
    name: "Optical size",
    tag: "opsz",
  },
  {
    defaultValue: 400,
    maxValue: 900,
    minValue: 100,
    name: "Weight",
    tag: "wght",
  },
];
var fonts = [
  {
    explicitInter: true,
    fonts: [
      {
        family: "Raveo Variable",
        source: "builtIn",
        style: "normal",
        url: "https://framerusercontent.com/assets/JEdA86oNqHX1i1CLD92Q7jTxV8.woff2",
        variationAxes,
        weight: "1000",
      },
    ],
  },
];
var css = [
  '.framer-ZUskE .framer-styles-preset-d4fts2:not(.rich-text-wrapper), .framer-ZUskE .framer-styles-preset-d4fts2.rich-text-wrapper p { --framer-font-family: "Raveo Variable Variable", sans-serif; --framer-font-family-bold: "Raveo Variable Variable", sans-serif; --framer-font-family-bold-italic: "Raveo Variable Variable", sans-serif; --framer-font-family-italic: "Raveo Variable Variable", sans-serif; --framer-font-open-type-features: normal; --framer-font-size: 16px; --framer-font-style: normal; --framer-font-style-bold: normal; --framer-font-style-bold-italic: normal; --framer-font-style-italic: normal; --framer-font-variation-axes: "opsz" 14, "wght" 450; --framer-font-variation-axes-bold: "opsz" 14, "wght" 450; --framer-font-variation-axes-bold-italic: "opsz" 14, "wght" 450; --framer-font-variation-axes-italic: "opsz" 14, "wght" 450; --framer-font-weight: 1000; --framer-font-weight-bold: 1000; --framer-font-weight-bold-italic: 1000; --framer-font-weight-italic: 1000; --framer-letter-spacing: 0em; --framer-line-height: 1.5em; --framer-paragraph-spacing: 24px; --framer-text-alignment: left; --framer-text-color: var(--token-8acf10b0-fc55-42ff-8ac5-80a79dc47979, rgba(255, 255, 255, 0.5)); --framer-text-decoration: none; --framer-text-stroke-color: initial; --framer-text-stroke-width: initial; --framer-text-transform: none; }',
];
var className = "framer-ZUskE";

// /:https://framerusercontent.com/modules/trbsDeTZsoLYHyDQQAOE/yxTf8kqmtdD9XEmVxZE6/wLxpqDnwB.js
var wLxpqDnwB_exports = {};
__export(wLxpqDnwB_exports, {
  __FramerMetadata__: () => __FramerMetadata__,
  default: () => stdin_default,
});

// /:https://framerusercontent.com/modules/aeEe477xpzEFqqaZhiTE/ltgP15qtviN0Ho7MrfaG/RollingText.js
import {
  addPropertyControls as addPropertyControls2,
  ControlType as ControlType2,
  motion,
} from "unframer";
var uuidv4 = () => {
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
    const r = (Math.random() * 16) | 0;
    const v = c === "x" ? r : (r & 3) | 8;
    return v.toString(16);
  });
};
function RollingText({
  text,
  transition,
  stagger,
  reverse,
  font,
  color,
  textTransform,
  tag,
  padding,
  variable,
  state,
}) {
  const innerClassName = `rolling-text-inner-${uuidv4()}`;
  const Tag = tag;
  const fontSizeStr = font?.fontSize ?? "16px";
  const letterSpacingStr = font?.letterSpacing ?? "0px";
  const rawLineHeight = font?.lineHeight;
  const fontFamily = font?.fontFamily ?? "Inter";
  const fontSizeNum = parseInt(fontSizeStr, 10) || 16;
  let absoluteLineHeightPx;
  if (typeof rawLineHeight === "number") {
    absoluteLineHeightPx = fontSizeNum * rawLineHeight;
  } else if (
    typeof rawLineHeight === "string" &&
    rawLineHeight.includes("em")
  ) {
    const emValue = parseFloat(rawLineHeight) || 1.2;
    absoluteLineHeightPx = fontSizeNum * emValue;
  } else if (typeof rawLineHeight === "string") {
    const pxValue = parseFloat(rawLineHeight);
    absoluteLineHeightPx = isNaN(pxValue) ? rawLineHeight : `${pxValue}px`;
  } else {
    absoluteLineHeightPx = fontSizeNum * 1.2;
  }
  const absoluteLineHeightStr =
    typeof absoluteLineHeightPx === "number"
      ? `${absoluteLineHeightPx}px`
      : absoluteLineHeightPx;
  const yOffset = `-${absoluteLineHeightStr}`;
  const variableFontStyles = variable
    ? {
        fontVariationSettings: `'wght' ${variable.weight}, 'opsz' ${variable.optical}`,
      }
    : {};
  const styles = `
    .${innerClassName} {
      --font-size: ${fontSizeStr};
      --text: ${color};
      --line-height-abs: ${absoluteLineHeightStr};
      box-sizing: border-box; margin: 0; padding: 0; vertical-align: top;
      display: flex; overflow: hidden; width: max-content;
      font-family: ${fontFamily}; font-size: ${fontSizeStr};
      text-transform: ${textTransform}; user-select: none;
      text-shadow: 0 var(--line-height-abs) 0 var(--text);
    }
    .${innerClassName} span {
      display: block; -webkit-backface-visibility: hidden; backface-visibility: hidden;
      white-space: pre; flex-shrink: 0;
      font-family: inherit; font-weight: inherit; font-style: inherit;
      font-size: inherit; letter-spacing: inherit;
      line-height: ${rawLineHeight ?? 1.2};
      color: var(--text);
    }
  `;
  const wrapperStyle = {
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    width: "100%",
    height: "100%",
    overflow: "hidden",
    padding,
    boxSizing: "border-box",
  };
  const spanVariants = {
    initial: {
      y: "0%",
    },
    roll: {
      y: yOffset,
    },
  };
  const baseDuration =
    typeof transition?.duration === "number" ? transition.duration : 0.5;
  const staggerFactor = stagger / 100;
  const animateState = state === "Roll" ? "roll" : "initial";
  return (
    <div style={wrapperStyle}>
      <Tag className={innerClassName} style={variableFontStyles}>
        {[...text].map((str, index) => {
          const charIndex = reverse ? text.length - 1 - index : index;
          const delay =
            text.length > 0
              ? (baseDuration / text.length) * charIndex * staggerFactor
              : 0;
          const motionSpanStyle = {
            display: "block",
            ...font,
            ...variableFontStyles,
          };
          return (
            <motion.span
              variants={spanVariants}
              initial={"initial"}
              animate={animateState}
              transition={{
                ...transition,
                delay,
              }}
              style={motionSpanStyle}
            >
              {str === " " ? "\xA0" : str}
            </motion.span>
          );
        })}
      </Tag>
      <style>{styles}</style>
    </div>
  );
}
RollingText.displayName = "Rolling Text";
var defaultFont = {
  fontFamily: "Inter",
  fontWeight: "400",
  fontSize: "16px",
  fontStyle: "normal",
  letterSpacing: "0px",
  lineHeight: 1.2,
};
var defaultTransition = {
  type: "spring",
  duration: 0.4,
  bounce: 0,
};
addPropertyControls2(RollingText, {
  text: {
    type: ControlType2.String,
    title: "Text",
    defaultValue: "Rolling Text",
  },
  font: {
    type: ControlType2.Font,
    title: "Font",
    controls: "extended",
    defaultValue: defaultFont,
  },
  variable: {
    type: ControlType2.Object,
    title: "Variable",
    controls: {
      optical: {
        type: ControlType2.Number,
        title: "Optical",
        min: 14,
        max: 32,
        step: 1,
        defaultValue: 16,
      },
      weight: {
        type: ControlType2.Number,
        title: "Weight",
        min: 100,
        max: 900,
        step: 1,
        defaultValue: 400,
      },
    },
    defaultValue: {
      optical: 16,
      weight: 400,
    },
  },
  color: {
    type: ControlType2.Color,
    title: "Color",
    defaultValue: "#808080",
  },
  transition: {
    type: ControlType2.Transition,
    title: "Transition",
    defaultValue: defaultTransition,
  },
  stagger: {
    title: "Stagger",
    type: ControlType2.Number,
    min: 0,
    max: 100,
    step: 1,
    defaultValue: 35,
    unit: "%",
  },
  padding: {
    title: "Padding",
    type: ControlType2.Padding,
    defaultValue: "0px",
  },
  reverse: {
    type: ControlType2.Boolean,
    title: "Reverse",
    defaultValue: false,
    enabledTitle: "Yes",
    disabledTitle: "No",
  },
  textTransform: {
    title: "Transform",
    type: ControlType2.Enum,
    defaultValue: "none",
    options: ["none", "uppercase", "lowercase", "capitalize"],
    optionTitles: ["None", "Uppercase", "Lowercase", "Capitalize"],
  },
  tag: {
    type: ControlType2.Enum,
    title: "Tag",
    options: ["p", "span", "h1", "h2", "h3", "h4", "h5", "h6"],
    optionTitles: ["p", "span", "h1", "h2", "h3", "h4", "h5", "h6"],
    defaultValue: "p",
  },
  state: {
    type: ControlType2.Enum,
    title: "State",
    options: ["Default", "Roll"],
    optionTitles: ["Default", "Roll"],
    displaySegmentedControl: true,
    segmentedControlDirection: "vertical",
    defaultValue: "Default",
  },
});

// /:https://framerusercontent.com/modules/XBWSgdKr3syOFOYW80i8/4FKsp3EPd3QDaqVONEJD/DashedBorder.js
import {
  useCallback,
  useEffect as useEffect3,
  useMemo as useMemo2,
  useRef as useRef2,
  useState as useState2,
} from "react";
import {
  addPropertyControls as addPropertyControls3,
  ControlType as ControlType3,
  RenderTarget as RenderTarget2,
} from "unframer";
function DashedBorderFrame(props) {
  const defaultProps = useMemo2(
    () => ({
      borderColor: "#0099FF",
      borderWidth: 3,
      borderRadius: 16,
      dashLength: 12,
      gapLength: 8,
      animation: {
        animated: true,
        speed: 2,
        direction: "clockwise",
      },
      top: true,
      right: true,
      bottom: true,
      left: true,
    }),
    []
  );
  const {
    borderColor = defaultProps.borderColor,
    borderWidth = defaultProps.borderWidth,
    borderRadius = defaultProps.borderRadius,
    dashLength = defaultProps.dashLength,
    gapLength = defaultProps.gapLength,
    animation: animation5 = defaultProps.animation,
    style = {},
  } = props;
  const { animated, speed, direction } = animation5;
  const uniqueIdRef = useRef2(Math.random().toString(36).substr(2, 9));
  const animName = `dash-anim-${direction}-${uniqueIdRef.current}`;
  const minDuration = 0.1;
  const animationDuration = `${Math.max(
    minDuration,
    2 / Math.max(0.01, speed)
  )}s`;
  const containerRef = useRef2(null);
  const resizeObserverRef = useRef2(null);
  const [size, setSize] = useState2({
    width: 400,
    height: 250,
  });
  const getCurrentSize = useCallback(() => {
    let w = 200,
      h = 100;
    if (!containerRef.current)
      return {
        width: w,
        height: h,
      };
    if (
      RenderTarget2.current() === RenderTarget2.canvas ||
      RenderTarget2.current() === RenderTarget2.thumbnail
    ) {
      if (props.style && typeof props.style.width === "number")
        w = props.style.width;
      else w = containerRef.current.offsetWidth;
      if (props.style && typeof props.style.height === "number")
        h = props.style.height;
      else h = containerRef.current.offsetHeight;
    } else {
      const rect = containerRef.current.getBoundingClientRect();
      w = rect.width;
      h = rect.height;
    }
    return {
      width: w,
      height: h,
    };
  }, [props.style?.width, props.style?.height]);
  useEffect3(() => {
    if (!containerRef.current) return;
    const updateSize = () => {
      const { width: w, height: h } = getCurrentSize();
      setSize((prev) =>
        prev.width !== w || prev.height !== h
          ? {
              width: w,
              height: h,
            }
          : prev
      );
    };
    updateSize();
    if (resizeObserverRef.current) {
      resizeObserverRef.current.disconnect();
    }
    resizeObserverRef.current = new window.ResizeObserver(updateSize);
    resizeObserverRef.current.observe(containerRef.current);
    return () => {
      if (resizeObserverRef.current) {
        resizeObserverRef.current.disconnect();
        resizeObserverRef.current = null;
      }
    };
  }, [getCurrentSize]);
  const width = size.width;
  const height = size.height;
  const bw = Math.max(1, Math.min(16, borderWidth));
  const normalizedRadius = useMemo2(() => {
    if (typeof borderRadius === "number") return borderRadius;
    if (typeof borderRadius === "string") {
      if (borderRadius.endsWith("px")) return parseFloat(borderRadius);
      if (borderRadius.endsWith("%")) {
        const ratio = parseFloat(borderRadius) / 100;
        return Math.max(0, (ratio * Math.min(width, height)) / 2);
      }
      return parseFloat(borderRadius);
    }
    return 0;
  }, [borderRadius, width, height]);
  const half = bw / 2;
  const sides = useMemo2(
    () => ({
      top: props.top ?? true,
      right: props.right ?? true,
      bottom: props.bottom ?? true,
      left: props.left ?? true,
    }),
    [props.top, props.right, props.bottom, props.left]
  );
  const perimeter = useMemo2(() => {
    const maxR = Math.min(width - bw, height - bw) / 2;
    const cr = Math.max(0, Math.min(normalizedRadius, maxR));
    return 2 * (width - bw + height - bw - 4 * cr) + 2 * Math.PI * cr;
  }, [width, height, bw, normalizedRadius]);
  const patternLength = dashLength + gapLength;
  const animOffset = direction === "clockwise" ? -patternLength : patternLength;
  const getBorderPath = useCallback((w, h, bw2, r, sides2) => {
    const half2 = bw2 / 2;
    const maxR = Math.min(r, (w - bw2) / 2, (h - bw2) / 2);
    if (!sides2.top && !sides2.right && !sides2.bottom && !sides2.left)
      return "";
    if (sides2.top && sides2.right && sides2.bottom && sides2.left) {
      return [
        `M${half2 + maxR},${half2}`,
        `H${w - half2 - maxR}`,
        `A${maxR},${maxR} 0 0 1 ${w - half2},${half2 + maxR}`,
        `V${h - half2 - maxR}`,
        `A${maxR},${maxR} 0 0 1 ${w - half2 - maxR},${h - half2}`,
        `H${half2 + maxR}`,
        `A${maxR},${maxR} 0 0 1 ${half2},${h - half2 - maxR}`,
        `V${half2 + maxR}`,
        `A${maxR},${maxR} 0 0 1 ${half2 + maxR},${half2}`,
        "Z",
      ].join(" ");
    }
    let d = "";
    if (sides2.top) {
      d += `M${half2 + maxR},${half2} H${w - half2 - maxR} `;
      if (sides2.right && maxR > 0) {
        d += `A${maxR},${maxR} 0 0 1 ${w - half2},${half2 + maxR} `;
      }
    }
    if (sides2.right) {
      d += `M${w - half2},${half2 + maxR} V${h - half2 - maxR} `;
      if (sides2.bottom && maxR > 0) {
        d += `A${maxR},${maxR} 0 0 1 ${w - half2 - maxR},${h - half2} `;
      }
    }
    if (sides2.bottom) {
      d += `M${w - half2 - maxR},${h - half2} H${half2 + maxR} `;
      if (sides2.left && maxR > 0) {
        d += `A${maxR},${maxR} 0 0 1 ${half2},${h - half2 - maxR} `;
      }
    }
    if (sides2.left) {
      d += `M${half2},${h - half2 - maxR} V${half2 + maxR} `;
      if (sides2.top && maxR > 0) {
        d += `A${maxR},${maxR} 0 0 1 ${half2 + maxR},${half2} `;
      }
    }
    return d.trim();
  }, []);
  const borderPath = useMemo2(
    () => getBorderPath(width, height, bw, normalizedRadius, sides),
    [width, height, bw, normalizedRadius, sides, getBorderPath]
  );
  const [animationReady, setAnimationReady] = useState2(false);
  useEffect3(() => {
    setAnimationReady(false);
    const styleId = `dashed-border-keyframes-${direction}-${uniqueIdRef.current}`;
    let styleEl = null;
    if (typeof document !== "undefined") {
      styleEl = document.getElementById(styleId);
      if (!styleEl) {
        styleEl = document.createElement("style");
        styleEl.id = styleId;
        document.head.appendChild(styleEl);
      }
      styleEl.innerHTML = `
                @keyframes ${animName} {
                    100% {
                        stroke-dashoffset: ${animOffset};
                    }
                }
            `;
      setTimeout(() => setAnimationReady(true), 0);
    }
    return () => {
      if (styleEl && styleEl.parentNode) {
        styleEl.parentNode.removeChild(styleEl);
      }
    };
  }, [direction, animName, animOffset]);
  const [visible, setVisible] = useState2(false);
  useEffect3(() => {
    const loaded =
      props.borderColor !== defaultProps.borderColor ||
      props.borderWidth !== defaultProps.borderWidth ||
      props.borderRadius !== defaultProps.borderRadius ||
      props.dashLength !== defaultProps.dashLength ||
      props.gapLength !== defaultProps.gapLength ||
      (props.animation &&
        (props.animation.animated !== defaultProps.animation.animated ||
          props.animation.speed !== defaultProps.animation.speed ||
          props.animation.direction !== defaultProps.animation.direction)) ||
      props.top !== defaultProps.top ||
      props.right !== defaultProps.right ||
      props.bottom !== defaultProps.bottom ||
      props.left !== defaultProps.left;
    if (loaded && !visible) {
      setTimeout(() => setVisible(true), 10);
    }
  }, [
    props.borderColor,
    props.borderWidth,
    props.borderRadius,
    props.dashLength,
    props.gapLength,
    props.animation,
    props.top,
    props.right,
    props.bottom,
    props.left,
    visible,
    defaultProps,
  ]);
  return (
    <div
      ref={containerRef}
      style={{
        ...style,
        minWidth: 20,
        minHeight: 20,
        width: "100%",
        height: "100%",
        position: "relative",
        background: "transparent",
        borderRadius,
        overflow: "visible",
        pointerEvents: "none",
        opacity: visible ? 1 : 0,
        transition: visible ? "opacity 0.4s cubic-bezier(.4,0,.2,1)" : void 0,
      }}
    >
      <svg
        width={width}
        height={height}
        viewBox={`0 0 ${width} ${height}`}
        style={{
          position: "absolute",
          top: 0,
          left: 0,
          width: "100%",
          height: "100%",
          pointerEvents: "none",
        }}
        aria-hidden={"true"}
        preserveAspectRatio={"none"}
      >
        <path
          d={borderPath}
          fill={"none"}
          stroke={borderColor}
          strokeWidth={bw}
          strokeDasharray={`${dashLength},${gapLength}`}
          strokeDashoffset={0}
          style={{
            animation:
              !animated ||
              RenderTarget2.current() === RenderTarget2.canvas ||
              RenderTarget2.current() === RenderTarget2.thumbnail ||
              !animationReady
                ? "none"
                : `${animName} ${animationDuration} linear infinite`,
          }}
        />
      </svg>
    </div>
  );
}
DashedBorderFrame.displayName = "Animated Dashed Border";
addPropertyControls3(DashedBorderFrame, {
  borderColor: {
    type: ControlType3.Color,
    title: "Dash Color",
    defaultValue: "#0099FF",
  },
  borderWidth: {
    type: ControlType3.Number,
    title: "Thickness",
    defaultValue: 3,
    min: 1,
    max: 16,
    step: 1,
    displayStepper: true,
  },
  borderRadius: {
    type: ControlType3.Number,
    title: "Radius",
    defaultValue: 16,
    min: 0,
    max: 200,
    step: 1,
    displayStepper: false,
  },
  dashLength: {
    type: ControlType3.Number,
    title: "Dash",
    defaultValue: 12,
    min: 2,
    max: 40,
    step: 1,
  },
  gapLength: {
    type: ControlType3.Number,
    title: "Gap",
    defaultValue: 8,
    min: 0,
    max: 40,
    step: 1,
  },
  top: {
    type: ControlType3.Boolean,
    title: "Top",
    defaultValue: true,
    enabledTitle: "Yes",
    disabledTitle: "No",
  },
  right: {
    type: ControlType3.Boolean,
    title: "Right",
    defaultValue: true,
    enabledTitle: "Yes",
    disabledTitle: "No",
  },
  bottom: {
    type: ControlType3.Boolean,
    title: "Bottom",
    defaultValue: true,
    enabledTitle: "Yes",
    disabledTitle: "No",
  },
  left: {
    type: ControlType3.Boolean,
    title: "Left",
    defaultValue: true,
    enabledTitle: "Yes",
    disabledTitle: "No",
  },
  animation: {
    type: ControlType3.Object,
    title: "Animation",
    controls: {
      animated: {
        type: ControlType3.Boolean,
        title: "Animated",
        defaultValue: true,
        enabledTitle: "On",
        disabledTitle: "Off",
      },
      speed: {
        type: ControlType3.Number,
        title: "Speed",
        defaultValue: 2,
        min: 0.1,
        max: 10,
        step: 0.1,
        hidden: (obj) => !obj.animated,
      },
      direction: {
        type: ControlType3.Enum,
        title: "Direction",
        options: ["clockwise", "counterclockwise"],
        optionTitles: ["Clockwise", "Counterclockwise"],
        defaultValue: "clockwise",
        displaySegmentedControl: true,
        segmentedControlDirection: "vertical",
        hidden: (obj) => !obj.animated,
      },
    },
    defaultValue: {
      animated: true,
      speed: 2,
      direction: "clockwise",
    },
  },
});

// /:https://framerusercontent.com/modules/trbsDeTZsoLYHyDQQAOE/yxTf8kqmtdD9XEmVxZE6/wLxpqDnwB.js
var RollingTextFonts = getFonts(RollingText);
var AnimatedDashedBorderFonts = getFonts(DashedBorderFrame);
var RollingTextControls = getPropertyControls(RollingText);
var enabledGestures = {
  fSd_0l8pb: {
    hover: true,
  },
  IAsy97Er5: {
    hover: true,
  },
  ks076Zojt: {
    hover: true,
  },
  pdooW3wnZ: {
    hover: true,
  },
  rwbKBWJRY: {
    hover: true,
  },
  svyJsdYyH: {
    hover: true,
  },
  UItccn4nC: {
    hover: true,
  },
};
var cycleOrder = [
  "svyJsdYyH",
  "UItccn4nC",
  "rwbKBWJRY",
  "IAsy97Er5",
  "pdooW3wnZ",
  "fSd_0l8pb",
  "ks076Zojt",
];
var serializationHash = "framer-loemB";
var variantClassNames = {
  fSd_0l8pb: "framer-v-ky9yjg",
  IAsy97Er5: "framer-v-1335nv",
  ks076Zojt: "framer-v-l6hzas",
  pdooW3wnZ: "framer-v-x4mgvm",
  rwbKBWJRY: "framer-v-s46390",
  svyJsdYyH: "framer-v-10r6x3m",
  UItccn4nC: "framer-v-owiuns",
};
function addPropertyOverrides(overrides, ...variants) {
  const nextOverrides = {};
  variants?.forEach(
    (variant) => variant && Object.assign(nextOverrides, overrides[variant])
  );
  return nextOverrides;
}
var transition1 = {
  bounce: 0.2,
  delay: 0,
  duration: 0.4,
  type: "spring",
};
var negate = (value) => {
  return !value;
};
var Transition = ({ value, children }) => {
  const config = React.useContext(MotionConfigContext);
  const transition = value ?? config.transition;
  const contextValue = React.useMemo(
    () => ({
      ...config,
      transition,
    }),
    [JSON.stringify(transition)]
  );
  return (
    <MotionConfigContext.Provider value={contextValue}>
      {children}
    </MotionConfigContext.Provider>
  );
};
var Variants = motion2.create(React.Fragment);
var humanReadableEnumMap = {
  Default: "Default",
  Roll: "Roll",
};
var humanReadableVariantMap = {
  "Nav Button Primary": "IAsy97Er5",
  "Nav Button Secondary": "rwbKBWJRY",
  "Primary Small": "fSd_0l8pb",
  "Secondary Small": "ks076Zojt",
  Oversized: "pdooW3wnZ",
  Primary: "UItccn4nC",
  Secondary: "svyJsdYyH",
};
var getProps = ({
  click,
  fill,
  height,
  id,
  label,
  link,
  state,
  width,
  ...props
}) => {
  return {
    ...props,
    D9dBYabSn: fill ?? props.D9dBYabSn,
    OLHf8SPKb: link ?? props.OLHf8SPKb,
    PcYKtiAUC: click ?? props.PcYKtiAUC,
    qCxNvGxTB:
      humanReadableEnumMap[state] ?? state ?? props.qCxNvGxTB ?? "Default",
    SMZpJms0Q: label ?? props.SMZpJms0Q ?? "Get started",
    variant:
      humanReadableVariantMap[props.variant] ?? props.variant ?? "svyJsdYyH",
  };
};
var createLayoutDependency = (props, variants) => {
  if (props.layoutDependency)
    return variants.join("-") + props.layoutDependency;
  return variants.join("-");
};
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
  const fallbackRef = useRef3(null);
  const refBinding = ref ?? fallbackRef;
  const defaultLayoutId = React.useId();
  const { activeLocale, setLocale } = useLocaleInfo();
  const componentViewport = useComponentViewport();
  const {
    style,
    className: className2,
    layoutId,
    variant,
    SMZpJms0Q,
    OLHf8SPKb,
    D9dBYabSn,
    qCxNvGxTB,
    PcYKtiAUC,
    ...restProps
  } = getProps(props);
  const {
    baseVariant,
    classNames,
    clearLoadingGesture,
    gestureHandlers,
    gestureVariant,
    isLoading,
    setGestureState,
    setVariant,
    variants,
  } = useVariantState({
    cycleOrder,
    defaultVariant: "svyJsdYyH",
    enabledGestures,
    ref: refBinding,
    variant,
    variantClassNames,
  });
  const layoutDependency = createLayoutDependency(props, variants);
  const { activeVariantCallback, delay } =
    useActiveVariantCallback(baseVariant);
  const onTap184xdhl = activeVariantCallback(async (...args) => {
    setGestureState({
      isPressed: false,
    });
    if (PcYKtiAUC) {
      const res = await PcYKtiAUC(...args);
      if (res === false) return false;
    }
  });
  const sharedStyleClassNames = [];
  const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames);
  const visible = negate(D9dBYabSn);
  const isDisplayed = () => {
    if (
      [
        "UItccn4nC-hover",
        "IAsy97Er5-hover",
        "fSd_0l8pb-hover",
        "pdooW3wnZ-hover",
      ].includes(gestureVariant)
    )
      return false;
    if (
      ["UItccn4nC", "IAsy97Er5", "pdooW3wnZ", "fSd_0l8pb"].includes(baseVariant)
    )
      return false;
    return true;
  };
  return (
    <LayoutGroup id={layoutId ?? defaultLayoutId}>
      <Variants animate={variants} initial={false}>
        <Transition value={transition1}>
          <Link
            href={OLHf8SPKb}
            motionChild={true}
            nodeId={"svyJsdYyH"}
            scopeId={"wLxpqDnwB"}
            smoothScroll={true}
          >
            <motion2.a
              {...restProps}
              {...gestureHandlers}
              className={`${cx(
                scopingClassNames,
                "framer-10r6x3m",
                className2,
                classNames
              )} framer-6oxrvz`}
              data-framer-name={"Secondary"}
              data-highlight={true}
              draggable={"false"}
              layoutDependency={layoutDependency}
              layoutId={"svyJsdYyH"}
              onTap={onTap184xdhl}
              ref={refBinding}
              style={{
                backgroundColor:
                  "var(--token-fa07d228-afbe-4fad-9a44-2fb0dadd2a5e, rgb(23, 23, 23))",
                borderBottomLeftRadius: 20,
                borderBottomRightRadius: 20,
                borderTopLeftRadius: 20,
                borderTopRightRadius: 20,
                filter: "none",
                WebkitFilter: "none",
                ...style,
              }}
              variants={{
                "fSd_0l8pb-hover": {
                  filter: "brightness(0.8)",
                  WebkitFilter: "brightness(0.8)",
                },
                "IAsy97Er5-hover": {
                  filter: "brightness(0.8)",
                  WebkitFilter: "brightness(0.8)",
                },
                "ks076Zojt-hover": {
                  backgroundColor:
                    "var(--token-bb3f9735-47c4-4ac2-b002-c5446021aee6, rgb(0, 0, 0))",
                  filter: "none",
                  WebkitFilter: "none",
                },
                "pdooW3wnZ-hover": {
                  filter: "brightness(0.8)",
                  WebkitFilter: "brightness(0.8)",
                },
                "rwbKBWJRY-hover": {
                  backgroundColor:
                    "var(--token-bb3f9735-47c4-4ac2-b002-c5446021aee6, rgb(0, 0, 0))",
                  filter: "none",
                  WebkitFilter: "none",
                },
                "svyJsdYyH-hover": {
                  backgroundColor:
                    "var(--token-bb3f9735-47c4-4ac2-b002-c5446021aee6, rgb(0, 0, 0))",
                },
                "UItccn4nC-hover": {
                  filter: "brightness(0.8)",
                  WebkitFilter: "brightness(0.8)",
                },
                fSd_0l8pb: {
                  backgroundColor: "rgb(255, 255, 255)",
                },
                IAsy97Er5: {
                  backgroundColor:
                    "var(--token-4fef9130-aa55-4351-8ed5-cfba481137a7, rgb(255, 255, 255))",
                  borderBottomLeftRadius: 6,
                  borderBottomRightRadius: 6,
                  borderTopLeftRadius: 6,
                  borderTopRightRadius: 6,
                },
                pdooW3wnZ: {
                  backgroundColor: "rgb(255, 255, 255)",
                  borderBottomLeftRadius: 0,
                  borderBottomRightRadius: 0,
                  borderTopLeftRadius: 0,
                  borderTopRightRadius: 0,
                },
                rwbKBWJRY: {
                  borderBottomLeftRadius: 6,
                  borderBottomRightRadius: 6,
                  borderTopLeftRadius: 6,
                  borderTopRightRadius: 6,
                },
                UItccn4nC: {
                  backgroundColor: "rgb(255, 255, 255)",
                },
              }}
              {...addPropertyOverrides(
                {
                  "fSd_0l8pb-hover": {
                    "data-framer-name": void 0,
                  },
                  "IAsy97Er5-hover": {
                    "data-framer-name": void 0,
                  },
                  "ks076Zojt-hover": {
                    "data-framer-name": void 0,
                  },
                  "pdooW3wnZ-hover": {
                    "data-framer-name": void 0,
                  },
                  "rwbKBWJRY-hover": {
                    "data-framer-name": void 0,
                  },
                  "svyJsdYyH-hover": {
                    "data-framer-name": void 0,
                  },
                  "UItccn4nC-hover": {
                    "data-framer-name": void 0,
                  },
                  fSd_0l8pb: {
                    "data-framer-name": "Primary Small",
                  },
                  IAsy97Er5: {
                    "data-framer-name": "Nav Button Primary",
                  },
                  ks076Zojt: {
                    "data-framer-name": "Secondary Small",
                  },
                  pdooW3wnZ: {
                    "data-framer-name": "Oversized",
                  },
                  rwbKBWJRY: {
                    "data-framer-name": "Nav Button Secondary",
                  },
                  UItccn4nC: {
                    "data-framer-name": "Primary",
                  },
                },
                baseVariant,
                gestureVariant
              )}
            >
              {visible && (
                <ComponentViewportProvider>
                  <SmartComponentScopedContainer
                    className={"framer-zpabgk-container"}
                    data-framer-name={"Fit"}
                    isAuthoredByUser={true}
                    isModuleExternal={true}
                    layoutDependency={layoutDependency}
                    layoutId={"KJk_ORIjP-container"}
                    name={"Fit"}
                    nodeId={"KJk_ORIjP"}
                    rendersWithMotion={true}
                    scopeId={"wLxpqDnwB"}
                  >
                    <RollingText
                      color={
                        "var(--token-4fef9130-aa55-4351-8ed5-cfba481137a7, rgb(255, 255, 255))"
                      }
                      font={{
                        fontFamily: '"Raveo Variable Variable", sans-serif',
                        fontSize: "16px",
                        fontStyle: "normal",
                        fontWeight: 1e3,
                        letterSpacing: "0px",
                        lineHeight: "1.7em",
                      }}
                      height={"100%"}
                      id={"KJk_ORIjP"}
                      layoutId={"KJk_ORIjP"}
                      name={"Fit"}
                      padding={"0px 18px 0px 18px"}
                      reverse={false}
                      stagger={25}
                      state={qCxNvGxTB}
                      style={{
                        height: "100%",
                      }}
                      tag={"p"}
                      text={SMZpJms0Q}
                      textTransform={"none"}
                      transition={{
                        bounce: 0,
                        delay: 0,
                        duration: 0.4,
                        type: "spring",
                      }}
                      variable={{
                        optical: 14,
                        weight: 550,
                      }}
                      width={"100%"}
                      {...addPropertyOverrides(
                        {
                          "fSd_0l8pb-hover": {
                            state: "Roll",
                          },
                          "IAsy97Er5-hover": {
                            state: "Roll",
                          },
                          "ks076Zojt-hover": {
                            state: "Roll",
                          },
                          "pdooW3wnZ-hover": {
                            state: "Roll",
                          },
                          "rwbKBWJRY-hover": {
                            state: "Roll",
                          },
                          "svyJsdYyH-hover": {
                            state: "Roll",
                          },
                          "UItccn4nC-hover": {
                            state: "Roll",
                          },
                          fSd_0l8pb: {
                            color:
                              "var(--token-bb3f9735-47c4-4ac2-b002-c5446021aee6, rgb(0, 0, 0))",
                            font: {
                              fontFamily:
                                '"Raveo Variable Variable", sans-serif',
                              fontSize: "12px",
                              fontStyle: "normal",
                              fontWeight: 1e3,
                              letterSpacing: "0px",
                              lineHeight: "1.7em",
                            },
                            padding: "0px 12px 0px 12px",
                          },
                          IAsy97Er5: {
                            color:
                              "var(--token-bb3f9735-47c4-4ac2-b002-c5446021aee6, rgb(0, 0, 0))",
                            font: {
                              fontFamily:
                                '"Raveo Variable Variable", sans-serif',
                              fontSize: "12px",
                              fontStyle: "normal",
                              fontWeight: 1e3,
                              letterSpacing: "0px",
                              lineHeight: "1.2em",
                            },
                            padding: "0px 12px 0px 12px",
                          },
                          ks076Zojt: {
                            font: {
                              fontFamily:
                                '"Raveo Variable Variable", sans-serif',
                              fontSize: "12px",
                              fontStyle: "normal",
                              fontWeight: 1e3,
                              letterSpacing: "0px",
                              lineHeight: "1.7em",
                            },
                            padding: "0px 12px 0px 12px",
                          },
                          pdooW3wnZ: {
                            color:
                              "var(--token-bb3f9735-47c4-4ac2-b002-c5446021aee6, rgb(0, 0, 0))",
                            font: {
                              fontFamily:
                                '"Raveo Variable Variable", sans-serif',
                              fontSize: "28px",
                              fontStyle: "normal",
                              fontWeight: 1e3,
                              letterSpacing: "-0.02em",
                              lineHeight: "1.7em",
                            },
                            padding: "0px 28px 0px 28px",
                          },
                          rwbKBWJRY: {
                            font: {
                              fontFamily:
                                '"Raveo Variable Variable", sans-serif',
                              fontSize: "12px",
                              fontStyle: "normal",
                              fontWeight: 1e3,
                              letterSpacing: "0px",
                              lineHeight: "1.8em",
                            },
                            padding: "0px 12px 0px 12px",
                          },
                          UItccn4nC: {
                            color:
                              "var(--token-bb3f9735-47c4-4ac2-b002-c5446021aee6, rgb(0, 0, 0))",
                          },
                        },
                        baseVariant,
                        gestureVariant
                      )}
                    />
                  </SmartComponentScopedContainer>
                </ComponentViewportProvider>
              )}
              {D9dBYabSn && (
                <ComponentViewportProvider>
                  <SmartComponentScopedContainer
                    className={"framer-m5wg9d-container"}
                    data-framer-name={"Fill"}
                    isAuthoredByUser={true}
                    isModuleExternal={true}
                    layoutDependency={layoutDependency}
                    layoutId={"wDswxR602-container"}
                    name={"Fill"}
                    nodeId={"wDswxR602"}
                    rendersWithMotion={true}
                    scopeId={"wLxpqDnwB"}
                  >
                    <RollingText
                      color={
                        "var(--token-4fef9130-aa55-4351-8ed5-cfba481137a7, rgb(255, 255, 255))"
                      }
                      font={{
                        fontFamily: '"Raveo Variable Variable", sans-serif',
                        fontSize: "14px",
                        fontStyle: "normal",
                        fontWeight: 1e3,
                        letterSpacing: "0px",
                        lineHeight: "1.7em",
                      }}
                      height={"100%"}
                      id={"wDswxR602"}
                      layoutId={"wDswxR602"}
                      name={"Fill"}
                      padding={"0px 18px 0px 18px"}
                      reverse={false}
                      stagger={25}
                      state={qCxNvGxTB}
                      style={{
                        height: "100%",
                        width: "100%",
                      }}
                      tag={"p"}
                      text={SMZpJms0Q}
                      textTransform={"none"}
                      transition={{
                        bounce: 0,
                        delay: 0,
                        duration: 0.4,
                        type: "spring",
                      }}
                      variable={{
                        optical: 14,
                        weight: 550,
                      }}
                      width={"100%"}
                      {...addPropertyOverrides(
                        {
                          "fSd_0l8pb-hover": {
                            state: "Roll",
                          },
                          "IAsy97Er5-hover": {
                            state: "Roll",
                          },
                          "ks076Zojt-hover": {
                            state: "Roll",
                          },
                          "pdooW3wnZ-hover": {
                            state: "Roll",
                          },
                          "rwbKBWJRY-hover": {
                            state: "Roll",
                          },
                          "svyJsdYyH-hover": {
                            state: "Roll",
                          },
                          "UItccn4nC-hover": {
                            state: "Roll",
                          },
                          fSd_0l8pb: {
                            color:
                              "var(--token-bb3f9735-47c4-4ac2-b002-c5446021aee6, rgb(0, 0, 0))",
                            font: {
                              fontFamily:
                                '"Raveo Variable Variable", sans-serif',
                              fontSize: "12px",
                              fontStyle: "normal",
                              fontWeight: 1e3,
                              letterSpacing: "0px",
                              lineHeight: "1.7em",
                            },
                            padding: "0px 12px 0px 12px",
                          },
                          IAsy97Er5: {
                            color:
                              "var(--token-bb3f9735-47c4-4ac2-b002-c5446021aee6, rgb(0, 0, 0))",
                            font: {
                              fontFamily:
                                '"Raveo Variable Variable", sans-serif',
                              fontSize: "12px",
                              fontStyle: "normal",
                              fontWeight: 1e3,
                              letterSpacing: "0px",
                              lineHeight: "1.2em",
                            },
                            padding: "0px 12px 0px 12px",
                          },
                          ks076Zojt: {
                            font: {
                              fontFamily:
                                '"Raveo Variable Variable", sans-serif',
                              fontSize: "12px",
                              fontStyle: "normal",
                              fontWeight: 1e3,
                              letterSpacing: "0px",
                              lineHeight: "1.7em",
                            },
                            padding: "0px 12px 0px 12px",
                          },
                          pdooW3wnZ: {
                            color:
                              "var(--token-bb3f9735-47c4-4ac2-b002-c5446021aee6, rgb(0, 0, 0))",
                            font: {
                              fontFamily:
                                '"Raveo Variable Variable", sans-serif',
                              fontSize: "28px",
                              fontStyle: "normal",
                              fontWeight: 1e3,
                              letterSpacing: "-0.02em",
                              lineHeight: "1.7em",
                            },
                            padding: "0px 28px 0px 28px",
                          },
                          rwbKBWJRY: {
                            font: {
                              fontFamily:
                                '"Raveo Variable Variable", sans-serif',
                              fontSize: "12px",
                              fontStyle: "normal",
                              fontWeight: 1e3,
                              letterSpacing: "0px",
                              lineHeight: "1.8em",
                            },
                            padding: "0px 12px 0px 12px",
                          },
                          UItccn4nC: {
                            color:
                              "var(--token-bb3f9735-47c4-4ac2-b002-c5446021aee6, rgb(0, 0, 0))",
                          },
                        },
                        baseVariant,
                        gestureVariant
                      )}
                    />
                  </SmartComponentScopedContainer>
                </ComponentViewportProvider>
              )}
              {isDisplayed() && (
                <ComponentViewportProvider>
                  <SmartComponentScopedContainer
                    className={"framer-1s7vqp7-container"}
                    isAuthoredByUser={true}
                    isModuleExternal={true}
                    layoutDependency={layoutDependency}
                    layoutId={"mPPkWa11v-container"}
                    nodeId={"mPPkWa11v"}
                    rendersWithMotion={true}
                    scopeId={"wLxpqDnwB"}
                    style={{
                      opacity: 0,
                    }}
                    variants={{
                      "ks076Zojt-hover": {
                        opacity: 1,
                      },
                      "rwbKBWJRY-hover": {
                        opacity: 1,
                      },
                      "svyJsdYyH-hover": {
                        opacity: 1,
                      },
                    }}
                  >
                    <DashedBorderFrame
                      animation={{
                        animated: false,
                        direction: "clockwise",
                        speed: 2,
                      }}
                      borderColor={
                        "var(--token-04a04e54-cbd8-4312-8418-e1527ef396e1, rgb(51, 51, 51))"
                      }
                      borderRadius={20}
                      borderWidth={1}
                      bottom={true}
                      dashLength={8}
                      gapLength={6}
                      height={"100%"}
                      id={"mPPkWa11v"}
                      layoutId={"mPPkWa11v"}
                      left={true}
                      right={true}
                      style={{
                        height: "100%",
                        width: "100%",
                      }}
                      top={true}
                      width={"100%"}
                      {...addPropertyOverrides(
                        {
                          "ks076Zojt-hover": {
                            animation: {
                              animated: true,
                              direction: "clockwise",
                              speed: 2,
                            },
                          },
                          "rwbKBWJRY-hover": {
                            animation: {
                              animated: true,
                              direction: "clockwise",
                              speed: 2,
                            },
                          },
                          "svyJsdYyH-hover": {
                            animation: {
                              animated: true,
                              direction: "clockwise",
                              speed: 2,
                            },
                          },
                          ks076Zojt: {
                            borderRadius: 15,
                          },
                          rwbKBWJRY: {
                            borderRadius: 6,
                            dashLength: 6,
                            gapLength: 4,
                          },
                        },
                        baseVariant,
                        gestureVariant
                      )}
                    />
                  </SmartComponentScopedContainer>
                </ComponentViewportProvider>
              )}
            </motion2.a>
          </Link>
        </Transition>
      </Variants>
    </LayoutGroup>
  );
});
var css2 = [
  "@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
  ".framer-loemB.framer-6oxrvz, .framer-loemB .framer-6oxrvz { display: block; }",
  ".framer-loemB.framer-10r6x3m { align-content: center; align-items: center; cursor: pointer; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 6px; height: 40px; justify-content: center; overflow: hidden; padding: 0px; position: relative; text-decoration: none; width: min-content; will-change: var(--framer-will-change-override, transform); }",
  ".framer-loemB .framer-zpabgk-container { -webkit-user-select: none; flex: none; height: 100%; position: relative; user-select: none; width: auto; }",
  ".framer-loemB .framer-m5wg9d-container { -webkit-user-select: none; flex: 1 0 0px; height: 100%; position: relative; user-select: none; width: 1px; }",
  ".framer-loemB .framer-1s7vqp7-container { bottom: 2px; flex: none; left: 2px; pointer-events: none; position: absolute; right: 2px; top: 2px; z-index: 1; }",
  ".framer-loemB.framer-v-s46390.framer-10r6x3m, .framer-loemB.framer-v-1335nv.framer-10r6x3m, .framer-loemB.framer-v-ky9yjg.framer-10r6x3m, .framer-loemB.framer-v-l6hzas.framer-10r6x3m { height: 30px; }",
  ".framer-loemB.framer-v-x4mgvm.framer-10r6x3m { height: 74px; will-change: unset; }",
  ".framer-loemB.framer-v-10r6x3m.hover .framer-1s7vqp7-container, .framer-loemB.framer-v-s46390.hover .framer-1s7vqp7-container, .framer-loemB.framer-v-l6hzas.hover .framer-1s7vqp7-container { bottom: 0px; left: 0px; right: 0px; top: 0px; }",
  ".framer-loemB.framer-v-x4mgvm.hover.framer-10r6x3m { will-change: unset; }",
];
var FramerwLxpqDnwB = withCSS(Component, css2, "framer-loemB");
var stdin_default = FramerwLxpqDnwB;
FramerwLxpqDnwB.displayName = "Button";
FramerwLxpqDnwB.defaultProps = {
  height: 40,
  width: 121.5,
};
addPropertyControls4(FramerwLxpqDnwB, {
  variant: {
    options: [
      "svyJsdYyH",
      "UItccn4nC",
      "rwbKBWJRY",
      "IAsy97Er5",
      "pdooW3wnZ",
      "fSd_0l8pb",
      "ks076Zojt",
    ],
    optionTitles: [
      "Secondary",
      "Primary",
      "Nav Button Secondary",
      "Nav Button Primary",
      "Oversized",
      "Primary Small",
      "Secondary Small",
    ],
    title: "Variant",
    type: ControlType4.Enum,
  },
  SMZpJms0Q: {
    defaultValue: "Get started",
    displayTextArea: false,
    title: "Label",
    type: ControlType4.String,
  },
  OLHf8SPKb: {
    title: "Link",
    type: ControlType4.Link,
  },
  D9dBYabSn: {
    defaultValue: false,
    description: 'Set to "Yes" when using the button with fill width.',
    title: "Fill",
    type: ControlType4.Boolean,
  },
  qCxNvGxTB: RollingTextControls?.["state"] && {
    ...RollingTextControls["state"],
    defaultValue: "Default",
    description:
      "Used for triggering rolling of text when used within another component.",
    hidden: void 0,
    title: "State",
  },
  PcYKtiAUC: {
    title: "Click",
    type: ControlType4.EventHandler,
  },
});
var variationAxes2 = [
  {
    defaultValue: 14,
    maxValue: 32,
    minValue: 14,
    name: "Optical size",
    tag: "opsz",
  },
  {
    defaultValue: 400,
    maxValue: 900,
    minValue: 100,
    name: "Weight",
    tag: "wght",
  },
];
addFonts(
  FramerwLxpqDnwB,
  [
    {
      explicitInter: true,
      fonts: [
        {
          family: "Raveo Variable",
          source: "builtIn",
          style: "normal",
          url: "https://framerusercontent.com/assets/JEdA86oNqHX1i1CLD92Q7jTxV8.woff2",
          variationAxes: variationAxes2,
          weight: "1000",
        },
      ],
    },
    ...RollingTextFonts,
    ...AnimatedDashedBorderFonts,
  ],
  {
    supportsExplicitInterCodegen: true,
  }
);
var __FramerMetadata__ = {
  exports: {
    default: {
      type: "reactComponent",
      name: "FramerwLxpqDnwB",
      slots: [],
      annotations: {
        framerContractVersion: "1",
        framerImmutableVariables: "true",
        framerColorSyntax: "true",
        framerDisplayContentsDiv: "false",
        framerIntrinsicHeight: "40",
        framerAutoSizeImages: "true",
        framerVariables:
          '{"SMZpJms0Q":"label","OLHf8SPKb":"link","D9dBYabSn":"fill","qCxNvGxTB":"state","PcYKtiAUC":"click"}',
        framerCanvasComponentVariantDetails:
          '{"propertyName":"variant","data":{"default":{"layout":["auto","fixed"]},"UItccn4nC":{"layout":["auto","fixed"]},"rwbKBWJRY":{"layout":["auto","fixed"]},"IAsy97Er5":{"layout":["auto","fixed"]},"pdooW3wnZ":{"layout":["auto","fixed"]},"fSd_0l8pb":{"layout":["auto","fixed"]},"ks076Zojt":{"layout":["auto","fixed"]},"rJxH1vhJ3":{"layout":["auto","fixed"]},"tHMInHAfm":{"layout":["auto","fixed"]},"b6FUING9L":{"layout":["auto","fixed"]},"fWeg11m5N":{"layout":["auto","fixed"]},"vwBGvVazd":{"layout":["auto","fixed"]},"BwyYAcalZ":{"layout":["auto","fixed"]},"eaNrxYXV_":{"layout":["auto","fixed"]}}}',
        framerIntrinsicWidth: "121.5",
        framerComponentViewportWidth: "true",
      },
    },
    Props: {
      type: "tsType",
      annotations: {
        framerContractVersion: "1",
      },
    },
    __FramerMetadata__: {
      type: "variable",
    },
  },
};

// /:https://framerusercontent.com/modules/Aiz0uzID7pYMsjYssJia/t8eq6ISHv76GcQTRprkL/ywmXeNfxF.js
import * as React2 from "react";
import { useRef as useRef4 } from "react";
import {
  addFonts as addFonts2,
  addPropertyControls as addPropertyControls5,
  ComponentViewportProvider as ComponentViewportProvider2,
  ControlType as ControlType5,
  cx as cx2,
  getFonts as getFonts2,
  LayoutGroup as LayoutGroup2,
  motion as motion3,
  MotionConfigContext as MotionConfigContext2,
  SmartComponentScopedContainer as SmartComponentScopedContainer2,
  useComponentViewport as useComponentViewport2,
  useLocaleInfo as useLocaleInfo2,
  useVariantState as useVariantState2,
  withCSS as withCSS2,
} from "unframer";
var AnimatedDashedBorderFonts2 = getFonts2(DashedBorderFrame);
var cycleOrder2 = [
  "dNbszlCS9",
  "yzIFdYlxZ",
  "tETbP_pro",
  "oSdwqWnmP",
  "NmV6whLcj",
  "PsAciZ2BM",
  "CLljGfTtP",
  "dmlAwRaBe",
  "HWEDASjkO",
  "yQxqYG67k",
];
var serializationHash2 = "framer-aTu1i";
var variantClassNames2 = {
  CLljGfTtP: "framer-v-1mlrwuf",
  dmlAwRaBe: "framer-v-yl5zu4",
  dNbszlCS9: "framer-v-z8k7b0",
  HWEDASjkO: "framer-v-8evypz",
  NmV6whLcj: "framer-v-1nqlqan",
  oSdwqWnmP: "framer-v-1qeerv",
  PsAciZ2BM: "framer-v-guq2e5",
  tETbP_pro: "framer-v-p1jozm",
  yQxqYG67k: "framer-v-1ffme69",
  yzIFdYlxZ: "framer-v-1arqcmi",
};
function addPropertyOverrides2(overrides, ...variants) {
  const nextOverrides = {};
  variants?.forEach(
    (variant) => variant && Object.assign(nextOverrides, overrides[variant])
  );
  return nextOverrides;
}
var transition12 = {
  bounce: 0,
  delay: 0,
  duration: 0.4,
  type: "spring",
};
var Transition2 = ({ value, children }) => {
  const config = React2.useContext(MotionConfigContext2);
  const transition = value ?? config.transition;
  const contextValue = React2.useMemo(
    () => ({
      ...config,
      transition,
    }),
    [JSON.stringify(transition)]
  );
  return (
    <MotionConfigContext2.Provider value={contextValue}>
      {children}
    </MotionConfigContext2.Provider>
  );
};
var Variants2 = motion3.create(React2.Fragment);
var humanReadableVariantMap2 = {
  "Left Right": "yQxqYG67k",
  "Right Bottom": "yzIFdYlxZ",
  "Top Bottom": "HWEDASjkO",
  "Top Left": "dNbszlCS9",
  All: "CLljGfTtP",
  Bottom: "oSdwqWnmP",
  Left: "tETbP_pro",
  Right: "NmV6whLcj",
  Top: "PsAciZ2BM",
};
var getProps2 = ({ height, id, width, ...props }) => {
  return {
    ...props,
    variant:
      humanReadableVariantMap2[props.variant] ?? props.variant ?? "dNbszlCS9",
  };
};
var createLayoutDependency2 = (props, variants) => {
  if (props.layoutDependency)
    return variants.join("-") + props.layoutDependency;
  return variants.join("-");
};
var Component2 = /* @__PURE__ */ React2.forwardRef(function (props, ref) {
  const fallbackRef = useRef4(null);
  const refBinding = ref ?? fallbackRef;
  const defaultLayoutId = React2.useId();
  const { activeLocale, setLocale } = useLocaleInfo2();
  const componentViewport = useComponentViewport2();
  const {
    style,
    className: className2,
    layoutId,
    variant,
    ...restProps
  } = getProps2(props);
  const {
    baseVariant,
    classNames,
    clearLoadingGesture,
    gestureHandlers,
    gestureVariant,
    isLoading,
    setGestureState,
    setVariant,
    variants,
  } = useVariantState2({
    cycleOrder: cycleOrder2,
    defaultVariant: "dNbszlCS9",
    ref: refBinding,
    variant,
    variantClassNames: variantClassNames2,
  });
  const layoutDependency = createLayoutDependency2(props, variants);
  const sharedStyleClassNames = [];
  const scopingClassNames = cx2(serializationHash2, ...sharedStyleClassNames);
  return (
    <LayoutGroup2 id={layoutId ?? defaultLayoutId}>
      <Variants2 animate={variants} initial={false}>
        <Transition2 value={transition12}>
          <motion3.div
            {...restProps}
            {...gestureHandlers}
            className={cx2(
              scopingClassNames,
              "framer-z8k7b0",
              className2,
              classNames
            )}
            data-framer-name={"Top Left"}
            layoutDependency={layoutDependency}
            layoutId={"dNbszlCS9"}
            ref={refBinding}
            style={{
              ...style,
            }}
            {...addPropertyOverrides2(
              {
                CLljGfTtP: {
                  "data-framer-name": "All",
                },
                dmlAwRaBe: {
                  "data-framer-name": "Left Right",
                },
                HWEDASjkO: {
                  "data-framer-name": "Top Bottom",
                },
                NmV6whLcj: {
                  "data-framer-name": "Right",
                },
                oSdwqWnmP: {
                  "data-framer-name": "Bottom",
                },
                PsAciZ2BM: {
                  "data-framer-name": "Top",
                },
                tETbP_pro: {
                  "data-framer-name": "Left",
                },
                yQxqYG67k: {
                  "data-framer-name": "Left Right",
                },
                yzIFdYlxZ: {
                  "data-framer-name": "Right Bottom",
                },
              },
              baseVariant,
              gestureVariant
            )}
          >
            <ComponentViewportProvider2>
              <SmartComponentScopedContainer2
                className={"framer-ugmoae-container"}
                isAuthoredByUser={true}
                isModuleExternal={true}
                layoutDependency={layoutDependency}
                layoutId={"EHPmwsEKd-container"}
                nodeId={"EHPmwsEKd"}
                rendersWithMotion={true}
                scopeId={"ywmXeNfxF"}
              >
                <DashedBorderFrame
                  animation={{
                    animated: true,
                    direction: "clockwise",
                    speed: 2,
                  }}
                  borderColor={
                    "var(--token-ab91763a-bd8d-4b8f-92c1-f89e2462855c, rgb(28, 28, 28))"
                  }
                  borderRadius={0}
                  borderWidth={1}
                  bottom={false}
                  dashLength={12}
                  gapLength={6}
                  height={"100%"}
                  id={"EHPmwsEKd"}
                  layoutId={"EHPmwsEKd"}
                  left={true}
                  right={false}
                  style={{
                    height: "100%",
                    width: "100%",
                  }}
                  top={true}
                  width={"100%"}
                  {...addPropertyOverrides2(
                    {
                      CLljGfTtP: {
                        borderRadius: 12,
                        bottom: true,
                        right: true,
                      },
                      dmlAwRaBe: {
                        right: true,
                        top: false,
                      },
                      HWEDASjkO: {
                        bottom: true,
                        left: false,
                      },
                      NmV6whLcj: {
                        left: false,
                        right: true,
                        top: false,
                      },
                      oSdwqWnmP: {
                        bottom: true,
                        left: false,
                        top: false,
                      },
                      PsAciZ2BM: {
                        left: false,
                      },
                      tETbP_pro: {
                        top: false,
                      },
                      yQxqYG67k: {
                        right: true,
                        top: false,
                      },
                      yzIFdYlxZ: {
                        bottom: true,
                        left: false,
                        right: true,
                        top: false,
                      },
                    },
                    baseVariant,
                    gestureVariant
                  )}
                />
              </SmartComponentScopedContainer2>
            </ComponentViewportProvider2>
          </motion3.div>
        </Transition2>
      </Variants2>
    </LayoutGroup2>
  );
});
var css3 = [
  "@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
  ".framer-aTu1i.framer-6eel1k, .framer-aTu1i .framer-6eel1k { display: block; }",
  ".framer-aTu1i.framer-z8k7b0 { align-content: center; align-items: center; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 10px; height: 360px; justify-content: center; overflow: hidden; padding: 0px; position: relative; width: 499px; }",
  ".framer-aTu1i .framer-ugmoae-container { flex: 1 0 0px; height: 100%; pointer-events: none; position: relative; width: 1px; }",
];
var FramerywmXeNfxF = withCSS2(Component2, css3, "framer-aTu1i");
var stdin_default2 = FramerywmXeNfxF;
FramerywmXeNfxF.displayName = "Main Site Grid Border";
FramerywmXeNfxF.defaultProps = {
  height: 360,
  width: 499,
};
addPropertyControls5(FramerywmXeNfxF, {
  variant: {
    options: [
      "dNbszlCS9",
      "yzIFdYlxZ",
      "tETbP_pro",
      "oSdwqWnmP",
      "NmV6whLcj",
      "PsAciZ2BM",
      "CLljGfTtP",
      "dmlAwRaBe",
      "HWEDASjkO",
      "yQxqYG67k",
    ],
    optionTitles: [
      "Top Left",
      "Right Bottom",
      "Left",
      "Bottom",
      "Right",
      "Top",
      "All",
      "Left Right",
      "Top Bottom",
      "Left Right",
    ],
    title: "Variant",
    type: ControlType5.Enum,
  },
});
addFonts2(
  FramerywmXeNfxF,
  [
    {
      explicitInter: true,
      fonts: [],
    },
    ...AnimatedDashedBorderFonts2,
  ],
  {
    supportsExplicitInterCodegen: true,
  }
);

// /:https://framerusercontent.com/modules/mKbSgczVcnOPPynIy1bw/rAq59hfQfVLAopUwq7ed/jwaXCiVTZ.js
var MainSiteGridBorderFonts = getFonts3(stdin_default2);
var DitherFonts = getFonts3(Dither);
var SmartComponentScopedContainerWithFXWithOptimizedAppearEffect =
  withOptimizedAppearEffect(withFX(SmartComponentScopedContainer3));
var RichTextWithFXWithOptimizedAppearEffect = withOptimizedAppearEffect(
  withFX(RichText)
);
var ButtonFonts = getFonts3(stdin_default);
var ButtonWithNavigateBack1wwaewkWithMappedReactProps1v1ipky =
  withMappedReactProps(
    withCodeBoundaryForOverrides(stdin_default, {
      nodeId: "k50hBKxOs",
      override: withNavigateBack,
      scopeId: "jwaXCiVTZ",
    }),
    wLxpqDnwB_exports
  );
var MotionDivWithFXWithOptimizedAppearEffect = withOptimizedAppearEffect(
  withFX(motion4.div)
);
var cycleOrder3 = ["WFEO4NOTi", "XumyWlvRh", "FMUA5Xb4i"];
var serializationHash3 = "framer-d7WuF";
var variantClassNames3 = {
  FMUA5Xb4i: "framer-v-gaokhg",
  WFEO4NOTi: "framer-v-fc61d0",
  XumyWlvRh: "framer-v-tfal4d",
};
function addPropertyOverrides3(overrides, ...variants) {
  const nextOverrides = {};
  variants?.forEach(
    (variant) => variant && Object.assign(nextOverrides, overrides[variant])
  );
  return nextOverrides;
}
var transition13 = {
  bounce: 0.2,
  delay: 0,
  duration: 0.4,
  type: "spring",
};
var transition2 = {
  bounce: 0.8,
  delay: 0.1,
  duration: 1.5,
  type: "spring",
};
var animation = {
  opacity: 0.75,
  rotate: 0,
  rotateX: 0,
  rotateY: 0,
  scale: 1,
  skewX: 0,
  skewY: 0,
  transition: transition2,
  x: 0,
  y: 0,
};
var animation1 = {
  opacity: 1e-3,
  rotate: 0,
  rotateX: 0,
  rotateY: 0,
  scale: 1,
  skewX: 0,
  skewY: 0,
  x: 0,
  y: 0,
};
var addImageAlt = (image, alt) => {
  if (!image || typeof image !== "object") {
    return;
  }
  return {
    ...image,
    alt,
  };
};
var transition3 = {
  bounce: 0,
  delay: 0.15,
  duration: 0.4,
  type: "spring",
};
var animation2 = {
  opacity: 1,
  rotate: 0,
  rotateX: 0,
  rotateY: 0,
  scale: 1,
  skewX: 0,
  skewY: 0,
  transition: transition3,
  x: 0,
  y: 0,
};
var animation3 = {
  opacity: 1e-3,
  rotate: 0,
  rotateX: 0,
  rotateY: 0,
  scale: 1,
  skewX: 0,
  skewY: 0,
  x: 0,
  y: 20,
};
var transition4 = {
  bounce: 0,
  delay: 0.2,
  duration: 0.4,
  type: "spring",
};
var animation4 = {
  opacity: 1,
  rotate: 0,
  rotateX: 0,
  rotateY: 0,
  scale: 1,
  skewX: 0,
  skewY: 0,
  transition: transition4,
  x: 0,
  y: 0,
};
var Transition3 = ({ value, children }) => {
  const config = React3.useContext(MotionConfigContext3);
  const transition = value ?? config.transition;
  const contextValue = React3.useMemo(
    () => ({
      ...config,
      transition,
    }),
    [JSON.stringify(transition)]
  );
  return (
    <MotionConfigContext3.Provider value={contextValue}>
      {children}
    </MotionConfigContext3.Provider>
  );
};
var Variants3 = motion4.create(React3.Fragment);
var humanReadableVariantMap3 = {
  Desktop: "WFEO4NOTi",
  Phone: "FMUA5Xb4i",
  Tablet: "XumyWlvRh",
};
var getProps3 = ({ height, id, width, ...props }) => {
  return {
    ...props,
    variant:
      humanReadableVariantMap3[props.variant] ?? props.variant ?? "WFEO4NOTi",
  };
};
var createLayoutDependency3 = (props, variants) => {
  if (props.layoutDependency)
    return variants.join("-") + props.layoutDependency;
  return variants.join("-");
};
var Component3 = /* @__PURE__ */ React3.forwardRef(function (props, ref) {
  const fallbackRef = useRef5(null);
  const refBinding = ref ?? fallbackRef;
  const defaultLayoutId = React3.useId();
  const { activeLocale, setLocale } = useLocaleInfo3();
  const componentViewport = useComponentViewport3();
  const {
    style,
    className: className2,
    layoutId,
    variant,
    ...restProps
  } = getProps3(props);
  const {
    baseVariant,
    classNames,
    clearLoadingGesture,
    gestureHandlers,
    gestureVariant,
    isLoading,
    setGestureState,
    setVariant,
    variants,
  } = useVariantState3({
    cycleOrder: cycleOrder3,
    defaultVariant: "WFEO4NOTi",
    ref: refBinding,
    variant,
    variantClassNames: variantClassNames3,
  });
  const layoutDependency = createLayoutDependency3(props, variants);
  const sharedStyleClassNames = [className];
  const scopingClassNames = cx3(serializationHash3, ...sharedStyleClassNames);
  return (
    <LayoutGroup3 id={layoutId ?? defaultLayoutId}>
      <Variants3 animate={variants} initial={false}>
        <Transition3 value={transition13}>
          <motion4.section
            {...restProps}
            {...gestureHandlers}
            className={cx3(
              scopingClassNames,
              "framer-fc61d0",
              className2,
              classNames
            )}
            data-framer-name={"Desktop"}
            layoutDependency={layoutDependency}
            layoutId={"WFEO4NOTi"}
            ref={refBinding}
            style={{
              ...style,
            }}
            {...addPropertyOverrides3(
              {
                FMUA5Xb4i: {
                  "data-framer-name": "Phone",
                },
                XumyWlvRh: {
                  "data-framer-name": "Tablet",
                },
              },
              baseVariant,
              gestureVariant
            )}
          >
            <motion4.div
              className={"framer-q00a20"}
              data-framer-name={"Content"}
              layoutDependency={layoutDependency}
              layoutId={"fZPOvRZu3"}
            >
              <ComponentViewportProvider3
                height={
                  Math.max(
                    0,
                    ((componentViewport?.height || 720) - 64 - 0) / 1
                  ) *
                    1 -
                  0
                }
                width={`min(${
                  componentViewport?.width || "100vw"
                } - 32px, 1200px)`}
                y={
                  (componentViewport?.y || 0) +
                  64 +
                  (((componentViewport?.height || 720) -
                    64 -
                    (Math.max(
                      0,
                      ((componentViewport?.height || 720) - 64 - 0) / 1
                    ) *
                      1 +
                      0)) /
                    2 +
                    0 +
                    0) +
                  0
                }
                {...addPropertyOverrides3(
                  {
                    FMUA5Xb4i: {
                      height: 608,
                      y:
                        (componentViewport?.y || 0) +
                        64 +
                        (((componentViewport?.height || 760) - 64 - 608) / 2 +
                          0 +
                          0) +
                        0,
                    },
                    XumyWlvRh: {
                      height:
                        Math.max(
                          0,
                          ((componentViewport?.height || 972) - 64 - 0) / 1
                        ) *
                          1 -
                        0,
                      y:
                        (componentViewport?.y || 0) +
                        64 +
                        (((componentViewport?.height || 972) -
                          64 -
                          (Math.max(
                            0,
                            ((componentViewport?.height || 972) - 64 - 0) / 1
                          ) *
                            1 +
                            0)) /
                          2 +
                          0 +
                          0) +
                        0,
                    },
                  },
                  baseVariant,
                  gestureVariant
                )}
              >
                <SmartComponentScopedContainer3
                  className={"framer-19za4mt-container"}
                  layoutDependency={layoutDependency}
                  layoutId={"Db6zvp40B-container"}
                  nodeId={"Db6zvp40B"}
                  rendersWithMotion={true}
                  scopeId={"jwaXCiVTZ"}
                >
                  {_jsx7(stdin_default2, {
                    height: "100%",
                    id: "Db6zvp40B",
                    layoutId: "Db6zvp40B",
                    style: {
                      height: "100%",
                      width: "100%",
                    },
                    variant: "dNbszlCS9",
                    width: "100%",
                  })}
                </SmartComponentScopedContainer3>
              </ComponentViewportProvider3>
              <motion4.div
                className={"framer-1vgappx"}
                data-framer-name={"Block"}
                layoutDependency={layoutDependency}
                layoutId={"q_4ij13of"}
              >
                <motion4.div
                  className={"framer-whr50l"}
                  data-framer-name={"Art"}
                  layoutDependency={layoutDependency}
                  layoutId={"iKROh8bFQ"}
                  style={{
                    mask: "url('https://framerusercontent.com/images/sFTsu8Q2Rvnhi1JLZnQmdLe8T0s.svg?width=1236&height=577') alpha no-repeat bottom / cover add, linear-gradient(0deg, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.6) 77%) add",
                    WebkitMask:
                      "url('https://framerusercontent.com/images/sFTsu8Q2Rvnhi1JLZnQmdLe8T0s.svg?width=1236&height=577') alpha no-repeat bottom / cover add, linear-gradient(0deg, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.6) 77%) add",
                  }}
                >
                  <ComponentViewportProvider3>
                    <SmartComponentScopedContainerWithFXWithOptimizedAppearEffect
                      __perspectiveFX={false}
                      __smartComponentFX={true}
                      __targetOpacity={0.75}
                      animate={animation}
                      className={"framer-139s4z-container"}
                      data-framer-appear-id={"139s4z"}
                      data-framer-name={"Dither 1 (Animated)"}
                      initial={animation1}
                      isAuthoredByUser={true}
                      isModuleExternal={true}
                      layoutDependency={layoutDependency}
                      layoutId={"Lhmfsnm9r-container"}
                      name={"Dither 1 (Animated)"}
                      nodeId={"Lhmfsnm9r"}
                      optimized={true}
                      rendersWithMotion={true}
                      scopeId={"jwaXCiVTZ"}
                      style={{
                        opacity: 0.75,
                      }}
                    >
                      <Dither
                        algorithm={"random"}
                        animation={{
                          canvasPreview: false,
                          enabled: true,
                          intensity: 10,
                          interval: 0.08,
                        }}
                        backgroundColor={
                          "var(--token-bb3f9735-47c4-4ac2-b002-c5446021aee6, rgb(0, 0, 0))"
                        }
                        brightness={-40}
                        dotColor={
                          "var(--token-4fef9130-aa55-4351-8ed5-cfba481137a7, rgb(255, 255, 255))"
                        }
                        enabled={true}
                        glow={10}
                        height={"100%"}
                        id={"Lhmfsnm9r"}
                        image={addImageAlt(
                          {
                            pixelHeight: 1694,
                            pixelWidth: 2552,
                            src: "https://framerusercontent.com/images/LdpfaGpp3o4UYy9fAdZCfCduRk.png?width=2552&height=1694",
                            srcSet:
                              "https://framerusercontent.com/images/LdpfaGpp3o4UYy9fAdZCfCduRk.png?scale-down-to=512&width=2552&height=1694 512w,https://framerusercontent.com/images/LdpfaGpp3o4UYy9fAdZCfCduRk.png?scale-down-to=1024&width=2552&height=1694 1024w,https://framerusercontent.com/images/LdpfaGpp3o4UYy9fAdZCfCduRk.png?scale-down-to=2048&width=2552&height=1694 2048w,https://framerusercontent.com/images/LdpfaGpp3o4UYy9fAdZCfCduRk.png?width=2552&height=1694 2552w",
                          },
                          ""
                        )}
                        layoutId={"Lhmfsnm9r"}
                        midtones={25}
                        name={"Dither 1 (Animated)"}
                        pixelSize={2}
                        radius={"0px"}
                        style={{
                          height: "100%",
                          width: "100%",
                        }}
                        threshold={160}
                        width={"100%"}
                      />
                    </SmartComponentScopedContainerWithFXWithOptimizedAppearEffect>
                  </ComponentViewportProvider3>
                  <ComponentViewportProvider3>
                    <SmartComponentScopedContainer3
                      className={"framer-qzleh5-container"}
                      data-framer-name={"Dither 2"}
                      isAuthoredByUser={true}
                      isModuleExternal={true}
                      layoutDependency={layoutDependency}
                      layoutId={"Ovl7hWxnk-container"}
                      name={"Dither 2"}
                      nodeId={"Ovl7hWxnk"}
                      rendersWithMotion={true}
                      scopeId={"jwaXCiVTZ"}
                    >
                      <Dither
                        algorithm={"ordered"}
                        animation={{
                          canvasPreview: true,
                          enabled: false,
                          intensity: 10,
                          interval: 0.08,
                        }}
                        backgroundColor={
                          "var(--token-bb3f9735-47c4-4ac2-b002-c5446021aee6, rgb(0, 0, 0))"
                        }
                        brightness={16}
                        dotColor={
                          "var(--token-4fef9130-aa55-4351-8ed5-cfba481137a7, rgb(255, 255, 255))"
                        }
                        enabled={true}
                        glow={0}
                        height={"100%"}
                        id={"Ovl7hWxnk"}
                        image={addImageAlt(
                          {
                            pixelHeight: 1694,
                            pixelWidth: 2552,
                            src: "https://framerusercontent.com/images/LdpfaGpp3o4UYy9fAdZCfCduRk.png?width=2552&height=1694",
                            srcSet:
                              "https://framerusercontent.com/images/LdpfaGpp3o4UYy9fAdZCfCduRk.png?scale-down-to=512&width=2552&height=1694 512w,https://framerusercontent.com/images/LdpfaGpp3o4UYy9fAdZCfCduRk.png?scale-down-to=1024&width=2552&height=1694 1024w,https://framerusercontent.com/images/LdpfaGpp3o4UYy9fAdZCfCduRk.png?scale-down-to=2048&width=2552&height=1694 2048w,https://framerusercontent.com/images/LdpfaGpp3o4UYy9fAdZCfCduRk.png?width=2552&height=1694 2552w",
                          },
                          ""
                        )}
                        layoutId={"Ovl7hWxnk"}
                        midtones={82}
                        name={"Dither 2"}
                        pixelSize={1}
                        radius={"0px"}
                        style={{
                          height: "100%",
                          width: "100%",
                        }}
                        threshold={86}
                        width={"100%"}
                      />
                    </SmartComponentScopedContainer3>
                  </ComponentViewportProvider3>
                </motion4.div>
                <motion4.div
                  className={"framer-1m3fdon"}
                  data-framer-name={"Text"}
                  layoutDependency={layoutDependency}
                  layoutId={"n3YkJ1ueU"}
                >
                  <RichTextWithFXWithOptimizedAppearEffect
                    __fromCanvasComponent={true}
                    __perspectiveFX={false}
                    __smartComponentFX={true}
                    __targetOpacity={1}
                    animate={animation2}
                    className={"framer-jfbnqu"}
                    data-framer-appear-id={"jfbnqu"}
                    fonts={["Inter"]}
                    initial={animation3}
                    layoutDependency={layoutDependency}
                    layoutId={"hyjlwsgey"}
                    optimized={true}
                    style={{
                      "--extracted-r6o4lv":
                        "var(--token-8acf10b0-fc55-42ff-8ac5-80a79dc47979, rgba(255, 255, 255, 0.5))",
                      "--framer-link-text-color": "rgb(0, 153, 255)",
                      "--framer-link-text-decoration": "underline",
                    }}
                    verticalAlignment={"top"}
                    withExternalLayout={true}
                  >
                    <React3.Fragment>
                      <motion4.p
                        className={"framer-styles-preset-d4fts2"}
                        data-styles-preset={"bRzBDjLMv"}
                        style={{
                          "--framer-text-alignment": "center",
                          "--framer-text-color":
                            "var(--extracted-r6o4lv, var(--token-8acf10b0-fc55-42ff-8ac5-80a79dc47979, rgba(255, 255, 255, 0.5)))",
                        }}
                      >
                        {"Sorry, we can't find the page you're looking for."}
                      </motion4.p>
                    </React3.Fragment>
                  </RichTextWithFXWithOptimizedAppearEffect>
                  <MotionDivWithFXWithOptimizedAppearEffect
                    __perspectiveFX={false}
                    __smartComponentFX={true}
                    __targetOpacity={1}
                    animate={animation4}
                    className={"framer-1vr32xc"}
                    data-framer-appear-id={"1vr32xc"}
                    data-framer-name={"Actions"}
                    initial={animation3}
                    layoutDependency={layoutDependency}
                    layoutId={"wH81VffLA"}
                    optimized={true}
                  >
                    <ComponentViewportProvider3
                      height={40}
                      y={
                        (componentViewport?.y || 0) +
                        64 +
                        (((componentViewport?.height || 720) -
                          64 -
                          (Math.max(
                            0,
                            ((componentViewport?.height || 720) - 64 - 0) / 1
                          ) *
                            1 +
                            0)) /
                          2 +
                          0 +
                          0) +
                        (0 +
                          (Math.max(
                            0,
                            ((componentViewport?.height || 720) - 64 - 0) / 1
                          ) *
                            1 -
                            0 -
                            (Math.max(
                              0,
                              ((componentViewport?.height || 720) - 64 - 0) / 1
                            ) *
                              1 -
                              0) *
                              1) /
                            2) +
                        0 +
                        (((Math.max(
                          0,
                          ((componentViewport?.height || 720) - 64 - 0) / 1
                        ) *
                          1 -
                          0) *
                          1 -
                          44 -
                          (Math.max(
                            0,
                            ((Math.max(
                              0,
                              ((componentViewport?.height || 720) - 64 - 0) / 1
                            ) *
                              1 -
                              0) *
                              1 -
                              44 -
                              214) /
                              1
                          ) *
                            1 +
                            184 +
                            30)) /
                          2 +
                          Math.max(
                            0,
                            ((Math.max(
                              0,
                              ((componentViewport?.height || 720) - 64 - 0) / 1
                            ) *
                              1 -
                              0) *
                              1 -
                              44 -
                              214) /
                              1
                          ) *
                            1 +
                          30) +
                        0 +
                        144 +
                        0
                      }
                      {...addPropertyOverrides3(
                        {
                          FMUA5Xb4i: {
                            y:
                              (componentViewport?.y || 0) +
                              64 +
                              (((componentViewport?.height || 760) - 64 - 608) /
                                2 +
                                0 +
                                0) +
                              0 +
                              0 +
                              380 +
                              0 +
                              144 +
                              0,
                          },
                          XumyWlvRh: {
                            y:
                              (componentViewport?.y || 0) +
                              64 +
                              (((componentViewport?.height || 972) -
                                64 -
                                (Math.max(
                                  0,
                                  ((componentViewport?.height || 972) -
                                    64 -
                                    0) /
                                    1
                                ) *
                                  1 +
                                  0)) /
                                2 +
                                0 +
                                0) +
                              (0 +
                                (Math.max(
                                  0,
                                  ((componentViewport?.height || 972) -
                                    64 -
                                    0) /
                                    1
                                ) *
                                  1 -
                                  0 -
                                  (Math.max(
                                    0,
                                    ((componentViewport?.height || 972) -
                                      64 -
                                      0) /
                                      1
                                  ) *
                                    1 -
                                    0) *
                                    1) /
                                  2) +
                              0 +
                              (((Math.max(
                                0,
                                ((componentViewport?.height || 972) - 64 - 0) /
                                  1
                              ) *
                                1 -
                                0) *
                                1 -
                                44 -
                                (Math.max(
                                  0,
                                  ((Math.max(
                                    0,
                                    ((componentViewport?.height || 972) -
                                      64 -
                                      0) /
                                      1
                                  ) *
                                    1 -
                                    0) *
                                    1 -
                                    44 -
                                    214) /
                                    1
                                ) *
                                  1 +
                                  184 +
                                  30)) /
                                2 +
                                Math.max(
                                  0,
                                  ((Math.max(
                                    0,
                                    ((componentViewport?.height || 972) -
                                      64 -
                                      0) /
                                      1
                                  ) *
                                    1 -
                                    0) *
                                    1 -
                                    44 -
                                    214) /
                                    1
                                ) *
                                  1 +
                                30) +
                              0 +
                              144 +
                              0,
                          },
                        },
                        baseVariant,
                        gestureVariant
                      )}
                    >
                      <SmartComponentScopedContainer3
                        className={"framer-1wwaewk-container"}
                        layoutDependency={layoutDependency}
                        layoutId={"k50hBKxOs-container"}
                        nodeId={"k50hBKxOs"}
                        rendersWithMotion={true}
                        scopeId={"jwaXCiVTZ"}
                      >
                        <ButtonWithNavigateBack1wwaewkWithMappedReactProps1v1ipky
                          D9dBYabSn={false}
                          height={"100%"}
                          id={"k50hBKxOs"}
                          layoutId={"k50hBKxOs"}
                          qCxNvGxTB={"Default"}
                          SMZpJms0Q={"Back to home"}
                          style={{
                            height: "100%",
                          }}
                          variant={"UItccn4nC"}
                          width={"100%"}
                        />
                      </SmartComponentScopedContainer3>
                    </ComponentViewportProvider3>
                  </MotionDivWithFXWithOptimizedAppearEffect>
                </motion4.div>
                <ComponentViewportProvider3
                  height={
                    (Math.max(
                      0,
                      ((componentViewport?.height || 720) - 64 - 0) / 1
                    ) *
                      1 -
                      0) *
                      1 -
                    0
                  }
                  width={`max(min(${
                    componentViewport?.width || "100vw"
                  } - 32px, 1200px), 1px)`}
                  y={
                    (componentViewport?.y || 0) +
                    64 +
                    (((componentViewport?.height || 720) -
                      64 -
                      (Math.max(
                        0,
                        ((componentViewport?.height || 720) - 64 - 0) / 1
                      ) *
                        1 +
                        0)) /
                      2 +
                      0 +
                      0) +
                    (0 +
                      (Math.max(
                        0,
                        ((componentViewport?.height || 720) - 64 - 0) / 1
                      ) *
                        1 -
                        0 -
                        (Math.max(
                          0,
                          ((componentViewport?.height || 720) - 64 - 0) / 1
                        ) *
                          1 -
                          0) *
                          1) /
                        2) +
                    0
                  }
                  {...addPropertyOverrides3(
                    {
                      FMUA5Xb4i: {
                        height: 608,
                        y:
                          (componentViewport?.y || 0) +
                          64 +
                          (((componentViewport?.height || 760) - 64 - 608) / 2 +
                            0 +
                            0) +
                          0 +
                          0,
                      },
                      XumyWlvRh: {
                        height:
                          (Math.max(
                            0,
                            ((componentViewport?.height || 972) - 64 - 0) / 1
                          ) *
                            1 -
                            0) *
                            1 -
                          0,
                        y:
                          (componentViewport?.y || 0) +
                          64 +
                          (((componentViewport?.height || 972) -
                            64 -
                            (Math.max(
                              0,
                              ((componentViewport?.height || 972) - 64 - 0) / 1
                            ) *
                              1 +
                              0)) /
                            2 +
                            0 +
                            0) +
                          (0 +
                            (Math.max(
                              0,
                              ((componentViewport?.height || 972) - 64 - 0) / 1
                            ) *
                              1 -
                              0 -
                              (Math.max(
                                0,
                                ((componentViewport?.height || 972) - 64 - 0) /
                                  1
                              ) *
                                1 -
                                0) *
                                1) /
                              2) +
                          0,
                      },
                    },
                    baseVariant,
                    gestureVariant
                  )}
                >
                  <SmartComponentScopedContainer3
                    className={"framer-k29gmi-container"}
                    layoutDependency={layoutDependency}
                    layoutId={"NK129aulU-container"}
                    nodeId={"NK129aulU"}
                    rendersWithMotion={true}
                    scopeId={"jwaXCiVTZ"}
                  >
                    {_jsx7(stdin_default2, {
                      height: "100%",
                      id: "NK129aulU",
                      layoutId: "NK129aulU",
                      style: {
                        height: "100%",
                        width: "100%",
                      },
                      variant: "yzIFdYlxZ",
                      width: "100%",
                    })}
                  </SmartComponentScopedContainer3>
                </ComponentViewportProvider3>
              </motion4.div>
            </motion4.div>
          </motion4.section>
        </Transition3>
      </Variants3>
    </LayoutGroup3>
  );
});
var css4 = [
  "@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
  ".framer-d7WuF.framer-1pb9yje, .framer-d7WuF .framer-1pb9yje { display: block; }",
  ".framer-d7WuF.framer-fc61d0 { align-content: center; align-items: center; display: flex; flex-direction: column; flex-wrap: nowrap; gap: 38px; height: 720px; justify-content: center; overflow: visible; padding: 64px 16px 0px 16px; position: relative; width: 1200px; }",
  ".framer-d7WuF .framer-q00a20 { align-content: center; align-items: center; display: flex; flex: 1 0 0px; flex-direction: row; flex-wrap: nowrap; gap: 0px; height: 1px; justify-content: center; max-width: 1200px; overflow: visible; padding: 0px; position: relative; width: 100%; z-index: 2; }",
  ".framer-d7WuF .framer-19za4mt-container { -webkit-user-select: none; bottom: 0px; flex: none; left: 0px; pointer-events: none; position: absolute; right: 0px; top: 0px; user-select: none; z-index: 1; }",
  ".framer-d7WuF .framer-1vgappx { align-content: center; align-items: center; display: flex; flex: 1 0 0px; flex-direction: column; flex-wrap: nowrap; gap: 30px; height: 100%; justify-content: center; overflow: hidden; padding: 0px 0px 44px 0px; position: relative; width: 1px; z-index: 3; }",
  ".framer-d7WuF .framer-whr50l { align-content: center; align-items: center; display: flex; flex: 1 0 0px; flex-direction: row; flex-wrap: nowrap; gap: 0px; height: 1px; justify-content: center; overflow: hidden; padding: 0px; position: relative; width: 100%; }",
  ".framer-d7WuF .framer-139s4z-container { bottom: 0px; flex: none; left: 0px; position: absolute; right: 0px; top: 0px; z-index: 2; }",
  ".framer-d7WuF .framer-qzleh5-container { flex: 1 0 0px; height: 100%; position: relative; width: 1px; }",
  ".framer-d7WuF .framer-1m3fdon { align-content: center; align-items: center; display: flex; flex: none; flex-direction: column; flex-wrap: nowrap; gap: 24px; height: min-content; justify-content: center; overflow: visible; padding: 0px; position: relative; width: 100%; }",
  ".framer-d7WuF .framer-jfbnqu { flex: none; height: auto; max-width: 240px; position: relative; white-space: pre-wrap; width: 100%; word-break: break-word; word-wrap: break-word; }",
  ".framer-d7WuF .framer-1vr32xc { align-content: center; align-items: center; display: flex; flex: none; flex-direction: row; flex-wrap: nowrap; gap: 10px; height: min-content; justify-content: center; overflow: hidden; padding: 0px; position: relative; width: min-content; }",
  ".framer-d7WuF .framer-1wwaewk-container { flex: none; height: 40px; position: relative; width: auto; }",
  ".framer-d7WuF .framer-k29gmi-container { -webkit-user-select: none; bottom: 0px; flex: none; left: 0px; pointer-events: none; position: absolute; right: 0px; top: 0px; user-select: none; z-index: 2; }",
  ".framer-d7WuF.framer-v-tfal4d.framer-fc61d0 { height: 972px; width: 810px; }",
  ".framer-d7WuF.framer-v-gaokhg.framer-fc61d0 { height: 760px; width: 390px; }",
  ".framer-d7WuF.framer-v-gaokhg .framer-q00a20 { flex: none; height: min-content; }",
  ".framer-d7WuF.framer-v-gaokhg .framer-1vgappx { height: min-content; }",
  ".framer-d7WuF.framer-v-gaokhg .framer-whr50l { aspect-ratio: 1.022857142857143 / 1; flex: none; height: var(--framer-aspect-ratio-supported, 350px); }",
  ...css,
];
var FramerjwaXCiVTZ = withCSS3(Component3, css4, "framer-d7WuF");
var stdin_default3 = FramerjwaXCiVTZ;
FramerjwaXCiVTZ.displayName = "NotFound";
FramerjwaXCiVTZ.defaultProps = {
  height: 720,
  width: 1200,
};
addPropertyControls6(FramerjwaXCiVTZ, {
  variant: {
    options: ["WFEO4NOTi", "XumyWlvRh", "FMUA5Xb4i"],
    optionTitles: ["Desktop", "Tablet", "Phone"],
    title: "Variant",
    type: ControlType6.Enum,
  },
});
addFonts3(
  FramerjwaXCiVTZ,
  [
    {
      explicitInter: true,
      fonts: [
        {
          family: "Inter",
          source: "framer",
          style: "normal",
          unicodeRange:
            "U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F",
          url: "https://framerusercontent.com/assets/5vvr9Vy74if2I6bQbJvbw7SY1pQ.woff2",
          weight: "400",
        },
        {
          family: "Inter",
          source: "framer",
          style: "normal",
          unicodeRange: "U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116",
          url: "https://framerusercontent.com/assets/EOr0mi4hNtlgWNn9if640EZzXCo.woff2",
          weight: "400",
        },
        {
          family: "Inter",
          source: "framer",
          style: "normal",
          unicodeRange: "U+1F00-1FFF",
          url: "https://framerusercontent.com/assets/Y9k9QrlZAqio88Klkmbd8VoMQc.woff2",
          weight: "400",
        },
        {
          family: "Inter",
          source: "framer",
          style: "normal",
          unicodeRange: "U+0370-03FF",
          url: "https://framerusercontent.com/assets/OYrD2tBIBPvoJXiIHnLoOXnY9M.woff2",
          weight: "400",
        },
        {
          family: "Inter",
          source: "framer",
          style: "normal",
          unicodeRange:
            "U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF",
          url: "https://framerusercontent.com/assets/JeYwfuaPfZHQhEG8U5gtPDZ7WQ.woff2",
          weight: "400",
        },
        {
          family: "Inter",
          source: "framer",
          style: "normal",
          unicodeRange:
            "U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2070, U+2074-207E, U+2080-208E, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD",
          url: "https://framerusercontent.com/assets/GrgcKwrN6d3Uz8EwcLHZxwEfC4.woff2",
          weight: "400",
        },
        {
          family: "Inter",
          source: "framer",
          style: "normal",
          unicodeRange:
            "U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB",
          url: "https://framerusercontent.com/assets/b6Y37FthZeALduNqHicBT6FutY.woff2",
          weight: "400",
        },
      ],
    },
    ...MainSiteGridBorderFonts,
    ...DitherFonts,
    ...ButtonFonts,
    ...getFontsFromSharedStyle(fonts),
  ],
  {
    supportsExplicitInterCodegen: true,
  }
);

// virtual:not-found
import { WithFramerBreakpoints } from "unframer";

// virtual:__routes
var routes = {
  Agq1L2jDe: {
    path: "/lib/careers/:slug",
  },
  DEi7PWhxw: {
    path: "/coming-soon",
  },
  J_r8CT7G7: {
    path: "/lib/about",
  },
  MiKvYzstd: {
    path: "/disconnect",
  },
  Mxb74mbpa: {
    path: "/verify-social",
  },
  OegBE_J9e: {
    path: "/lib/home",
  },
  SOf0RbDE_: {
    path: "/lib/blog",
  },
  TQDjkQC2A: {
    path: "/lib/contact",
  },
  UVAM5_4oX: {
    path: "/verify",
  },
  XanNBrFME: {
    path: "/kyc",
  },
  YBTUYW5mq: {
    path: "/lib/pricing",
  },
  a5CCfdDiy: {
    path: "/lib/updates/:slug",
  },
  augiA20Il: {
    path: "/",
  },
  cpP7I9WGp: {
    path: "/404",
  },
  e9YIc4Uv5: {
    path: "/lib/waitlist",
  },
  inNalAASs: {
    path: "/lib/blog/:slug",
  },
  ixIXvnG3U: {
    path: "/lib/legal/:slug",
  },
  nhNLVf3qq: {
    path: "/connections",
  },
  rX7FOhQc0: {
    path: "/lib/updates",
  },
  so5jTiDIE: {
    path: "/lib/careers",
  },
};

// virtual:not-found
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {
  base: "FMUA5Xb4i",
  md: "XumyWlvRh",
  xl: "WFEO4NOTi",
};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
  return (
    <ContextProviders
      routes={routes}
      framerSiteId={
        "c32b11589f2bc68bdb1b6d8b6f1517c87e280d7db56dec1009246311f93861da"
      }
      locale={locale}
      locales={locales}
    >
      {jsx(stdin_default3, {
        ...rest,
      })}
    </ContextProviders>
  );
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders NotFoundFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
  return (
    <ContextProviders
      routes={routes}
      framerSiteId={
        "c32b11589f2bc68bdb1b6d8b6f1517c87e280d7db56dec1009246311f93861da"
      }
      locale={locale}
      locales={locales}
    >
      <WithFramerBreakpoints
        Component={stdin_default3}
        variants={defaultResponsiveVariants}
        {...rest}
      />
    </ContextProviders>
  );
};
Object.assign(ComponentWithRoot, stdin_default3);
var not_found_default = ComponentWithRoot;
export { not_found_default as default };

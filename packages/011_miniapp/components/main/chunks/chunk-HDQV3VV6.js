// @ts-nocheck

/* This file was generated by Unframer for Framer project c32b11589f2bc68b "humanpass", do not edit manually */
// /:https://framerusercontent.com/modules/wJLp4ocFGeduHbUL36u9/FjOMmkYCITfXcYfFe7PM/HumanPass.js
import { forwardRef } from "react";
import { jsx as _jsx } from "react/jsx-runtime";
import { useMainStore, useNavStore } from "../../../src/store";

// /:https://framer.com/m/framer/store.js@^1.0.0
import { useEffect, useState } from "react";
import { Data, useObserveData } from "unframer";
function createStore(state1) {
  const dataStore = Data({ state: Object.freeze({ ...state1 }) });
  const setDataStore = (newState) => {
    if (typeof newState === "function") {
      newState = newState(dataStore.state);
    }
    dataStore.state = Object.freeze({ ...dataStore.state, ...newState });
  };
  let storeState =
    typeof state1 === "object" ? Object.freeze({ ...state1 }) : state1;
  const storeSetters = /* @__PURE__ */ new Set();
  const setStoreState = (newState) => {
    if (typeof newState === "function") {
      newState = newState(storeState);
    }
    storeState =
      typeof newState === "object"
        ? Object.freeze({ ...storeState, ...newState })
        : newState;
    storeSetters.forEach((setter) => setter(storeState));
  };
  function useStore2() {
    const [state, setState] = useState(storeState);
    useEffect(() => {
      storeSetters.add(setState);
      return () => storeSetters.delete(setState);
    }, []);
    if (useObserveData() === true) {
      useObserveData();
      return [dataStore.state, setDataStore];
    } else {
      return [state, setStoreState];
    }
  }
  return useStore2;
}

// /:https://framerusercontent.com/modules/wJLp4ocFGeduHbUL36u9/FjOMmkYCITfXcYfFe7PM/HumanPass.js
var useStore = createStore({ background: "#0099FF" });
function withOnClickNavIconButton(Component) {
  return /* @__PURE__ */ forwardRef((props, ref) => {
    const navStore = useNavStore();
    return /* @__PURE__ */ _jsx(Component, {
      ref,
      ...props,
      onClick: () => {
        navStore.navigate("/verify-pincode");
      },
    });
  });
}
function withOnClickManage(Component) {
  return /* @__PURE__ */ forwardRef((props, ref) => {
    const navStore = useNavStore();
    return /* @__PURE__ */ _jsx(Component, {
      ref,
      ...props,
      onClick: () => {
        navStore.navigate("/connections");
      },
    });
  });
}
function withOnClickWallets(Component) {
  return /* @__PURE__ */ forwardRef((props, ref) => {
    const mainStore = useMainStore();
    return /* @__PURE__ */ _jsx(Component, {
      ref,
      ...props,
      onClick: () => {
        mainStore.setSelectedFilter("Wallet");
      },
    });
  });
}
function withOnClickSocialAccounts(Component) {
  return /* @__PURE__ */ forwardRef((props, ref) => {
    const mainStore = useMainStore();
    return /* @__PURE__ */ _jsx(Component, {
      ref,
      ...props,
      onClick: () => mainStore.setSelectedFilter("Social"),
    });
  });
}

export {
  withOnClickManage,
  withOnClickNavIconButton,
  withOnClickSocialAccounts,
  withOnClickWallets,
};

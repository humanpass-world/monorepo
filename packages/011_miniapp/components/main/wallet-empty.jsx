// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project c32b11589f2bc68b "humanpass", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
}} Props

 */
import { className, css, fonts } from "./chunks/chunk-IPS3SQC7.js";
import { stdin_default } from "./chunks/chunk-U6SQYF76.js";
import "./chunks/chunk-R527CHIA.js";
import { routes } from "./chunks/chunk-QMBC2E5Z.js";
import "./chunks/chunk-WSFCRVEQ.js";

// virtual:wallet-empty
import { Fragment as Fragment2 } from "react";
import { ContextProviders } from "unframer";

// /:https://framerusercontent.com/modules/keNoedpvdoX9qGT8p9sH/oQGXXJplAoCHTrl915zW/EHM627Evm.js
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import {
	addFonts,
	ComponentViewportProvider,
	cx,
	getFonts,
	getFontsFromSharedStyle,
	RichText,
	SmartComponentScopedContainer,
	useComponentViewport,
	useLocaleInfo,
	useVariantState,
	withCSS,
} from "unframer";
import { LayoutGroup, motion, MotionConfigContext } from "unframer";
import * as React from "react";
import { useRef } from "react";
var MainSiteGridBorderFonts = getFonts(stdin_default);
var serializationHash = "framer-nHuzP";
var variantClassNames = {
	gEjjwbdBN: "framer-v-zrmreu",
};
var transition1 = {
	bounce: 0.2,
	delay: 0,
	duration: 0.4,
	type: "spring",
};
var Transition = ({ value, children }) => {
	const config = React.useContext(MotionConfigContext);
	const transition = value ?? config.transition;
	const contextValue = React.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var Variants = motion.create(React.Fragment);
var getProps = ({ height, id, width, ...props }) => {
	return {
		...props,
	};
};
var createLayoutDependency = (props, variants) => {
	if (props.layoutDependency)
		return variants.join("-") + props.layoutDependency;
	return variants.join("-");
};
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
	const fallbackRef = useRef(null);
	const refBinding = ref ?? fallbackRef;
	const defaultLayoutId = React.useId();
	const { activeLocale, setLocale } = useLocaleInfo();
	const componentViewport = useComponentViewport();
	const {
		style,
		className: className2,
		layoutId,
		variant,
		...restProps
	} = getProps(props);
	const {
		baseVariant,
		classNames,
		clearLoadingGesture,
		gestureHandlers,
		gestureVariant,
		isLoading,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		defaultVariant: "gEjjwbdBN",
		ref: refBinding,
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const sharedStyleClassNames = [className];
	const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames);
	return (
		<LayoutGroup id={layoutId ?? defaultLayoutId}>
			<Variants animate={variants} initial={false}>
				<Transition value={transition1}>
					<motion.div
						{...restProps}
						{...gestureHandlers}
						className={cx(
							scopingClassNames,
							"framer-zrmreu",
							className2,
							classNames,
						)}
						data-framer-name={"Variant 1"}
						layoutDependency={layoutDependency}
						layoutId={"gEjjwbdBN"}
						ref={refBinding}
						style={{
							...style,
						}}
					>
						<motion.div
							className={"framer-yo9bnv"}
							data-framer-name={"Text"}
							layoutDependency={layoutDependency}
							layoutId={"s8O6EyAIk"}
						>
							<RichText
								__fromCanvasComponent={true}
								className={"framer-15wfluv"}
								fonts={["Inter"]}
								layoutDependency={layoutDependency}
								layoutId={"fS7qTkWPZ"}
								style={{
									"--extracted-r6o4lv":
										"var(--token-311dfa1b-5054-44c6-8b55-ece1611bbe6a, rgba(255, 255, 255, 0.3))",
									"--framer-link-text-color": "rgb(0, 153, 255)",
									"--framer-link-text-decoration": "underline",
								}}
								verticalAlignment={"top"}
								withExternalLayout={true}
							>
								<React.Fragment>
									<motion.p
										className={"framer-styles-preset-ujo3da"}
										data-styles-preset={"sQrIs9_t0"}
										style={{
											"--framer-text-alignment": "center",
											"--framer-text-color":
												"var(--extracted-r6o4lv, var(--token-311dfa1b-5054-44c6-8b55-ece1611bbe6a, rgba(255, 255, 255, 0.3)))",
										}}
									>
										<motion.code>{"No wallets connected"}</motion.code>
									</motion.p>
								</React.Fragment>
							</RichText>
						</motion.div>
						<ComponentViewportProvider
							height={(componentViewport?.height || 69) * 1}
							width={componentViewport?.width || "100vw"}
							y={
								(componentViewport?.y || 0) +
								((componentViewport?.height || 69) * 0.5045045045045047 -
									((componentViewport?.height || 69) * 1) / 2)
							}
						>
							<SmartComponentScopedContainer
								className={"framer-ucvld1-container"}
								layoutDependency={layoutDependency}
								layoutId={"Tn9Z8JeH7-container"}
								nodeId={"Tn9Z8JeH7"}
								rendersWithMotion={true}
								scopeId={"EHM627Evm"}
							>
								{_jsx(stdin_default, {
									height: "100%",
									id: "Tn9Z8JeH7",
									layoutId: "Tn9Z8JeH7",
									style: {
										height: "100%",
										width: "100%",
									},
									variant: "CLljGfTtP",
									width: "100%",
								})}
							</SmartComponentScopedContainer>
						</ComponentViewportProvider>
					</motion.div>
				</Transition>
			</Variants>
		</LayoutGroup>
	);
});
var css2 = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-nHuzP.framer-1bs1vtm, .framer-nHuzP .framer-1bs1vtm { display: block; }",
	".framer-nHuzP.framer-zrmreu { align-content: center; align-items: center; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 14px; height: min-content; justify-content: center; overflow: visible; padding: 24px 16px 24px 16px; position: relative; width: 358px; }",
	".framer-nHuzP .framer-yo9bnv { align-content: flex-start; align-items: flex-start; display: flex; flex: 1 0 0px; flex-direction: column; flex-wrap: nowrap; gap: 0px; height: min-content; justify-content: center; overflow: hidden; padding: 0px; position: relative; width: 1px; z-index: 4; }",
	".framer-nHuzP .framer-15wfluv { flex: none; height: auto; position: relative; white-space: pre-wrap; width: 100%; word-break: break-word; word-wrap: break-word; }",
	".framer-nHuzP .framer-ucvld1-container { -webkit-user-select: none; flex: none; height: 100%; left: calc(50.00000000000002% - 100% / 2); pointer-events: none; position: absolute; top: calc(50.45045045045047% - 100% / 2); user-select: none; width: 100%; z-index: 2; }",
	...css,
];
var FramerEHM627Evm = withCSS(Component, css2, "framer-nHuzP");
var stdin_default2 = FramerEHM627Evm;
FramerEHM627Evm.displayName = "WalletEmpty";
FramerEHM627Evm.defaultProps = {
	height: 69,
	width: 358,
};
addFonts(
	FramerEHM627Evm,
	[
		{
			explicitInter: true,
			fonts: [
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F",
					url: "https://framerusercontent.com/assets/5vvr9Vy74if2I6bQbJvbw7SY1pQ.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116",
					url: "https://framerusercontent.com/assets/EOr0mi4hNtlgWNn9if640EZzXCo.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+1F00-1FFF",
					url: "https://framerusercontent.com/assets/Y9k9QrlZAqio88Klkmbd8VoMQc.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+0370-03FF",
					url: "https://framerusercontent.com/assets/OYrD2tBIBPvoJXiIHnLoOXnY9M.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF",
					url: "https://framerusercontent.com/assets/JeYwfuaPfZHQhEG8U5gtPDZ7WQ.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2070, U+2074-207E, U+2080-208E, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD",
					url: "https://framerusercontent.com/assets/GrgcKwrN6d3Uz8EwcLHZxwEfC4.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB",
					url: "https://framerusercontent.com/assets/b6Y37FthZeALduNqHicBT6FutY.woff2",
					weight: "400",
				},
			],
		},
		...MainSiteGridBorderFonts,
		...getFontsFromSharedStyle(fonts),
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:wallet-empty
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"c32b11589f2bc68bdb1b6d8b6f1517c87e280d7db56dec1009246311f93861da"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default2, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders WalletEmptyFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"c32b11589f2bc68bdb1b6d8b6f1517c87e280d7db56dec1009246311f93861da"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default2}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default2);
var wallet_empty_default = ComponentWithRoot;
export { wallet_empty_default as default };

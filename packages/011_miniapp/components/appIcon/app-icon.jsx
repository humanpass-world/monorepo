// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project c32b11589f2bc68b "humanpass", do not edit manually */
"use client";

// virtual:app-icon
/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
 * variant?: 'Default' | 'With ChainIcon' // Variant
 * chainIcon?: {src: string, srcSet?: string, alt?: string} // chainIcon
 * appIcon?: {src: string, srcSet?: string, alt?: string} // appIcon
}} Props

 */
import { Fragment as Fragment2 } from "react";
import { ContextProviders } from "unframer";

// /:https://framerusercontent.com/modules/TvDOEGItv0N5YTpmms0O/HhJz1d1KJ44KRjl6YdIX/qyBWCjuLY.js
import { jsx as _jsx } from "react/jsx-runtime";
import {
	addFonts,
	addPropertyControls,
	ControlType,
	cx,
	getLoadingLazyAtYPosition,
	Image,
	useComponentViewport,
	useLocaleInfo,
	useVariantState,
	withCSS,
} from "unframer";
import { LayoutGroup, motion, MotionConfigContext } from "unframer";
import * as React from "react";
import { useRef } from "react";
var cycleOrder = ["n3bPW7giz", "xCOIu7oZC"];
var serializationHash = "framer-jc5z4";
var variantClassNames = {
	n3bPW7giz: "framer-v-1stdu7h",
	xCOIu7oZC: "framer-v-1xsn8df",
};
function addPropertyOverrides(overrides, ...variants) {
	const nextOverrides = {};
	variants?.forEach(
		(variant) => variant && Object.assign(nextOverrides, overrides[variant]),
	);
	return nextOverrides;
}
var toResponsiveImage = (value) => {
	if (
		typeof value === "object" &&
		value !== null &&
		typeof value.src === "string"
	) {
		return value;
	}
	return typeof value === "string"
		? {
				src: value,
			}
		: void 0;
};
var transition1 = {
	bounce: 0.2,
	delay: 0,
	duration: 0.4,
	type: "spring",
};
var Transition = ({ value, children }) => {
	const config = React.useContext(MotionConfigContext);
	const transition = value ?? config.transition;
	const contextValue = React.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var Variants = motion.create(React.Fragment);
var humanReadableVariantMap = {
	"With ChainIcon": "xCOIu7oZC",
	Default: "n3bPW7giz",
};
var getProps = ({ appIcon, chainIcon, height, id, width, ...props }) => {
	return {
		...props,
		QowLVLBwn: appIcon ??
			props.QowLVLBwn ?? {
				pixelHeight: 120,
				pixelWidth: 120,
				src: "https://framerusercontent.com/images/IwScelHwHs6NE4F13gF9tXTmrg.svg?width=120&height=120",
			},
		rqwLR2Fiy: chainIcon ??
			props.rqwLR2Fiy ?? {
				pixelHeight: 512,
				pixelWidth: 512,
				src: "https://framerusercontent.com/images/bsRPNP7YUdm2u5tCuMjOv9n3Yk.png?width=512&height=512",
			},
		variant:
			humanReadableVariantMap[props.variant] ?? props.variant ?? "n3bPW7giz",
	};
};
var createLayoutDependency = (props, variants) => {
	if (props.layoutDependency)
		return variants.join("-") + props.layoutDependency;
	return variants.join("-");
};
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
	const fallbackRef = useRef(null);
	const refBinding = ref ?? fallbackRef;
	const defaultLayoutId = React.useId();
	const { activeLocale, setLocale } = useLocaleInfo();
	const componentViewport = useComponentViewport();
	const {
		style,
		className,
		layoutId,
		variant,
		rqwLR2Fiy,
		QowLVLBwn,
		...restProps
	} = getProps(props);
	const {
		baseVariant,
		classNames,
		clearLoadingGesture,
		gestureHandlers,
		gestureVariant,
		isLoading,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		cycleOrder,
		defaultVariant: "n3bPW7giz",
		ref: refBinding,
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const sharedStyleClassNames = [];
	const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames);
	const isDisplayed = () => {
		if (baseVariant === "xCOIu7oZC") return true;
		return false;
	};
	return (
		<LayoutGroup id={layoutId ?? defaultLayoutId}>
			<Variants animate={variants} initial={false}>
				<Transition value={transition1}>
					<Image
						{...restProps}
						{...gestureHandlers}
						background={{
							alt: "",
							fit: "fill",
							loading: getLoadingLazyAtYPosition(componentViewport?.y || 0),
							pixelHeight: 120,
							pixelWidth: 120,
							sizes: componentViewport?.width || "100vw",
							...toResponsiveImage(QowLVLBwn),
						}}
						className={cx(
							scopingClassNames,
							"framer-1stdu7h",
							className,
							classNames,
						)}
						data-border={true}
						data-framer-name={"Default"}
						layoutDependency={layoutDependency}
						layoutId={"n3bPW7giz"}
						ref={refBinding}
						style={{
							"--border-bottom-width": "1px",
							"--border-color":
								"var(--token-361e1224-4029-4612-a297-51f349511b71, rgba(255, 255, 255, 0.1))",
							"--border-left-width": "1px",
							"--border-right-width": "1px",
							"--border-style": "solid",
							"--border-top-width": "1px",
							borderBottomLeftRadius: 99,
							borderBottomRightRadius: 99,
							borderTopLeftRadius: 99,
							borderTopRightRadius: 99,
							...style,
						}}
						{...addPropertyOverrides(
							{
								xCOIu7oZC: {
									"data-framer-name": "With ChainIcon",
								},
							},
							baseVariant,
							gestureVariant,
						)}
					>
						{isDisplayed() && (
							<Image
								background={{
									alt: "",
									fit: "fill",
									pixelHeight: 512,
									pixelWidth: 512,
									...toResponsiveImage(rqwLR2Fiy),
								}}
								className={"framer-885fxn"}
								layoutDependency={layoutDependency}
								layoutId={"lXCeopMQd"}
								style={{
									borderBottomLeftRadius: 99,
									borderBottomRightRadius: 99,
									borderTopLeftRadius: 99,
									borderTopRightRadius: 99,
								}}
								{...addPropertyOverrides(
									{
										xCOIu7oZC: {
											background: {
												alt: "",
												fit: "fill",
												loading: getLoadingLazyAtYPosition(
													(componentViewport?.y || 0) + 12,
												),
												pixelHeight: 512,
												pixelWidth: 512,
												sizes: (componentViewport?.height || 24) - 12,
												...toResponsiveImage(rqwLR2Fiy),
											},
										},
									},
									baseVariant,
									gestureVariant,
								)}
							/>
						)}
					</Image>
				</Transition>
			</Variants>
		</LayoutGroup>
	);
});
var css = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-jc5z4.framer-oxehdr, .framer-jc5z4 .framer-oxehdr { display: block; }",
	".framer-jc5z4.framer-1stdu7h { align-content: center; align-items: center; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 0px; height: 24px; justify-content: center; overflow: visible; padding: 0px; position: relative; width: 24px; }",
	".framer-jc5z4 .framer-885fxn { align-content: center; align-items: center; aspect-ratio: 1 / 1; bottom: 0px; display: flex; flex: none; flex-direction: row; flex-wrap: nowrap; gap: 0px; justify-content: center; overflow: var(--overflow-clip-fallback, clip); padding: 0px; position: absolute; right: 0px; top: 12px; width: var(--framer-aspect-ratio-supported, 12px); will-change: var(--framer-will-change-override, transform); z-index: 1; }",
	'.framer-jc5z4[data-border="true"]::after, .framer-jc5z4 [data-border="true"]::after { content: ""; border-width: var(--border-top-width, 0) var(--border-right-width, 0) var(--border-bottom-width, 0) var(--border-left-width, 0); border-color: var(--border-color, none); border-style: var(--border-style, none); width: 100%; height: 100%; position: absolute; box-sizing: border-box; left: 0; top: 0; border-radius: inherit; pointer-events: none; }',
];
var FramerqyBWCjuLY = withCSS(Component, css, "framer-jc5z4");
var stdin_default = FramerqyBWCjuLY;
FramerqyBWCjuLY.displayName = "AppIcon";
FramerqyBWCjuLY.defaultProps = {
	height: 24,
	width: 24,
};
addPropertyControls(FramerqyBWCjuLY, {
	variant: {
		options: ["n3bPW7giz", "xCOIu7oZC"],
		optionTitles: ["Default", "With ChainIcon"],
		title: "Variant",
		type: ControlType.Enum,
	},
	rqwLR2Fiy: {
		__defaultAssetReference:
			"data:framer/asset-reference,bsRPNP7YUdm2u5tCuMjOv9n3Yk.png?originalFilename=optimism-bridge.png&width=512&height=512",
		title: "chainIcon",
		type: ControlType.ResponsiveImage,
	},
	QowLVLBwn: {
		__defaultAssetReference:
			"data:framer/asset-reference,IwScelHwHs6NE4F13gF9tXTmrg.svg?originalFilename=morpho.svg&width=120&height=120",
		title: "appIcon",
		type: ControlType.ResponsiveImage,
	},
});
addFonts(
	FramerqyBWCjuLY,
	[
		{
			explicitInter: true,
			fonts: [],
		},
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:app-icon
import { WithFramerBreakpoints } from "unframer";

// virtual:__routes
var routes = {
	Agq1L2jDe: {
		path: "/lib/careers/:slug",
	},
	DEi7PWhxw: {
		path: "/coming-soon",
	},
	J_r8CT7G7: {
		path: "/lib/about",
	},
	MiKvYzstd: {
		path: "/disconnect",
	},
	Mxb74mbpa: {
		path: "/verify-social",
	},
	OegBE_J9e: {
		path: "/lib/home",
	},
	SOf0RbDE_: {
		path: "/lib/blog",
	},
	TQDjkQC2A: {
		path: "/lib/contact",
	},
	UVAM5_4oX: {
		path: "/verify",
	},
	XanNBrFME: {
		path: "/kyc",
	},
	YBTUYW5mq: {
		path: "/lib/pricing",
	},
	a5CCfdDiy: {
		path: "/lib/updates/:slug",
	},
	augiA20Il: {
		path: "/",
	},
	cpP7I9WGp: {
		path: "/404",
	},
	e9YIc4Uv5: {
		path: "/lib/waitlist",
	},
	inNalAASs: {
		path: "/lib/blog/:slug",
	},
	ixIXvnG3U: {
		path: "/lib/legal/:slug",
	},
	nhNLVf3qq: {
		path: "/connections",
	},
	rX7FOhQc0: {
		path: "/lib/updates",
	},
	so5jTiDIE: {
		path: "/lib/careers",
	},
};

// virtual:app-icon
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {
	base: "xCOIu7oZC",
};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"c32b11589f2bc68bdb1b6d8b6f1517c87e280d7db56dec1009246311f93861da"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders AppIconFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"c32b11589f2bc68bdb1b6d8b6f1517c87e280d7db56dec1009246311f93861da"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default);
var app_icon_default = ComponentWithRoot;
export { app_icon_default as default };

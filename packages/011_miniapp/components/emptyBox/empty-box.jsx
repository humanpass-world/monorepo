// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project c32b11589f2bc68b "humanpass", do not edit manually */
"use client";

// virtual:empty-box
/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
 * text?: string // text
}} Props

 */
import { Fragment as Fragment3 } from "react";
import { ContextProviders } from "unframer";

// /:https://framerusercontent.com/modules/z4lTVk7UDbGun9CkR6JL/yYy0SJeh6cfz40lOraJp/sqo6JeB46.js
import { jsx as _jsx3, jsxs as _jsxs } from "react/jsx-runtime";
import {
	addFonts as addFonts2,
	addPropertyControls as addPropertyControls3,
	ComponentViewportProvider as ComponentViewportProvider2,
	ControlType as ControlType3,
	cx as cx2,
	getFonts as getFonts2,
	getFontsFromSharedStyle,
	RichText,
	SmartComponentScopedContainer as SmartComponentScopedContainer2,
	useComponentViewport as useComponentViewport2,
	useLocaleInfo as useLocaleInfo2,
	useVariantState as useVariantState2,
	withCSS as withCSS2,
} from "unframer";
import {
	LayoutGroup as LayoutGroup2,
	motion as motion2,
	MotionConfigContext as MotionConfigContext2,
} from "unframer";
import * as React2 from "react";
import { useRef as useRef3 } from "react";

// /:https://framerusercontent.com/modules/98ORxWqlwYbJSprEgxIC/flBGuhQnA9EJbbUQJTgQ/sQrIs9_t0.js
import { fontStore } from "unframer";
fontStore.loadFonts([
	"BI;Raveo Variable/variable/v0",
	"BI;Raveo Variable/variable/v0VF=Im9wc3oiIDE0LCAid2dodCIgNTUw",
	"BI;Raveo Variable/variable/v0VF=Im9wc3oiIDE0LCAid2dodCIgNTUw",
	"BI;Raveo Variable/variable/v0VF=Im9wc3oiIDE0LCAid2dodCIgNTUw",
]);
var variationAxes = [
	{
		defaultValue: 14,
		maxValue: 32,
		minValue: 14,
		name: "Optical size",
		tag: "opsz",
	},
	{
		defaultValue: 400,
		maxValue: 900,
		minValue: 100,
		name: "Weight",
		tag: "wght",
	},
];
var fonts = [
	{
		explicitInter: true,
		fonts: [
			{
				family: "Raveo Variable",
				source: "builtIn",
				style: "normal",
				url: "https://framerusercontent.com/assets/JEdA86oNqHX1i1CLD92Q7jTxV8.woff2",
				variationAxes,
				weight: "1000",
			},
		],
	},
];
var css = [
	'.framer-D0GFO .framer-styles-preset-ujo3da:not(.rich-text-wrapper), .framer-D0GFO .framer-styles-preset-ujo3da.rich-text-wrapper p { --framer-font-family: "Raveo Variable Variable", sans-serif; --framer-font-family-bold: "Raveo Variable Variable", sans-serif; --framer-font-family-bold-italic: "Raveo Variable Variable", sans-serif; --framer-font-family-italic: "Raveo Variable Variable", sans-serif; --framer-font-open-type-features: normal; --framer-font-size: 14px; --framer-font-style: normal; --framer-font-style-bold: normal; --framer-font-style-bold-italic: normal; --framer-font-style-italic: normal; --framer-font-variation-axes: "opsz" 14, "wght" 550; --framer-font-variation-axes-bold: "opsz" 14, "wght" 550; --framer-font-variation-axes-bold-italic: "opsz" 14, "wght" 550; --framer-font-variation-axes-italic: "opsz" 14, "wght" 550; --framer-font-weight: 1000; --framer-font-weight-bold: 1000; --framer-font-weight-bold-italic: 1000; --framer-font-weight-italic: 1000; --framer-letter-spacing: 0em; --framer-line-height: 1.5em; --framer-paragraph-spacing: 20px; --framer-text-alignment: left; --framer-text-color: var(--token-4fef9130-aa55-4351-8ed5-cfba481137a7, #ffffff); --framer-text-decoration: none; --framer-text-stroke-color: initial; --framer-text-stroke-width: initial; --framer-text-transform: none; }',
];
var className = "framer-D0GFO";

// /:https://framerusercontent.com/modules/Aiz0uzID7pYMsjYssJia/t8eq6ISHv76GcQTRprkL/ywmXeNfxF.js
import { jsx as _jsx2 } from "react/jsx-runtime";
import {
	addFonts,
	addPropertyControls as addPropertyControls2,
	ComponentViewportProvider,
	ControlType as ControlType2,
	cx,
	getFonts,
	SmartComponentScopedContainer,
	useComponentViewport,
	useLocaleInfo,
	useVariantState,
	withCSS,
} from "unframer";
import { LayoutGroup, motion, MotionConfigContext } from "unframer";
import * as React from "react";
import { useRef as useRef2 } from "react";

// /:https://framerusercontent.com/modules/XBWSgdKr3syOFOYW80i8/4FKsp3EPd3QDaqVONEJD/DashedBorder.js
import { jsx as _jsx } from "react/jsx-runtime";
import { useEffect, useRef, useState, useMemo, useCallback } from "react";
import { addPropertyControls, ControlType, RenderTarget } from "unframer";
function DashedBorderFrame(props) {
	const defaultProps = useMemo(
		() => ({
			borderColor: "#0099FF",
			borderWidth: 3,
			borderRadius: 16,
			dashLength: 12,
			gapLength: 8,
			animation: {
				animated: true,
				speed: 2,
				direction: "clockwise",
			},
			top: true,
			right: true,
			bottom: true,
			left: true,
		}),
		[],
	);
	const {
		borderColor = defaultProps.borderColor,
		borderWidth = defaultProps.borderWidth,
		borderRadius = defaultProps.borderRadius,
		dashLength = defaultProps.dashLength,
		gapLength = defaultProps.gapLength,
		animation = defaultProps.animation,
		style = {},
	} = props;
	const { animated, speed, direction } = animation;
	const uniqueIdRef = useRef(Math.random().toString(36).substr(2, 9));
	const animName = `dash-anim-${direction}-${uniqueIdRef.current}`;
	const minDuration = 0.1;
	const animationDuration = `${Math.max(minDuration, 2 / Math.max(0.01, speed))}s`;
	const containerRef = useRef(null);
	const resizeObserverRef = useRef(null);
	const [size, setSize] = useState({
		width: 400,
		height: 250,
	});
	const getCurrentSize = useCallback(() => {
		let w = 200,
			h = 100;
		if (!containerRef.current)
			return {
				width: w,
				height: h,
			};
		if (
			RenderTarget.current() === RenderTarget.canvas ||
			RenderTarget.current() === RenderTarget.thumbnail
		) {
			if (props.style && typeof props.style.width === "number")
				w = props.style.width;
			else w = containerRef.current.offsetWidth;
			if (props.style && typeof props.style.height === "number")
				h = props.style.height;
			else h = containerRef.current.offsetHeight;
		} else {
			const rect = containerRef.current.getBoundingClientRect();
			w = rect.width;
			h = rect.height;
		}
		return {
			width: w,
			height: h,
		};
	}, [props.style?.width, props.style?.height]);
	useEffect(() => {
		if (!containerRef.current) return;
		const updateSize = () => {
			const { width: w, height: h } = getCurrentSize();
			setSize((prev) =>
				prev.width !== w || prev.height !== h
					? {
							width: w,
							height: h,
						}
					: prev,
			);
		};
		updateSize();
		if (resizeObserverRef.current) {
			resizeObserverRef.current.disconnect();
		}
		resizeObserverRef.current = new window.ResizeObserver(updateSize);
		resizeObserverRef.current.observe(containerRef.current);
		return () => {
			if (resizeObserverRef.current) {
				resizeObserverRef.current.disconnect();
				resizeObserverRef.current = null;
			}
		};
	}, [getCurrentSize]);
	const width = size.width;
	const height = size.height;
	const bw = Math.max(1, Math.min(16, borderWidth));
	const normalizedRadius = useMemo(() => {
		if (typeof borderRadius === "number") return borderRadius;
		if (typeof borderRadius === "string") {
			if (borderRadius.endsWith("px")) return parseFloat(borderRadius);
			if (borderRadius.endsWith("%")) {
				const ratio = parseFloat(borderRadius) / 100;
				return Math.max(0, (ratio * Math.min(width, height)) / 2);
			}
			return parseFloat(borderRadius);
		}
		return 0;
	}, [borderRadius, width, height]);
	const half = bw / 2;
	const sides = useMemo(
		() => ({
			top: props.top ?? true,
			right: props.right ?? true,
			bottom: props.bottom ?? true,
			left: props.left ?? true,
		}),
		[props.top, props.right, props.bottom, props.left],
	);
	const perimeter = useMemo(() => {
		const maxR = Math.min(width - bw, height - bw) / 2;
		const cr = Math.max(0, Math.min(normalizedRadius, maxR));
		return 2 * (width - bw + height - bw - 4 * cr) + 2 * Math.PI * cr;
	}, [width, height, bw, normalizedRadius]);
	const patternLength = dashLength + gapLength;
	const animOffset = direction === "clockwise" ? -patternLength : patternLength;
	const getBorderPath = useCallback((w, h, bw2, r, sides2) => {
		const half2 = bw2 / 2;
		const maxR = Math.min(r, (w - bw2) / 2, (h - bw2) / 2);
		if (!sides2.top && !sides2.right && !sides2.bottom && !sides2.left)
			return "";
		if (sides2.top && sides2.right && sides2.bottom && sides2.left) {
			return [
				`M${half2 + maxR},${half2}`,
				`H${w - half2 - maxR}`,
				`A${maxR},${maxR} 0 0 1 ${w - half2},${half2 + maxR}`,
				`V${h - half2 - maxR}`,
				`A${maxR},${maxR} 0 0 1 ${w - half2 - maxR},${h - half2}`,
				`H${half2 + maxR}`,
				`A${maxR},${maxR} 0 0 1 ${half2},${h - half2 - maxR}`,
				`V${half2 + maxR}`,
				`A${maxR},${maxR} 0 0 1 ${half2 + maxR},${half2}`,
				"Z",
			].join(" ");
		}
		let d = "";
		if (sides2.top) {
			d += `M${half2 + maxR},${half2} H${w - half2 - maxR} `;
			if (sides2.right && maxR > 0) {
				d += `A${maxR},${maxR} 0 0 1 ${w - half2},${half2 + maxR} `;
			}
		}
		if (sides2.right) {
			d += `M${w - half2},${half2 + maxR} V${h - half2 - maxR} `;
			if (sides2.bottom && maxR > 0) {
				d += `A${maxR},${maxR} 0 0 1 ${w - half2 - maxR},${h - half2} `;
			}
		}
		if (sides2.bottom) {
			d += `M${w - half2 - maxR},${h - half2} H${half2 + maxR} `;
			if (sides2.left && maxR > 0) {
				d += `A${maxR},${maxR} 0 0 1 ${half2},${h - half2 - maxR} `;
			}
		}
		if (sides2.left) {
			d += `M${half2},${h - half2 - maxR} V${half2 + maxR} `;
			if (sides2.top && maxR > 0) {
				d += `A${maxR},${maxR} 0 0 1 ${half2 + maxR},${half2} `;
			}
		}
		return d.trim();
	}, []);
	const borderPath = useMemo(
		() => getBorderPath(width, height, bw, normalizedRadius, sides),
		[width, height, bw, normalizedRadius, sides, getBorderPath],
	);
	const [animationReady, setAnimationReady] = useState(false);
	useEffect(() => {
		setAnimationReady(false);
		const styleId = `dashed-border-keyframes-${direction}-${uniqueIdRef.current}`;
		let styleEl = null;
		if (typeof document !== "undefined") {
			styleEl = document.getElementById(styleId);
			if (!styleEl) {
				styleEl = document.createElement("style");
				styleEl.id = styleId;
				document.head.appendChild(styleEl);
			}
			styleEl.innerHTML = `
                @keyframes ${animName} {
                    100% {
                        stroke-dashoffset: ${animOffset};
                    }
                }
            `;
			setTimeout(() => setAnimationReady(true), 0);
		}
		return () => {
			if (styleEl && styleEl.parentNode) {
				styleEl.parentNode.removeChild(styleEl);
			}
		};
	}, [direction, animName, animOffset]);
	const [visible, setVisible] = useState(false);
	useEffect(() => {
		const loaded =
			props.borderColor !== defaultProps.borderColor ||
			props.borderWidth !== defaultProps.borderWidth ||
			props.borderRadius !== defaultProps.borderRadius ||
			props.dashLength !== defaultProps.dashLength ||
			props.gapLength !== defaultProps.gapLength ||
			(props.animation &&
				(props.animation.animated !== defaultProps.animation.animated ||
					props.animation.speed !== defaultProps.animation.speed ||
					props.animation.direction !== defaultProps.animation.direction)) ||
			props.top !== defaultProps.top ||
			props.right !== defaultProps.right ||
			props.bottom !== defaultProps.bottom ||
			props.left !== defaultProps.left;
		if (loaded && !visible) {
			setTimeout(() => setVisible(true), 10);
		}
	}, [
		props.borderColor,
		props.borderWidth,
		props.borderRadius,
		props.dashLength,
		props.gapLength,
		props.animation,
		props.top,
		props.right,
		props.bottom,
		props.left,
		visible,
		defaultProps,
	]);
	return (
		<div
			ref={containerRef}
			style={{
				...style,
				minWidth: 20,
				minHeight: 20,
				width: "100%",
				height: "100%",
				position: "relative",
				background: "transparent",
				borderRadius,
				overflow: "visible",
				pointerEvents: "none",
				opacity: visible ? 1 : 0,
				transition: visible ? "opacity 0.4s cubic-bezier(.4,0,.2,1)" : void 0,
			}}
		>
			<svg
				width={width}
				height={height}
				viewBox={`0 0 ${width} ${height}`}
				style={{
					position: "absolute",
					top: 0,
					left: 0,
					width: "100%",
					height: "100%",
					pointerEvents: "none",
				}}
				aria-hidden={"true"}
				preserveAspectRatio={"none"}
			>
				<path
					d={borderPath}
					fill={"none"}
					stroke={borderColor}
					strokeWidth={bw}
					strokeDasharray={`${dashLength},${gapLength}`}
					strokeDashoffset={0}
					style={{
						animation:
							!animated ||
							RenderTarget.current() === RenderTarget.canvas ||
							RenderTarget.current() === RenderTarget.thumbnail ||
							!animationReady
								? "none"
								: `${animName} ${animationDuration} linear infinite`,
					}}
				/>
			</svg>
		</div>
	);
}
DashedBorderFrame.displayName = "Animated Dashed Border";
addPropertyControls(DashedBorderFrame, {
	borderColor: {
		type: ControlType.Color,
		title: "Dash Color",
		defaultValue: "#0099FF",
	},
	borderWidth: {
		type: ControlType.Number,
		title: "Thickness",
		defaultValue: 3,
		min: 1,
		max: 16,
		step: 1,
		displayStepper: true,
	},
	borderRadius: {
		type: ControlType.Number,
		title: "Radius",
		defaultValue: 16,
		min: 0,
		max: 200,
		step: 1,
		displayStepper: false,
	},
	dashLength: {
		type: ControlType.Number,
		title: "Dash",
		defaultValue: 12,
		min: 2,
		max: 40,
		step: 1,
	},
	gapLength: {
		type: ControlType.Number,
		title: "Gap",
		defaultValue: 8,
		min: 0,
		max: 40,
		step: 1,
	},
	top: {
		type: ControlType.Boolean,
		title: "Top",
		defaultValue: true,
		enabledTitle: "Yes",
		disabledTitle: "No",
	},
	right: {
		type: ControlType.Boolean,
		title: "Right",
		defaultValue: true,
		enabledTitle: "Yes",
		disabledTitle: "No",
	},
	bottom: {
		type: ControlType.Boolean,
		title: "Bottom",
		defaultValue: true,
		enabledTitle: "Yes",
		disabledTitle: "No",
	},
	left: {
		type: ControlType.Boolean,
		title: "Left",
		defaultValue: true,
		enabledTitle: "Yes",
		disabledTitle: "No",
	},
	animation: {
		type: ControlType.Object,
		title: "Animation",
		controls: {
			animated: {
				type: ControlType.Boolean,
				title: "Animated",
				defaultValue: true,
				enabledTitle: "On",
				disabledTitle: "Off",
			},
			speed: {
				type: ControlType.Number,
				title: "Speed",
				defaultValue: 2,
				min: 0.1,
				max: 10,
				step: 0.1,
				hidden: (obj) => !obj.animated,
			},
			direction: {
				type: ControlType.Enum,
				title: "Direction",
				options: ["clockwise", "counterclockwise"],
				optionTitles: ["Clockwise", "Counterclockwise"],
				defaultValue: "clockwise",
				displaySegmentedControl: true,
				segmentedControlDirection: "vertical",
				hidden: (obj) => !obj.animated,
			},
		},
		defaultValue: {
			animated: true,
			speed: 2,
			direction: "clockwise",
		},
	},
});

// /:https://framerusercontent.com/modules/Aiz0uzID7pYMsjYssJia/t8eq6ISHv76GcQTRprkL/ywmXeNfxF.js
var AnimatedDashedBorderFonts = getFonts(DashedBorderFrame);
var cycleOrder = [
	"dNbszlCS9",
	"yzIFdYlxZ",
	"tETbP_pro",
	"oSdwqWnmP",
	"NmV6whLcj",
	"PsAciZ2BM",
	"CLljGfTtP",
	"dmlAwRaBe",
	"HWEDASjkO",
	"yQxqYG67k",
];
var serializationHash = "framer-aTu1i";
var variantClassNames = {
	CLljGfTtP: "framer-v-1mlrwuf",
	dmlAwRaBe: "framer-v-yl5zu4",
	dNbszlCS9: "framer-v-z8k7b0",
	HWEDASjkO: "framer-v-8evypz",
	NmV6whLcj: "framer-v-1nqlqan",
	oSdwqWnmP: "framer-v-1qeerv",
	PsAciZ2BM: "framer-v-guq2e5",
	tETbP_pro: "framer-v-p1jozm",
	yQxqYG67k: "framer-v-1ffme69",
	yzIFdYlxZ: "framer-v-1arqcmi",
};
function addPropertyOverrides(overrides, ...variants) {
	const nextOverrides = {};
	variants?.forEach(
		(variant) => variant && Object.assign(nextOverrides, overrides[variant]),
	);
	return nextOverrides;
}
var transition1 = {
	bounce: 0,
	delay: 0,
	duration: 0.4,
	type: "spring",
};
var Transition = ({ value, children }) => {
	const config = React.useContext(MotionConfigContext);
	const transition = value ?? config.transition;
	const contextValue = React.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var Variants = motion.create(React.Fragment);
var humanReadableVariantMap = {
	"Left Right": "yQxqYG67k",
	"Right Bottom": "yzIFdYlxZ",
	"Top Bottom": "HWEDASjkO",
	"Top Left": "dNbszlCS9",
	All: "CLljGfTtP",
	Bottom: "oSdwqWnmP",
	Left: "tETbP_pro",
	Right: "NmV6whLcj",
	Top: "PsAciZ2BM",
};
var getProps = ({ height, id, width, ...props }) => {
	return {
		...props,
		variant:
			humanReadableVariantMap[props.variant] ?? props.variant ?? "dNbszlCS9",
	};
};
var createLayoutDependency = (props, variants) => {
	if (props.layoutDependency)
		return variants.join("-") + props.layoutDependency;
	return variants.join("-");
};
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
	const fallbackRef = useRef2(null);
	const refBinding = ref ?? fallbackRef;
	const defaultLayoutId = React.useId();
	const { activeLocale, setLocale } = useLocaleInfo();
	const componentViewport = useComponentViewport();
	const {
		style,
		className: className2,
		layoutId,
		variant,
		...restProps
	} = getProps(props);
	const {
		baseVariant,
		classNames,
		clearLoadingGesture,
		gestureHandlers,
		gestureVariant,
		isLoading,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		cycleOrder,
		defaultVariant: "dNbszlCS9",
		ref: refBinding,
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const sharedStyleClassNames = [];
	const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames);
	return (
		<LayoutGroup id={layoutId ?? defaultLayoutId}>
			<Variants animate={variants} initial={false}>
				<Transition value={transition1}>
					<motion.div
						{...restProps}
						{...gestureHandlers}
						className={cx(
							scopingClassNames,
							"framer-z8k7b0",
							className2,
							classNames,
						)}
						data-framer-name={"Top Left"}
						layoutDependency={layoutDependency}
						layoutId={"dNbszlCS9"}
						ref={refBinding}
						style={{
							...style,
						}}
						{...addPropertyOverrides(
							{
								CLljGfTtP: {
									"data-framer-name": "All",
								},
								dmlAwRaBe: {
									"data-framer-name": "Left Right",
								},
								HWEDASjkO: {
									"data-framer-name": "Top Bottom",
								},
								NmV6whLcj: {
									"data-framer-name": "Right",
								},
								oSdwqWnmP: {
									"data-framer-name": "Bottom",
								},
								PsAciZ2BM: {
									"data-framer-name": "Top",
								},
								tETbP_pro: {
									"data-framer-name": "Left",
								},
								yQxqYG67k: {
									"data-framer-name": "Left Right",
								},
								yzIFdYlxZ: {
									"data-framer-name": "Right Bottom",
								},
							},
							baseVariant,
							gestureVariant,
						)}
					>
						<ComponentViewportProvider>
							<SmartComponentScopedContainer
								className={"framer-ugmoae-container"}
								isAuthoredByUser={true}
								isModuleExternal={true}
								layoutDependency={layoutDependency}
								layoutId={"EHPmwsEKd-container"}
								nodeId={"EHPmwsEKd"}
								rendersWithMotion={true}
								scopeId={"ywmXeNfxF"}
							>
								<DashedBorderFrame
									animation={{
										animated: true,
										direction: "clockwise",
										speed: 2,
									}}
									borderColor={
										"var(--token-ab91763a-bd8d-4b8f-92c1-f89e2462855c, rgb(28, 28, 28))"
									}
									borderRadius={0}
									borderWidth={1}
									bottom={false}
									dashLength={12}
									gapLength={6}
									height={"100%"}
									id={"EHPmwsEKd"}
									layoutId={"EHPmwsEKd"}
									left={true}
									right={false}
									style={{
										height: "100%",
										width: "100%",
									}}
									top={true}
									width={"100%"}
									{...addPropertyOverrides(
										{
											CLljGfTtP: {
												borderRadius: 12,
												bottom: true,
												right: true,
											},
											dmlAwRaBe: {
												right: true,
												top: false,
											},
											HWEDASjkO: {
												bottom: true,
												left: false,
											},
											NmV6whLcj: {
												left: false,
												right: true,
												top: false,
											},
											oSdwqWnmP: {
												bottom: true,
												left: false,
												top: false,
											},
											PsAciZ2BM: {
												left: false,
											},
											tETbP_pro: {
												top: false,
											},
											yQxqYG67k: {
												right: true,
												top: false,
											},
											yzIFdYlxZ: {
												bottom: true,
												left: false,
												right: true,
												top: false,
											},
										},
										baseVariant,
										gestureVariant,
									)}
								/>
							</SmartComponentScopedContainer>
						</ComponentViewportProvider>
					</motion.div>
				</Transition>
			</Variants>
		</LayoutGroup>
	);
});
var css2 = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-aTu1i.framer-6eel1k, .framer-aTu1i .framer-6eel1k { display: block; }",
	".framer-aTu1i.framer-z8k7b0 { align-content: center; align-items: center; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 10px; height: 360px; justify-content: center; overflow: hidden; padding: 0px; position: relative; width: 499px; }",
	".framer-aTu1i .framer-ugmoae-container { flex: 1 0 0px; height: 100%; pointer-events: none; position: relative; width: 1px; }",
];
var FramerywmXeNfxF = withCSS(Component, css2, "framer-aTu1i");
var stdin_default = FramerywmXeNfxF;
FramerywmXeNfxF.displayName = "Main Site Grid Border";
FramerywmXeNfxF.defaultProps = {
	height: 360,
	width: 499,
};
addPropertyControls2(FramerywmXeNfxF, {
	variant: {
		options: [
			"dNbszlCS9",
			"yzIFdYlxZ",
			"tETbP_pro",
			"oSdwqWnmP",
			"NmV6whLcj",
			"PsAciZ2BM",
			"CLljGfTtP",
			"dmlAwRaBe",
			"HWEDASjkO",
			"yQxqYG67k",
		],
		optionTitles: [
			"Top Left",
			"Right Bottom",
			"Left",
			"Bottom",
			"Right",
			"Top",
			"All",
			"Left Right",
			"Top Bottom",
			"Left Right",
		],
		title: "Variant",
		type: ControlType2.Enum,
	},
});
addFonts(
	FramerywmXeNfxF,
	[
		{
			explicitInter: true,
			fonts: [],
		},
		...AnimatedDashedBorderFonts,
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// /:https://framerusercontent.com/modules/z4lTVk7UDbGun9CkR6JL/yYy0SJeh6cfz40lOraJp/sqo6JeB46.js
var MainSiteGridBorderFonts = getFonts2(stdin_default);
var serializationHash2 = "framer-aigtM";
var variantClassNames2 = {
	vRLFzQ1kG: "framer-v-1hr64qx",
};
var transition12 = {
	bounce: 0.2,
	delay: 0,
	duration: 0.4,
	type: "spring",
};
var Transition2 = ({ value, children }) => {
	const config = React2.useContext(MotionConfigContext2);
	const transition = value ?? config.transition;
	const contextValue = React2.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext2.Provider value={contextValue}>
			{children}
		</MotionConfigContext2.Provider>
	);
};
var Variants2 = motion2.create(React2.Fragment);
var getProps2 = ({ height, id, text, width, ...props }) => {
	return {
		...props,
		jg2ePm0eI: text ?? props.jg2ePm0eI ?? "No wallets connected",
	};
};
var createLayoutDependency2 = (props, variants) => {
	if (props.layoutDependency)
		return variants.join("-") + props.layoutDependency;
	return variants.join("-");
};
var Component2 = /* @__PURE__ */ React2.forwardRef(function (props, ref) {
	const fallbackRef = useRef3(null);
	const refBinding = ref ?? fallbackRef;
	const defaultLayoutId = React2.useId();
	const { activeLocale, setLocale } = useLocaleInfo2();
	const componentViewport = useComponentViewport2();
	const {
		style,
		className: className2,
		layoutId,
		variant,
		jg2ePm0eI,
		...restProps
	} = getProps2(props);
	const {
		baseVariant,
		classNames,
		clearLoadingGesture,
		gestureHandlers,
		gestureVariant,
		isLoading,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState2({
		defaultVariant: "vRLFzQ1kG",
		ref: refBinding,
		variant,
		variantClassNames: variantClassNames2,
	});
	const layoutDependency = createLayoutDependency2(props, variants);
	const sharedStyleClassNames = [className];
	const scopingClassNames = cx2(serializationHash2, ...sharedStyleClassNames);
	return (
		<LayoutGroup2 id={layoutId ?? defaultLayoutId}>
			<Variants2 animate={variants} initial={false}>
				<Transition2 value={transition12}>
					<motion2.div
						{...restProps}
						{...gestureHandlers}
						className={cx2(
							scopingClassNames,
							"framer-1hr64qx",
							className2,
							classNames,
						)}
						data-framer-name={"Default"}
						layoutDependency={layoutDependency}
						layoutId={"vRLFzQ1kG"}
						ref={refBinding}
						style={{
							...style,
						}}
					>
						<motion2.div
							className={"framer-1l4aw5v"}
							data-framer-name={"Text"}
							layoutDependency={layoutDependency}
							layoutId={"hWBzqmwvI"}
						>
							<RichText
								__fromCanvasComponent={true}
								className={"framer-bwai6a"}
								fonts={["Inter"]}
								layoutDependency={layoutDependency}
								layoutId={"UFg85gsld"}
								style={{
									"--extracted-r6o4lv":
										"var(--token-311dfa1b-5054-44c6-8b55-ece1611bbe6a, rgba(255, 255, 255, 0.3))",
									"--framer-link-text-color": "rgb(0, 153, 255)",
									"--framer-link-text-decoration": "underline",
								}}
								text={jg2ePm0eI}
								verticalAlignment={"top"}
								withExternalLayout={true}
							>
								<React2.Fragment>
									<motion2.p
										className={"framer-styles-preset-ujo3da"}
										data-styles-preset={"sQrIs9_t0"}
										style={{
											"--framer-text-alignment": "center",
											"--framer-text-color":
												"var(--extracted-r6o4lv, var(--token-311dfa1b-5054-44c6-8b55-ece1611bbe6a, rgba(255, 255, 255, 0.3)))",
										}}
									>
										<motion2.code>{"No wallets connected"}</motion2.code>
									</motion2.p>
								</React2.Fragment>
							</RichText>
						</motion2.div>
						<ComponentViewportProvider2
							height={(componentViewport?.height || 69) * 1}
							width={componentViewport?.width || "100vw"}
							y={
								(componentViewport?.y || 0) +
								((componentViewport?.height || 69) * 0.5045045045045047 -
									((componentViewport?.height || 69) * 1) / 2)
							}
						>
							<SmartComponentScopedContainer2
								className={"framer-1mhn4xn-container"}
								layoutDependency={layoutDependency}
								layoutId={"WYSTbptup-container"}
								nodeId={"WYSTbptup"}
								rendersWithMotion={true}
								scopeId={"sqo6JeB46"}
							>
								{_jsx3(stdin_default, {
									height: "100%",
									id: "WYSTbptup",
									layoutId: "WYSTbptup",
									style: {
										height: "100%",
										width: "100%",
									},
									variant: "CLljGfTtP",
									width: "100%",
								})}
							</SmartComponentScopedContainer2>
						</ComponentViewportProvider2>
					</motion2.div>
				</Transition2>
			</Variants2>
		</LayoutGroup2>
	);
});
var css3 = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-aigtM.framer-1a98mbe, .framer-aigtM .framer-1a98mbe { display: block; }",
	".framer-aigtM.framer-1hr64qx { align-content: center; align-items: center; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 14px; height: min-content; justify-content: center; overflow: visible; padding: 24px 16px 24px 16px; position: relative; width: 200px; }",
	".framer-aigtM .framer-1l4aw5v { align-content: flex-start; align-items: flex-start; display: flex; flex: 1 0 0px; flex-direction: column; flex-wrap: nowrap; gap: 0px; height: min-content; justify-content: center; overflow: hidden; padding: 0px; position: relative; width: 1px; z-index: 4; }",
	".framer-aigtM .framer-bwai6a { flex: none; height: auto; position: relative; white-space: pre-wrap; width: 100%; word-break: break-word; word-wrap: break-word; }",
	".framer-aigtM .framer-1mhn4xn-container { -webkit-user-select: none; flex: none; height: 100%; left: calc(50.00000000000002% - 100% / 2); pointer-events: none; position: absolute; top: calc(50.45045045045047% - 100% / 2); user-select: none; width: 100%; z-index: 2; }",
	...css,
];
var Framersqo6JeB46 = withCSS2(Component2, css3, "framer-aigtM");
var stdin_default2 = Framersqo6JeB46;
Framersqo6JeB46.displayName = "emptyBox";
Framersqo6JeB46.defaultProps = {
	height: 69,
	width: 200,
};
addPropertyControls3(Framersqo6JeB46, {
	jg2ePm0eI: {
		defaultValue: "No wallets connected",
		displayTextArea: false,
		title: "text",
		type: ControlType3.String,
	},
});
addFonts2(
	Framersqo6JeB46,
	[
		{
			explicitInter: true,
			fonts: [
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F",
					url: "https://framerusercontent.com/assets/5vvr9Vy74if2I6bQbJvbw7SY1pQ.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116",
					url: "https://framerusercontent.com/assets/EOr0mi4hNtlgWNn9if640EZzXCo.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+1F00-1FFF",
					url: "https://framerusercontent.com/assets/Y9k9QrlZAqio88Klkmbd8VoMQc.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+0370-03FF",
					url: "https://framerusercontent.com/assets/OYrD2tBIBPvoJXiIHnLoOXnY9M.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF",
					url: "https://framerusercontent.com/assets/JeYwfuaPfZHQhEG8U5gtPDZ7WQ.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2070, U+2074-207E, U+2080-208E, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD",
					url: "https://framerusercontent.com/assets/GrgcKwrN6d3Uz8EwcLHZxwEfC4.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB",
					url: "https://framerusercontent.com/assets/b6Y37FthZeALduNqHicBT6FutY.woff2",
					weight: "400",
				},
			],
		},
		...MainSiteGridBorderFonts,
		...getFontsFromSharedStyle(fonts),
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:empty-box
import { WithFramerBreakpoints } from "unframer";

// virtual:__routes
var routes = {
	Agq1L2jDe: {
		path: "/lib/careers/:slug",
	},
	DEi7PWhxw: {
		path: "/done/coming-soon",
	},
	J_r8CT7G7: {
		path: "/lib/about",
	},
	MiKvYzstd: {
		path: "/done/disconnect",
	},
	Mxb74mbpa: {
		path: "/done/verify-social",
	},
	OegBE_J9e: {
		path: "/lib/home",
	},
	SOf0RbDE_: {
		path: "/lib/blog",
	},
	TQDjkQC2A: {
		path: "/lib/contact",
	},
	UVAM5_4oX: {
		path: "/done/verify",
	},
	XanNBrFME: {
		path: "/kyc",
	},
	YBTUYW5mq: {
		path: "/lib/pricing",
	},
	a5CCfdDiy: {
		path: "/lib/updates/:slug",
	},
	augiA20Il: {
		path: "/",
	},
	cpP7I9WGp: {
		path: "/done/404",
	},
	e9YIc4Uv5: {
		path: "/lib/waitlist",
	},
	inNalAASs: {
		path: "/lib/blog/:slug",
	},
	ixIXvnG3U: {
		path: "/lib/legal/:slug",
	},
	nhNLVf3qq: {
		path: "/connections",
	},
	rX7FOhQc0: {
		path: "/lib/updates",
	},
	so5jTiDIE: {
		path: "/lib/careers",
	},
};

// virtual:empty-box
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"c32b11589f2bc68bdb1b6d8b6f1517c87e280d7db56dec1009246311f93861da"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default2, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders EmptyBoxFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"c32b11589f2bc68bdb1b6d8b6f1517c87e280d7db56dec1009246311f93861da"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default2}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default2);
var empty_box_default = ComponentWithRoot;
export { empty_box_default as default };

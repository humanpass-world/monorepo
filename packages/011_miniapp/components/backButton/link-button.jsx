// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project c32b11589f2bc68b "humanpass", do not edit manually */
"use client";

// virtual:link-button
/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
 * variant?: 'Left Icon' | 'Right Icon' // Variant
 * label?: string // Label
}} Props

 */
import { ContextProviders } from "unframer";

// /:https://framerusercontent.com/modules/qFN2CSltK1GaZKZUBVKv/0fD2hsdO48P1J6EJzEen/T9Ghiu5oW.js
import * as React2 from "react";
import { useRef as useRef3 } from "react";
import { jsx as _jsx4 } from "react/jsx-runtime";
import {
  addFonts,
  addPropertyControls as addPropertyControls4,
  ComponentViewportProvider,
  ControlType as ControlType4,
  cx as cx2,
  getFonts,
  LayoutGroup,
  motion as motion2,
  MotionConfigContext,
  RichText,
  SmartComponentScopedContainer,
  useComponentViewport,
  useLocaleInfo,
  useVariantState,
  withCSS as withCSS2,
} from "unframer";

// /:https://framerusercontent.com/modules/1oMTLy48mQlkHUIQamxl/LQz0SsKx4UpdYoEs5F0b/TextGlitch.js
import { useEffect, useRef, useState } from "react";
import { addPropertyControls, ControlType, RenderTarget } from "unframer";
var DEFAULT_SCRAMBLE_CHARS =
  "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+-=[]{}|;:,.<>?";
function TextGlitch(props) {
  const { text, font, color, scrambleColor, duration, style, glitch } = props;
  const [display, setDisplay] = useState(text);
  const [scrambling, setScrambling] = useState(false);
  const intervalRef = useRef(null);
  const timeoutRef = useRef(null);
  const chars = (props.scrambleChars || DEFAULT_SCRAMBLE_CHARS).split("");
  useEffect(() => {
    if (!glitch) {
      setDisplay(text);
      setScrambling(false);
      return;
    }
    if (RenderTarget.current() !== RenderTarget.preview) {
      setDisplay(text);
      setScrambling(false);
      return;
    }
    if (RenderTarget.current() === RenderTarget.thumbnail) {
      setDisplay(text);
      setScrambling(false);
      return;
    }
    setDisplay(text);
    setScrambling(true);
    let frame = 0;
    const scramble = () => {
      const percent = Math.max(0, Math.min(100, props.scramblePercent ?? 100));
      let scrambled = text
        .split("")
        .map((c, i) => {
          if (c === " ") return c;
          if (Math.random() * 100 > percent) return c;
          return `<span data-scramble="1">${
            chars[Math.floor(Math.random() * chars.length)]
          }</span>`;
        })
        .join("");
      setDisplay(scrambled);
      frame++;
    };
    intervalRef.current = window.setInterval(scramble, props.speed || 40);
    timeoutRef.current = window.setTimeout(() => {
      if (intervalRef.current) clearInterval(intervalRef.current);
      setDisplay(text);
      setScrambling(false);
    }, duration);
    return () => {
      if (intervalRef.current) clearInterval(intervalRef.current);
      if (timeoutRef.current) clearTimeout(timeoutRef.current);
    };
  }, [text, duration, glitch, props.scrambleChars]);
  function renderText() {
    const { weight, optical } = props.variable || {
      weight: 400,
      optical: 22,
    };
    const fontVariation = {
      fontWeight: weight,
      fontVariationSettings: `'wght' ${weight}, 'opsz' ${optical}`,
    };
    const styleBase = {
      ...font,
      color,
      ...fontVariation,
    };
    if (!scrambling) return <span style={styleBase}>{text}</span>;
    const parts = display.split(/(<span data-scramble="1">.*?<\/span>)/g);
    return (
      <span style={styleBase}>
        {parts.map((part, i) => {
          if (part.startsWith('<span data-scramble="1">')) {
            const letter = part.replace(/<.*?>/g, "");
            return (
              <span
                style={{
                  color: scrambleColor,
                }}
              >
                {letter}
              </span>
            );
          }
          return <span>{part}</span>;
        })}
      </span>
    );
  }
  const isFixedWidth = style && style.width === "100%";
  const isFixedHeight = style && style.height === "100%";
  return (
    <div
      style={{
        ...style,
        position: "relative",
        width: isFixedWidth ? "100%" : "max-content",
        minWidth: isFixedWidth ? void 0 : "max-content",
        height: isFixedHeight ? "100%" : void 0,
      }}
    >
      {renderText()}
    </div>
  );
}
TextGlitch.displayName = "Text Glitch";
addPropertyControls(TextGlitch, {
  text: {
    type: ControlType.String,
    title: "Text",
    defaultValue: "Scramble Me!",
  },
  font: {
    type: ControlType.Font,
    title: "Font",
    controls: "extended",
    defaultFontType: "sans-serif",
    defaultValue: {
      fontSize: 22,
      variant: "Semibold",
      letterSpacing: "-0.01em",
      lineHeight: "1.2em",
    },
  },
  variable: {
    type: ControlType.Object,
    title: "Variable",
    controls: {
      optical: {
        type: ControlType.Number,
        title: "Optical",
        defaultValue: 22,
        min: 14,
        max: 32,
        step: 1,
      },
      weight: {
        type: ControlType.Number,
        title: "Weight",
        defaultValue: 400,
        min: 100,
        max: 900,
        step: 1,
      },
    },
    defaultValue: {
      optical: 22,
      weight: 400,
    },
  },
  color: {
    type: ControlType.Color,
    title: "Color",
    defaultValue: "#000000",
  },
  scrambleColor: {
    type: ControlType.Color,
    title: "Scrambled",
    defaultValue: "#8855FF",
  },
  scrambleChars: {
    // <-- Add the control
    type: ControlType.String,
    title: "Chars",
    defaultValue: DEFAULT_SCRAMBLE_CHARS,
    displayTextArea: true,
  },
  scramblePercent: {
    type: ControlType.Number,
    title: "Scramble %",
    defaultValue: 100,
    min: 0,
    max: 100,
    unit: "%",
    step: 1,
  },
  speed: {
    type: ControlType.Number,
    title: "Speed",
    defaultValue: 40,
    min: 10,
    max: 200,
    unit: "ms",
    step: 1,
  },
  duration: {
    type: ControlType.Number,
    title: "Duration",
    defaultValue: 1200,
    min: 200,
    max: 5e3,
    unit: "ms",
    step: 50,
  },
  glitch: {
    type: ControlType.Boolean,
    title: "Glitch",
    enabledTitle: "Yes",
    disabledTitle: "No",
    defaultValue: true,
  },
});

// /:https://framerusercontent.com/modules/XBWSgdKr3syOFOYW80i8/4FKsp3EPd3QDaqVONEJD/DashedBorder.js
import {
  useCallback,
  useEffect as useEffect2,
  useMemo,
  useRef as useRef2,
  useState as useState2,
} from "react";
import {
  addPropertyControls as addPropertyControls2,
  ControlType as ControlType2,
  RenderTarget as RenderTarget2,
} from "unframer";
function DashedBorderFrame(props) {
  const defaultProps = useMemo(
    () => ({
      borderColor: "#0099FF",
      borderWidth: 3,
      borderRadius: 16,
      dashLength: 12,
      gapLength: 8,
      animation: {
        animated: true,
        speed: 2,
        direction: "clockwise",
      },
      top: true,
      right: true,
      bottom: true,
      left: true,
    }),
    []
  );
  const {
    borderColor = defaultProps.borderColor,
    borderWidth = defaultProps.borderWidth,
    borderRadius = defaultProps.borderRadius,
    dashLength = defaultProps.dashLength,
    gapLength = defaultProps.gapLength,
    animation = defaultProps.animation,
    style = {},
  } = props;
  const { animated, speed, direction } = animation;
  const uniqueIdRef = useRef2(Math.random().toString(36).substr(2, 9));
  const animName = `dash-anim-${direction}-${uniqueIdRef.current}`;
  const minDuration = 0.1;
  const animationDuration = `${Math.max(
    minDuration,
    2 / Math.max(0.01, speed)
  )}s`;
  const containerRef = useRef2(null);
  const resizeObserverRef = useRef2(null);
  const [size, setSize] = useState2({
    width: 400,
    height: 250,
  });
  const getCurrentSize = useCallback(() => {
    let w = 200,
      h = 100;
    if (!containerRef.current)
      return {
        width: w,
        height: h,
      };
    if (
      RenderTarget2.current() === RenderTarget2.canvas ||
      RenderTarget2.current() === RenderTarget2.thumbnail
    ) {
      if (props.style && typeof props.style.width === "number")
        w = props.style.width;
      else w = containerRef.current.offsetWidth;
      if (props.style && typeof props.style.height === "number")
        h = props.style.height;
      else h = containerRef.current.offsetHeight;
    } else {
      const rect = containerRef.current.getBoundingClientRect();
      w = rect.width;
      h = rect.height;
    }
    return {
      width: w,
      height: h,
    };
  }, [props.style?.width, props.style?.height]);
  useEffect2(() => {
    if (!containerRef.current) return;
    const updateSize = () => {
      const { width: w, height: h } = getCurrentSize();
      setSize((prev) =>
        prev.width !== w || prev.height !== h
          ? {
              width: w,
              height: h,
            }
          : prev
      );
    };
    updateSize();
    if (resizeObserverRef.current) {
      resizeObserverRef.current.disconnect();
    }
    resizeObserverRef.current = new window.ResizeObserver(updateSize);
    resizeObserverRef.current.observe(containerRef.current);
    return () => {
      if (resizeObserverRef.current) {
        resizeObserverRef.current.disconnect();
        resizeObserverRef.current = null;
      }
    };
  }, [getCurrentSize]);
  const width = size.width;
  const height = size.height;
  const bw = Math.max(1, Math.min(16, borderWidth));
  const normalizedRadius = useMemo(() => {
    if (typeof borderRadius === "number") return borderRadius;
    if (typeof borderRadius === "string") {
      if (borderRadius.endsWith("px")) return parseFloat(borderRadius);
      if (borderRadius.endsWith("%")) {
        const ratio = parseFloat(borderRadius) / 100;
        return Math.max(0, (ratio * Math.min(width, height)) / 2);
      }
      return parseFloat(borderRadius);
    }
    return 0;
  }, [borderRadius, width, height]);
  const half = bw / 2;
  const sides = useMemo(
    () => ({
      top: props.top ?? true,
      right: props.right ?? true,
      bottom: props.bottom ?? true,
      left: props.left ?? true,
    }),
    [props.top, props.right, props.bottom, props.left]
  );
  const perimeter = useMemo(() => {
    const maxR = Math.min(width - bw, height - bw) / 2;
    const cr = Math.max(0, Math.min(normalizedRadius, maxR));
    return 2 * (width - bw + height - bw - 4 * cr) + 2 * Math.PI * cr;
  }, [width, height, bw, normalizedRadius]);
  const patternLength = dashLength + gapLength;
  const animOffset = direction === "clockwise" ? -patternLength : patternLength;
  const getBorderPath = useCallback((w, h, bw2, r, sides2) => {
    const half2 = bw2 / 2;
    const maxR = Math.min(r, (w - bw2) / 2, (h - bw2) / 2);
    if (!sides2.top && !sides2.right && !sides2.bottom && !sides2.left)
      return "";
    if (sides2.top && sides2.right && sides2.bottom && sides2.left) {
      return [
        `M${half2 + maxR},${half2}`,
        `H${w - half2 - maxR}`,
        `A${maxR},${maxR} 0 0 1 ${w - half2},${half2 + maxR}`,
        `V${h - half2 - maxR}`,
        `A${maxR},${maxR} 0 0 1 ${w - half2 - maxR},${h - half2}`,
        `H${half2 + maxR}`,
        `A${maxR},${maxR} 0 0 1 ${half2},${h - half2 - maxR}`,
        `V${half2 + maxR}`,
        `A${maxR},${maxR} 0 0 1 ${half2 + maxR},${half2}`,
        "Z",
      ].join(" ");
    }
    let d = "";
    if (sides2.top) {
      d += `M${half2 + maxR},${half2} H${w - half2 - maxR} `;
      if (sides2.right && maxR > 0) {
        d += `A${maxR},${maxR} 0 0 1 ${w - half2},${half2 + maxR} `;
      }
    }
    if (sides2.right) {
      d += `M${w - half2},${half2 + maxR} V${h - half2 - maxR} `;
      if (sides2.bottom && maxR > 0) {
        d += `A${maxR},${maxR} 0 0 1 ${w - half2 - maxR},${h - half2} `;
      }
    }
    if (sides2.bottom) {
      d += `M${w - half2 - maxR},${h - half2} H${half2 + maxR} `;
      if (sides2.left && maxR > 0) {
        d += `A${maxR},${maxR} 0 0 1 ${half2},${h - half2 - maxR} `;
      }
    }
    if (sides2.left) {
      d += `M${half2},${h - half2 - maxR} V${half2 + maxR} `;
      if (sides2.top && maxR > 0) {
        d += `A${maxR},${maxR} 0 0 1 ${half2 + maxR},${half2} `;
      }
    }
    return d.trim();
  }, []);
  const borderPath = useMemo(
    () => getBorderPath(width, height, bw, normalizedRadius, sides),
    [width, height, bw, normalizedRadius, sides, getBorderPath]
  );
  const [animationReady, setAnimationReady] = useState2(false);
  useEffect2(() => {
    setAnimationReady(false);
    const styleId = `dashed-border-keyframes-${direction}-${uniqueIdRef.current}`;
    let styleEl = null;
    if (typeof document !== "undefined") {
      styleEl = document.getElementById(styleId);
      if (!styleEl) {
        styleEl = document.createElement("style");
        styleEl.id = styleId;
        document.head.appendChild(styleEl);
      }
      styleEl.innerHTML = `
                @keyframes ${animName} {
                    100% {
                        stroke-dashoffset: ${animOffset};
                    }
                }
            `;
      setTimeout(() => setAnimationReady(true), 0);
    }
    return () => {
      if (styleEl && styleEl.parentNode) {
        styleEl.parentNode.removeChild(styleEl);
      }
    };
  }, [direction, animName, animOffset]);
  const [visible, setVisible] = useState2(false);
  useEffect2(() => {
    const loaded =
      props.borderColor !== defaultProps.borderColor ||
      props.borderWidth !== defaultProps.borderWidth ||
      props.borderRadius !== defaultProps.borderRadius ||
      props.dashLength !== defaultProps.dashLength ||
      props.gapLength !== defaultProps.gapLength ||
      (props.animation &&
        (props.animation.animated !== defaultProps.animation.animated ||
          props.animation.speed !== defaultProps.animation.speed ||
          props.animation.direction !== defaultProps.animation.direction)) ||
      props.top !== defaultProps.top ||
      props.right !== defaultProps.right ||
      props.bottom !== defaultProps.bottom ||
      props.left !== defaultProps.left;
    if (loaded && !visible) {
      setTimeout(() => setVisible(true), 10);
    }
  }, [
    props.borderColor,
    props.borderWidth,
    props.borderRadius,
    props.dashLength,
    props.gapLength,
    props.animation,
    props.top,
    props.right,
    props.bottom,
    props.left,
    visible,
    defaultProps,
  ]);
  return (
    <div
      ref={containerRef}
      style={{
        ...style,
        minWidth: 20,
        minHeight: 20,
        width: "100%",
        height: "100%",
        position: "relative",
        background: "transparent",
        borderRadius,
        overflow: "visible",
        pointerEvents: "none",
        opacity: visible ? 1 : 0,
        transition: visible ? "opacity 0.4s cubic-bezier(.4,0,.2,1)" : void 0,
      }}
    >
      <svg
        width={width}
        height={height}
        viewBox={`0 0 ${width} ${height}`}
        style={{
          position: "absolute",
          top: 0,
          left: 0,
          width: "100%",
          height: "100%",
          pointerEvents: "none",
        }}
        aria-hidden={"true"}
        preserveAspectRatio={"none"}
      >
        <path
          d={borderPath}
          fill={"none"}
          stroke={borderColor}
          strokeWidth={bw}
          strokeDasharray={`${dashLength},${gapLength}`}
          strokeDashoffset={0}
          style={{
            animation:
              !animated ||
              RenderTarget2.current() === RenderTarget2.canvas ||
              RenderTarget2.current() === RenderTarget2.thumbnail ||
              !animationReady
                ? "none"
                : `${animName} ${animationDuration} linear infinite`,
          }}
        />
      </svg>
    </div>
  );
}
DashedBorderFrame.displayName = "Animated Dashed Border";
addPropertyControls2(DashedBorderFrame, {
  borderColor: {
    type: ControlType2.Color,
    title: "Dash Color",
    defaultValue: "#0099FF",
  },
  borderWidth: {
    type: ControlType2.Number,
    title: "Thickness",
    defaultValue: 3,
    min: 1,
    max: 16,
    step: 1,
    displayStepper: true,
  },
  borderRadius: {
    type: ControlType2.Number,
    title: "Radius",
    defaultValue: 16,
    min: 0,
    max: 200,
    step: 1,
    displayStepper: false,
  },
  dashLength: {
    type: ControlType2.Number,
    title: "Dash",
    defaultValue: 12,
    min: 2,
    max: 40,
    step: 1,
  },
  gapLength: {
    type: ControlType2.Number,
    title: "Gap",
    defaultValue: 8,
    min: 0,
    max: 40,
    step: 1,
  },
  top: {
    type: ControlType2.Boolean,
    title: "Top",
    defaultValue: true,
    enabledTitle: "Yes",
    disabledTitle: "No",
  },
  right: {
    type: ControlType2.Boolean,
    title: "Right",
    defaultValue: true,
    enabledTitle: "Yes",
    disabledTitle: "No",
  },
  bottom: {
    type: ControlType2.Boolean,
    title: "Bottom",
    defaultValue: true,
    enabledTitle: "Yes",
    disabledTitle: "No",
  },
  left: {
    type: ControlType2.Boolean,
    title: "Left",
    defaultValue: true,
    enabledTitle: "Yes",
    disabledTitle: "No",
  },
  animation: {
    type: ControlType2.Object,
    title: "Animation",
    controls: {
      animated: {
        type: ControlType2.Boolean,
        title: "Animated",
        defaultValue: true,
        enabledTitle: "On",
        disabledTitle: "Off",
      },
      speed: {
        type: ControlType2.Number,
        title: "Speed",
        defaultValue: 2,
        min: 0.1,
        max: 10,
        step: 0.1,
        hidden: (obj) => !obj.animated,
      },
      direction: {
        type: ControlType2.Enum,
        title: "Direction",
        options: ["clockwise", "counterclockwise"],
        optionTitles: ["Clockwise", "Counterclockwise"],
        defaultValue: "clockwise",
        displaySegmentedControl: true,
        segmentedControlDirection: "vertical",
        hidden: (obj) => !obj.animated,
      },
    },
    defaultValue: {
      animated: true,
      speed: 2,
      direction: "clockwise",
    },
  },
});

// /:https://framerusercontent.com/modules/9L4FLiC6HhjL9oF7uCBp/cfFIfkhhb0GFRZsdioUR/O2rdC6NEQ.js
import * as React from "react";
import { forwardRef as forwardRef2 } from "react";
import {
  addPropertyControls as addPropertyControls3,
  ControlType as ControlType3,
  cx,
  motion,
  withCSS,
} from "unframer";
var mask = `url('data:image/svg+xml,<svg display="block" role="presentation" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M 0 0 L 0 8 L 0 8 L 8 8" fill="transparent" height="8.000000000000057px" id="tTgRUrblN" stroke-dasharray="0" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" stroke="var(--13bnw74, rgb(255, 255, 255))" transform="translate(9.832 7.978) rotate(45 4 4)" width="8.000000000000002px"/></svg>') alpha no-repeat center / auto var(--framer-icon-mask-mode, add), var(--framer-icon-mask, none)`;
var SVG = /* @__PURE__ */ forwardRef2((props, ref) => {
  const { animated, layoutId, children, ...rest } = props;
  return animated ? (
    <motion.div {...rest} layoutId={layoutId} ref={ref} />
  ) : (
    <div {...rest} ref={ref} />
  );
});
var getProps = ({ color, fill, height, id, width, ...props }) => {
  return {
    ...props,
    HN7TZix3o: color ?? props.HN7TZix3o ?? "rgb(255, 255, 255)",
    judN_LhGq: fill ?? props.judN_LhGq ?? "rgb(255, 255, 255)",
  };
};
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
  const {
    style,
    className,
    layoutId,
    variant,
    HN7TZix3o,
    judN_LhGq,
    ...restProps
  } = getProps(props);
  return (
    <SVG
      {...restProps}
      className={cx("framer-4rldo", className)}
      layoutId={layoutId}
      ref={ref}
      style={{
        "--13bnw74": HN7TZix3o,
        ...style,
      }}
    />
  );
});
var css = [
  `.framer-4rldo { -webkit-mask: ${mask}; aspect-ratio: 1; background-color: var(--13bnw74); mask: ${mask}; width: 24px; }`,
];
var Icon = withCSS(Component, css, "framer-4rldo");
Icon.displayName = "Caret Left";
var stdin_default = Icon;
addPropertyControls3(Icon, {
  HN7TZix3o: {
    defaultValue: "rgb(255, 255, 255)",
    hidden: false,
    title: "Color",
    type: ControlType3.Color,
  },
  judN_LhGq: {
    defaultValue: "rgb(255, 255, 255)",
    hidden: true,
    title: "Fill",
    type: ControlType3.Color,
  },
});

// /:https://framerusercontent.com/modules/qFN2CSltK1GaZKZUBVKv/0fD2hsdO48P1J6EJzEen/T9Ghiu5oW.js
var CaretLeftFonts = getFonts(stdin_default);
var AnimatedDashedBorderFonts = getFonts(DashedBorderFrame);
var TextGlitchFonts = getFonts(TextGlitch);
var enabledGestures = {
  C75ZaKEQi: {
    hover: true,
  },
  eqE432IsG: {
    hover: true,
  },
};
var cycleOrder = ["C75ZaKEQi", "eqE432IsG"];
var serializationHash = "framer-6rptQ";
var variantClassNames = {
  C75ZaKEQi: "framer-v-4k7rmk",
  eqE432IsG: "framer-v-158x1ro",
};
function addPropertyOverrides(overrides, ...variants) {
  const nextOverrides = {};
  variants?.forEach(
    (variant) => variant && Object.assign(nextOverrides, overrides[variant])
  );
  return nextOverrides;
}
var transition1 = {
  bounce: 0,
  delay: 0,
  duration: 0.4,
  type: "spring",
};
var transformTemplate1 = (_, t) => `translate(-50%, -50%) ${t}`;
var transformTemplate2 = (_, t) => `translateY(-50%) ${t}`;
var Transition = ({ value, children }) => {
  const config = React2.useContext(MotionConfigContext);
  const transition = value ?? config.transition;
  const contextValue = React2.useMemo(
    () => ({
      ...config,
      transition,
    }),
    [JSON.stringify(transition)]
  );
  return (
    <MotionConfigContext.Provider value={contextValue}>
      {children}
    </MotionConfigContext.Provider>
  );
};
var Variants = motion2.create(React2.Fragment);
var humanReadableVariantMap = {
  "Left Icon": "C75ZaKEQi",
  "Right Icon": "eqE432IsG",
};
var getProps2 = ({ height, id, label, width, ...props }) => {
  return {
    ...props,
    v5GqrO6jM: label ?? props.v5GqrO6jM ?? "Back",
    variant:
      humanReadableVariantMap[props.variant] ?? props.variant ?? "C75ZaKEQi",
  };
};
var createLayoutDependency = (props, variants) => {
  if (props.layoutDependency)
    return variants.join("-") + props.layoutDependency;
  return variants.join("-");
};
var Component2 = /* @__PURE__ */ React2.forwardRef(function (props, ref) {
  const fallbackRef = useRef3(null);
  const refBinding = ref ?? fallbackRef;
  const defaultLayoutId = React2.useId();
  const { activeLocale, setLocale } = useLocaleInfo();
  const componentViewport = useComponentViewport();
  const { style, className, layoutId, variant, v5GqrO6jM, ...restProps } =
    getProps2(props);
  const {
    baseVariant,
    classNames,
    clearLoadingGesture,
    gestureHandlers,
    gestureVariant,
    isLoading,
    setGestureState,
    setVariant,
    variants,
  } = useVariantState({
    cycleOrder,
    defaultVariant: "C75ZaKEQi",
    enabledGestures,
    ref: refBinding,
    variant,
    variantClassNames,
  });
  const layoutDependency = createLayoutDependency(props, variants);
  const sharedStyleClassNames = [];
  const scopingClassNames = cx2(serializationHash, ...sharedStyleClassNames);
  return (
    <LayoutGroup id={layoutId ?? defaultLayoutId}>
      <Variants animate={variants} initial={false}>
        <Transition value={transition1}>
          <motion2.div
            {...restProps}
            {...gestureHandlers}
            className={cx2(
              scopingClassNames,
              "framer-4k7rmk",
              className,
              classNames
            )}
            data-framer-name={"Left Icon"}
            layoutDependency={layoutDependency}
            layoutId={"C75ZaKEQi"}
            ref={refBinding}
            style={{
              ...style,
            }}
            {...addPropertyOverrides(
              {
                "C75ZaKEQi-hover": {
                  "data-framer-name": void 0,
                },
                "eqE432IsG-hover": {
                  "data-framer-name": void 0,
                },
                eqE432IsG: {
                  "data-framer-name": "Right Icon",
                },
              },
              baseVariant,
              gestureVariant
            )}
          >
            <motion2.div
              className={"framer-zekl27"}
              data-framer-name={"Content"}
              layoutDependency={layoutDependency}
              layoutId={"mJllyQKxH"}
              style={{
                backgroundColor:
                  "var(--token-fa07d228-afbe-4fad-9a44-2fb0dadd2a5e, rgb(23, 23, 23))",
                borderBottomLeftRadius: "50%",
                borderBottomRightRadius: "50%",
                borderTopLeftRadius: "50%",
                borderTopRightRadius: "50%",
                rotate: 0,
              }}
              variants={{
                "C75ZaKEQi-hover": {
                  backgroundColor:
                    "var(--token-bb3f9735-47c4-4ac2-b002-c5446021aee6, rgb(0, 0, 0))",
                  rotate: 0,
                },
                eqE432IsG: {
                  rotate: 180,
                },
              }}
            >
              {_jsx4(stdin_default, {
                animated: true,
                className: "framer-muzojw",
                layoutDependency,
                layoutId: "p0Kyf7_2W",
                style: {
                  "--13bnw74":
                    "var(--token-4fef9130-aa55-4351-8ed5-cfba481137a7, rgb(255, 255, 255))",
                  "--1g5bka5": "rgb(255, 255, 255)",
                },
                transformTemplate: transformTemplate1,
                ...addPropertyOverrides(
                  {
                    "C75ZaKEQi-hover": {
                      transformTemplate: transformTemplate2,
                    },
                    "eqE432IsG-hover": {
                      transformTemplate: transformTemplate2,
                    },
                  },
                  baseVariant,
                  gestureVariant
                ),
              })}
              {_jsx4(stdin_default, {
                animated: true,
                className: "framer-1afp1mk",
                layoutDependency,
                layoutId: "Mli4AM5yl",
                style: {
                  "--13bnw74":
                    "var(--token-4fef9130-aa55-4351-8ed5-cfba481137a7, rgb(255, 255, 255))",
                  "--1g5bka5": "rgb(255, 255, 255)",
                },
                transformTemplate: transformTemplate2,
                ...addPropertyOverrides(
                  {
                    "C75ZaKEQi-hover": {
                      transformTemplate: transformTemplate1,
                    },
                    "eqE432IsG-hover": {
                      transformTemplate: transformTemplate1,
                    },
                  },
                  baseVariant,
                  gestureVariant
                ),
              })}
              <ComponentViewportProvider>
                <SmartComponentScopedContainer
                  className={"framer-1kt3qff-container"}
                  isAuthoredByUser={true}
                  isModuleExternal={true}
                  layoutDependency={layoutDependency}
                  layoutId={"dxHXA04OP-container"}
                  nodeId={"dxHXA04OP"}
                  rendersWithMotion={true}
                  scopeId={"T9Ghiu5oW"}
                  style={{
                    opacity: 0,
                  }}
                  variants={{
                    "C75ZaKEQi-hover": {
                      opacity: 1,
                    },
                  }}
                >
                  <DashedBorderFrame
                    animation={{
                      animated: false,
                      direction: "clockwise",
                      speed: 2,
                    }}
                    borderColor={
                      "var(--token-04a04e54-cbd8-4312-8418-e1527ef396e1, rgb(51, 51, 51))"
                    }
                    borderRadius={13}
                    borderWidth={1}
                    bottom={true}
                    dashLength={8}
                    gapLength={6}
                    height={"100%"}
                    id={"dxHXA04OP"}
                    layoutId={"dxHXA04OP"}
                    left={true}
                    right={true}
                    style={{
                      height: "100%",
                      width: "100%",
                    }}
                    top={true}
                    width={"100%"}
                    {...addPropertyOverrides(
                      {
                        "C75ZaKEQi-hover": {
                          animation: {
                            animated: true,
                            direction: "clockwise",
                            speed: 2,
                          },
                        },
                      },
                      baseVariant,
                      gestureVariant
                    )}
                  />
                </SmartComponentScopedContainer>
              </ComponentViewportProvider>
            </motion2.div>
            <motion2.div
              className={"framer-5bg9hd"}
              data-framer-name={"Text Wrap"}
              layoutDependency={layoutDependency}
              layoutId={"cRZQdR2Zv"}
            >
              <RichText
                __fromCanvasComponent={true}
                className={"framer-12dh7gc"}
                data-framer-name={"Helper"}
                data-nosnippet={true}
                fonts={["BI;Raveo Variable/variable/v0"]}
                layoutDependency={layoutDependency}
                layoutId={"b4gbCBIh6"}
                style={{
                  "--extracted-lqlgq3": '"opsz" 14, "wght" 550',
                  "--extracted-tcooor":
                    "var(--token-4fef9130-aa55-4351-8ed5-cfba481137a7, rgb(255, 255, 255))",
                  "--framer-link-text-color": "rgb(0, 153, 255)",
                  "--framer-link-text-decoration": "underline",
                  opacity: 0,
                }}
                text={v5GqrO6jM}
                verticalAlignment={"top"}
                withExternalLayout={true}
              >
                <React2.Fragment>
                  <motion2.div
                    style={{
                      marginBottom: 8,
                      "--font-selector":
                        "Qkk7UmF2ZW8gVmFyaWFibGUvdmFyaWFibGUvdjBWRj1JbTl3YzNvaUlERTBMQ0FpZDJkb2RDSWdOVFV3",
                      "--framer-font-family":
                        '"Raveo Variable Variable", sans-serif',
                      "--framer-font-size": "14px",
                      "--framer-font-variation-axes":
                        'var(--extracted-lqlgq3, "opsz" 14, "wght" 550)',
                      "--framer-font-weight": "1000",
                      "--framer-letter-spacing": "-0.01em",
                      "--framer-text-alignment": "right",
                      "--framer-text-color":
                        "var(--extracted-tcooor, var(--token-4fef9130-aa55-4351-8ed5-cfba481137a7, rgb(255, 255, 255)))",
                    }}
                  >
                    {"Back"}
                  </motion2.div>
                </React2.Fragment>
              </RichText>
              <ComponentViewportProvider>
                <SmartComponentScopedContainer
                  className={"framer-30gg0t-container"}
                  isAuthoredByUser={true}
                  isModuleExternal={true}
                  layoutDependency={layoutDependency}
                  layoutId={"noNss2GX2-container"}
                  nodeId={"noNss2GX2"}
                  rendersWithMotion={true}
                  scopeId={"T9Ghiu5oW"}
                >
                  <TextGlitch
                    color={
                      "var(--token-8acf10b0-fc55-42ff-8ac5-80a79dc47979, rgba(255, 255, 255, 0.5))"
                    }
                    duration={350}
                    font={{
                      fontFamily: '"Raveo Variable Variable", sans-serif',
                      fontSize: "14px",
                      fontStyle: "normal",
                      fontWeight: 1e3,
                      letterSpacing: "-0.01em",
                      lineHeight: "1.2em",
                    }}
                    glitch={false}
                    height={"100%"}
                    id={"noNss2GX2"}
                    layoutId={"noNss2GX2"}
                    scrambleChars={
                      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+-=[]{}|;:,.<>?"
                    }
                    scrambleColor={
                      "var(--token-8acf10b0-fc55-42ff-8ac5-80a79dc47979, rgba(255, 255, 255, 0.5))"
                    }
                    scramblePercent={70}
                    speed={50}
                    text={v5GqrO6jM}
                    variable={{
                      optical: 14,
                      weight: 550,
                    }}
                    width={"100%"}
                    {...addPropertyOverrides(
                      {
                        "C75ZaKEQi-hover": {
                          color:
                            "var(--token-4fef9130-aa55-4351-8ed5-cfba481137a7, rgb(255, 255, 255))",
                          glitch: true,
                        },
                        "eqE432IsG-hover": {
                          color:
                            "var(--token-4fef9130-aa55-4351-8ed5-cfba481137a7, rgb(255, 255, 255))",
                          glitch: true,
                        },
                        eqE432IsG: {
                          font: {
                            fontFamily: '"Raveo Variable Variable", sans-serif',
                            fontSize: "14px",
                            fontStyle: "normal",
                            fontWeight: 1e3,
                            letterSpacing: "-0.01em",
                            lineHeight: "1.2em",
                            textAlign: "right",
                          },
                        },
                      },
                      baseVariant,
                      gestureVariant
                    )}
                  />
                </SmartComponentScopedContainer>
              </ComponentViewportProvider>
            </motion2.div>
          </motion2.div>
        </Transition>
      </Variants>
    </LayoutGroup>
  );
});
var css2 = [
  "@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
  ".framer-6rptQ.framer-1rsym9a, .framer-6rptQ .framer-1rsym9a { display: block; }",
  ".framer-6rptQ.framer-4k7rmk { align-content: center; align-items: center; cursor: pointer; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 8px; height: 34px; justify-content: flex-start; overflow: visible; padding: 0px; position: relative; width: min-content; }",
  ".framer-6rptQ .framer-zekl27 { aspect-ratio: 1 / 1; flex: none; height: var(--framer-aspect-ratio-supported, 20px); overflow: hidden; position: relative; width: 20px; will-change: var(--framer-will-change-override, transform); }",
  ".framer-6rptQ .framer-muzojw { aspect-ratio: 1 / 1; flex: none; height: var(--framer-aspect-ratio-supported, 16px); left: 50%; position: absolute; top: 50%; width: 16px; }",
  ".framer-6rptQ .framer-1afp1mk { aspect-ratio: 1 / 1; flex: none; height: var(--framer-aspect-ratio-supported, 16px); position: absolute; right: -16px; top: 50%; width: 16px; }",
  ".framer-6rptQ .framer-1kt3qff-container { bottom: 2px; flex: none; left: 2px; pointer-events: none; position: absolute; right: 2px; top: 2px; z-index: 1; }",
  ".framer-6rptQ .framer-5bg9hd { align-content: center; align-items: center; display: flex; flex: none; flex-direction: row; flex-wrap: nowrap; gap: 0px; height: min-content; justify-content: flex-start; overflow: visible; padding: 0px; position: relative; width: min-content; }",
  ".framer-6rptQ .framer-12dh7gc { flex: none; height: auto; position: relative; white-space: pre; width: auto; }",
  ".framer-6rptQ .framer-30gg0t-container { flex: none; height: auto; left: 0px; position: absolute; top: 0px; width: auto; z-index: 1; }",
  ".framer-6rptQ.framer-v-158x1ro .framer-zekl27 { order: 1; }",
  ".framer-6rptQ.framer-v-158x1ro .framer-5bg9hd { order: 0; }",
  ".framer-6rptQ.framer-v-158x1ro .framer-30gg0t-container { left: unset; right: 0px; top: 0px; }",
  ".framer-6rptQ.framer-v-4k7rmk.hover .framer-muzojw, .framer-6rptQ.framer-v-158x1ro.hover .framer-muzojw { left: -16px; }",
  ".framer-6rptQ.framer-v-4k7rmk.hover .framer-1afp1mk, .framer-6rptQ.framer-v-158x1ro.hover .framer-1afp1mk { left: 50%; right: unset; }",
  ".framer-6rptQ.framer-v-4k7rmk.hover .framer-1kt3qff-container { bottom: 0px; left: 0px; right: 0px; top: 0px; }",
  ".framer-6rptQ.framer-v-158x1ro.hover .framer-30gg0t-container { left: unset; }",
];
var FramerT9Ghiu5oW = withCSS2(Component2, css2, "framer-6rptQ");
var stdin_default2 = FramerT9Ghiu5oW;
FramerT9Ghiu5oW.displayName = "Link Button";
FramerT9Ghiu5oW.defaultProps = {
  height: 34,
  width: 60.5,
};
addPropertyControls4(FramerT9Ghiu5oW, {
  variant: {
    options: ["C75ZaKEQi", "eqE432IsG"],
    optionTitles: ["Left Icon", "Right Icon"],
    title: "Variant",
    type: ControlType4.Enum,
  },
  v5GqrO6jM: {
    defaultValue: "Back",
    title: "Label",
    type: ControlType4.String,
  },
});
var variationAxes = [
  {
    defaultValue: 14,
    maxValue: 32,
    minValue: 14,
    name: "Optical size",
    tag: "opsz",
  },
  {
    defaultValue: 400,
    maxValue: 900,
    minValue: 100,
    name: "Weight",
    tag: "wght",
  },
];
addFonts(
  FramerT9Ghiu5oW,
  [
    {
      explicitInter: true,
      fonts: [
        {
          family: "Raveo Variable",
          source: "builtIn",
          style: "normal",
          url: "https://framerusercontent.com/assets/JEdA86oNqHX1i1CLD92Q7jTxV8.woff2",
          variationAxes,
          weight: "1000",
        },
      ],
    },
    ...CaretLeftFonts,
    ...AnimatedDashedBorderFonts,
    ...TextGlitchFonts,
  ],
  {
    supportsExplicitInterCodegen: true,
  }
);

// virtual:link-button
import { WithFramerBreakpoints } from "unframer";

// virtual:__routes
var routes = {
  Agq1L2jDe: {
    path: "/lib/careers/:slug",
  },
  DEi7PWhxw: {
    path: "/done/coming-soon",
  },
  J_r8CT7G7: {
    path: "/lib/about",
  },
  MiKvYzstd: {
    path: "/disconnect",
  },
  Mxb74mbpa: {
    path: "/verify-social",
  },
  OegBE_J9e: {
    path: "/lib/home",
  },
  SOf0RbDE_: {
    path: "/lib/blog",
  },
  TQDjkQC2A: {
    path: "/lib/contact",
  },
  UVAM5_4oX: {
    path: "/verify",
  },
  XanNBrFME: {
    path: "/kyc",
  },
  YBTUYW5mq: {
    path: "/lib/pricing",
  },
  a5CCfdDiy: {
    path: "/lib/updates/:slug",
  },
  augiA20Il: {
    path: "/",
  },
  cpP7I9WGp: {
    path: "/done/404",
  },
  e9YIc4Uv5: {
    path: "/lib/waitlist",
  },
  inNalAASs: {
    path: "/lib/blog/:slug",
  },
  ixIXvnG3U: {
    path: "/lib/legal/:slug",
  },
  nhNLVf3qq: {
    path: "/connections",
  },
  rX7FOhQc0: {
    path: "/lib/updates",
  },
  so5jTiDIE: {
    path: "/lib/careers",
  },
};

// virtual:link-button
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {
  base: "C75ZaKEQi",
};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
  return (
    <ContextProviders
      routes={routes}
      framerSiteId={
        "c32b11589f2bc68bdb1b6d8b6f1517c87e280d7db56dec1009246311f93861da"
      }
      locale={locale}
      locales={locales}
    >
      {jsx(stdin_default2, {
        ...rest,
      })}
    </ContextProviders>
  );
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders LinkButtonFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
  return (
    <ContextProviders
      routes={routes}
      framerSiteId={
        "c32b11589f2bc68bdb1b6d8b6f1517c87e280d7db56dec1009246311f93861da"
      }
      locale={locale}
      locales={locales}
    >
      <WithFramerBreakpoints
        Component={stdin_default2}
        variants={defaultResponsiveVariants}
        {...rest}
      />
    </ContextProviders>
  );
};
Object.assign(ComponentWithRoot, stdin_default2);
var link_button_default = ComponentWithRoot;
export { link_button_default as default };

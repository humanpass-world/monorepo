/**
 * Generated by orval v7.12.2 üç∫
 * Do not edit manually.
 * OpenAPI
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import { customInstance } from "../react-query-client";
export type GetMiniappAuthNonce200 = {
  nonce: string;
  hmac: string;
};

export type PostMiniappAuthCompleteSiweBody = {
  nonce: string;
  hmac: string;
  payload?: unknown;
};

export type PostMiniappAuthCompleteSiwe200UserData = {
  address: string;
  username: string;
  profilePictureUrl: string;
};

export type PostMiniappAuthCompleteSiwe200 = {
  userData: PostMiniappAuthCompleteSiwe200UserData;
};

export type GetMiniappAuthSession200 = {
  address: string;
  username: string;
  profilePictureUrl: string;
};

export type GetMiniappVerifySocialXCallbackParams = {
  address: string;
  code: string;
  state: string;
};

export type PostMiniappVerifyWalletRequestBody = {
  /** Wallet Address to be verified */
  address: string;
  /** Can be empty if not provided */
  worldUsername?: string;
  /** EIP-155 Chain ID or 'solana' */
  chainId: string;
};

export type PostMiniappVerifyWalletRequest200 = {
  /** Request ID */
  requestId: string;
  /** Verification Code */
  code: string;
};

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostMiniappVerifyWalletRequest400Code = {
  INVALID_APPLICATION_ID_OR_CHAIN: "INVALID_APPLICATION_ID_OR_CHAIN",
  INVALID_WORLD_USERNAME: "INVALID_WORLD_USERNAME",
} as const;
export type PostMiniappVerifyWalletRequest400 = {
  code: (typeof PostMiniappVerifyWalletRequest400Code)[keyof typeof PostMiniappVerifyWalletRequest400Code];
  error: string;
};

export type PostMiniappVerifyWalletRequest401Code =
  (typeof PostMiniappVerifyWalletRequest401Code)[keyof typeof PostMiniappVerifyWalletRequest401Code];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostMiniappVerifyWalletRequest401Code = {
  UNAUTHORIZED: "UNAUTHORIZED",
} as const;

export type PostMiniappVerifyWalletRequest401 = {
  code: PostMiniappVerifyWalletRequest401Code;
  error: string;
};

export type GetMiniappVerifyWalletGetRequestParams = {
  /**
   * Request ID
   */
  requestId?: string | null;
  /**
   * Verification Code
   */
  code?: string | null;
};

export type GetMiniappVerifyWalletGetRequest200 = {
  /** Request ID */
  requestId: string;
  /** Chain ID */
  chainId: string;
  /** Wallet Address */
  address: string;
  /** Signal */
  signal: string;
};

export type GetMiniappVerifyWalletGetRequest401Code =
  (typeof GetMiniappVerifyWalletGetRequest401Code)[keyof typeof GetMiniappVerifyWalletGetRequest401Code];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetMiniappVerifyWalletGetRequest401Code = {
  UNAUTHORIZED: "UNAUTHORIZED",
} as const;

export type GetMiniappVerifyWalletGetRequest401 = {
  code: GetMiniappVerifyWalletGetRequest401Code;
  error: string;
};

export type GetMiniappVerifyWalletPollingParams = {
  /**
   * Request ID
   */
  requestId: string;
};

export type GetMiniappVerifyWalletPolling200ServerPayload = {
  /** Account */
  account: string;
  /** Nullifier Hash */
  nullifier_hash: string;
  /** Merkle Root */
  merkle_root: string;
  /** Proof Hash Keccak256 */
  proof_hash_keccak256: string;
  /** Proof Hash Sha256 */
  proof_hash_sha256: string;
  /** Verification Level */
  verification_level: number;
  /** Action Hash */
  action_hash: string;
  /** Signal Hash */
  signal_hash: string;
  /** Server Deadline */
  server_deadline: string;
  /** Server Nonce */
  server_nonce: string;
  /** Server Signature */
  server_sig: string;
};

export type GetMiniappVerifyWalletPolling200 = {
  /** Done verification */
  done: boolean;
  serverPayload: GetMiniappVerifyWalletPolling200ServerPayload;
  /** Chain ID */
  chainId: string;
};

export type GetMiniappVerifyWalletPolling401Code =
  (typeof GetMiniappVerifyWalletPolling401Code)[keyof typeof GetMiniappVerifyWalletPolling401Code];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetMiniappVerifyWalletPolling401Code = {
  UNAUTHORIZED: "UNAUTHORIZED",
} as const;

export type GetMiniappVerifyWalletPolling401 = {
  code: GetMiniappVerifyWalletPolling401Code;
  error: string;
};

export type PostMiniappVerifySocialXProofBody = {
  id: string;
  merkle_root: string;
  nullifier_hash: string;
  proof: string;
  verification_level: string;
};

export type PostMiniappVerifySocialXProof200 = {
  success: boolean;
};

export type PostMiniappVerifySocialXProof401Code =
  (typeof PostMiniappVerifySocialXProof401Code)[keyof typeof PostMiniappVerifySocialXProof401Code];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostMiniappVerifySocialXProof401Code = {
  UNAUTHORIZED: "UNAUTHORIZED",
} as const;

export type PostMiniappVerifySocialXProof401 = {
  code: PostMiniappVerifySocialXProof401Code;
  error: string;
};

export type PostMiniappVerifyWalletProofBody = {
  id: string;
  merkle_root: string;
  nullifier_hash: string;
  proof: string;
  verification_level: string;
};

export type PostMiniappVerifyWalletProof200 = {
  success: boolean;
};

export type PostMiniappVerifyWalletProof401Code =
  (typeof PostMiniappVerifyWalletProof401Code)[keyof typeof PostMiniappVerifyWalletProof401Code];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostMiniappVerifyWalletProof401Code = {
  UNAUTHORIZED: "UNAUTHORIZED",
} as const;

export type PostMiniappVerifyWalletProof401 = {
  code: PostMiniappVerifyWalletProof401Code;
  error: string;
};

export type GetMiniappVerifiedSocialList200ListItem = {
  /** Verified Social ID */
  id: string;
  /** Username */
  username: string;
  /** Social */
  social: string;
  /** Created At */
  createdAt: string;
};

export type GetMiniappVerifiedSocialList200 = {
  list: GetMiniappVerifiedSocialList200ListItem[];
};

export type GetMiniappVerifiedSocialList401Code =
  (typeof GetMiniappVerifiedSocialList401Code)[keyof typeof GetMiniappVerifiedSocialList401Code];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetMiniappVerifiedSocialList401Code = {
  UNAUTHORIZED: "UNAUTHORIZED",
} as const;

export type GetMiniappVerifiedSocialList401 = {
  code: GetMiniappVerifiedSocialList401Code;
  error: string;
};

export type DeleteMiniappVerifiedSocialDisconnectBody = {
  verifiedSocialId: string;
};

export type DeleteMiniappVerifiedSocialDisconnect200 = {
  success: boolean;
};

export type DeleteMiniappVerifiedSocialDisconnect401Code =
  (typeof DeleteMiniappVerifiedSocialDisconnect401Code)[keyof typeof DeleteMiniappVerifiedSocialDisconnect401Code];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteMiniappVerifiedSocialDisconnect401Code = {
  UNAUTHORIZED: "UNAUTHORIZED",
} as const;

export type DeleteMiniappVerifiedSocialDisconnect401 = {
  code: DeleteMiniappVerifiedSocialDisconnect401Code;
  error: string;
};

export type GetMiniappVerifiedWalletList200ListItem = {
  /** Verified Wallet Request ID */
  requestId: string;
  /** Verified Wallet Address */
  address: string;
  chains: string[];
};

export type GetMiniappVerifiedWalletList200 = {
  list: GetMiniappVerifiedWalletList200ListItem[];
};

export type GetMiniappVerifiedWalletList401Code =
  (typeof GetMiniappVerifiedWalletList401Code)[keyof typeof GetMiniappVerifiedWalletList401Code];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetMiniappVerifiedWalletList401Code = {
  UNAUTHORIZED: "UNAUTHORIZED",
} as const;

export type GetMiniappVerifiedWalletList401 = {
  code: GetMiniappVerifiedWalletList401Code;
  error: string;
};

export type DeleteMiniappVerifiedWalletDisconnectBody = {
  requestId: string;
};

export type DeleteMiniappVerifiedWalletDisconnect200 = {
  success: boolean;
};

export type DeleteMiniappVerifiedWalletDisconnect401Code =
  (typeof DeleteMiniappVerifiedWalletDisconnect401Code)[keyof typeof DeleteMiniappVerifiedWalletDisconnect401Code];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteMiniappVerifiedWalletDisconnect401Code = {
  UNAUTHORIZED: "UNAUTHORIZED",
} as const;

export type DeleteMiniappVerifiedWalletDisconnect401 = {
  code: DeleteMiniappVerifiedWalletDisconnect401Code;
  error: string;
};

export type GetMiniappVerifiedWalletGetRequest200 = {
  /** Request ID */
  requestId: string;
  /** Chain ID */
  chainId: string;
  /** Wallet Address */
  address: string;
};

export type GetMiniappVerifiedWalletGetRequest401Code =
  (typeof GetMiniappVerifiedWalletGetRequest401Code)[keyof typeof GetMiniappVerifiedWalletGetRequest401Code];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetMiniappVerifiedWalletGetRequest401Code = {
  UNAUTHORIZED: "UNAUTHORIZED",
} as const;

export type GetMiniappVerifiedWalletGetRequest401 = {
  code: GetMiniappVerifiedWalletGetRequest401Code;
  error: string;
};

export type GetPublicSocialCheckXParams = {
  /**
   * X username (@username or username)
   */
  username: string;
};

export type GetPublicSocialCheckX200OneOf = {
  verified: boolean;
  /** Verified At */
  verifiedAt: string;
};

export type GetPublicSocialCheckX200OneOfTwo = {
  verified: boolean;
};

export type GetPublicSocialCheckX200 =
  | GetPublicSocialCheckX200OneOf
  | GetPublicSocialCheckX200OneOfTwo;

export type GetPublicSocialCheckFarcasterParams = {
  /**
   * Farcaster username (@username or username)
   */
  username: string;
};

export type GetPublicSocialCheckFarcaster200OneOf = {
  verified: boolean;
  /** Verified At */
  verifiedAt: string;
};

export type GetPublicSocialCheckFarcaster200OneOfTwo = {
  verified: boolean;
};

export type GetPublicSocialCheckFarcaster200 =
  | GetPublicSocialCheckFarcaster200OneOf
  | GetPublicSocialCheckFarcaster200OneOfTwo;

export type GetPublicSocialCheckTelegramParams = {
  /**
   * Telegram username (@username or username)
   */
  username: string;
};

export type GetPublicSocialCheckTelegram200OneOf = {
  verified: boolean;
  /** Verified At */
  verifiedAt: string;
};

export type GetPublicSocialCheckTelegram200OneOfTwo = {
  verified: boolean;
};

export type GetPublicSocialCheckTelegram200 =
  | GetPublicSocialCheckTelegram200OneOf
  | GetPublicSocialCheckTelegram200OneOfTwo;

export type GetPublicSocialCheckFacebookParams = {
  /**
   * Facebook username (@username or username)
   */
  username: string;
};

export type GetPublicSocialCheckFacebook200OneOf = {
  verified: boolean;
  /** Verified At */
  verifiedAt: string;
};

export type GetPublicSocialCheckFacebook200OneOfTwo = {
  verified: boolean;
};

export type GetPublicSocialCheckFacebook200 =
  | GetPublicSocialCheckFacebook200OneOf
  | GetPublicSocialCheckFacebook200OneOfTwo;

export type GetPublicWalletCheckParams = {
  /**
   * Wallet address (0x...)
   */
  address: string;
};

export type GetPublicWalletCheck200OneOf = {
  verified: boolean;
  /** Verified At */
  verifiedAt: string;
};

export type GetPublicWalletCheck200OneOfTwo = {
  verified: boolean;
};

export type GetPublicWalletCheck200 =
  | GetPublicWalletCheck200OneOf
  | GetPublicWalletCheck200OneOfTwo;

/**
 * @summary Get nonce
 */
export const getMiniappAuthNonce = (signal?: AbortSignal) => {
  return customInstance<GetMiniappAuthNonce200>({
    url: `/miniapp/auth/nonce`,
    method: "GET",
    signal,
  });
};

export const getGetMiniappAuthNonceQueryKey = () => {
  return [`/miniapp/auth/nonce`] as const;
};

export const getGetMiniappAuthNonceQueryOptions = <
  TData = Awaited<ReturnType<typeof getMiniappAuthNonce>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getMiniappAuthNonce>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMiniappAuthNonceQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMiniappAuthNonce>>
  > = ({ signal }) => getMiniappAuthNonce(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMiniappAuthNonce>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMiniappAuthNonceQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMiniappAuthNonce>>
>;
export type GetMiniappAuthNonceQueryError = unknown;

export function useGetMiniappAuthNonce<
  TData = Awaited<ReturnType<typeof getMiniappAuthNonce>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappAuthNonce>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMiniappAuthNonce>>,
          TError,
          Awaited<ReturnType<typeof getMiniappAuthNonce>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMiniappAuthNonce<
  TData = Awaited<ReturnType<typeof getMiniappAuthNonce>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappAuthNonce>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMiniappAuthNonce>>,
          TError,
          Awaited<ReturnType<typeof getMiniappAuthNonce>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMiniappAuthNonce<
  TData = Awaited<ReturnType<typeof getMiniappAuthNonce>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappAuthNonce>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get nonce
 */

export function useGetMiniappAuthNonce<
  TData = Awaited<ReturnType<typeof getMiniappAuthNonce>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappAuthNonce>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetMiniappAuthNonceQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Complete SIWE
 */
export const postMiniappAuthCompleteSiwe = (
  postMiniappAuthCompleteSiweBody: PostMiniappAuthCompleteSiweBody,
  signal?: AbortSignal,
) => {
  return customInstance<PostMiniappAuthCompleteSiwe200>({
    url: `/miniapp/auth/complete-siwe`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: postMiniappAuthCompleteSiweBody,
    signal,
  });
};

export const getPostMiniappAuthCompleteSiweMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMiniappAuthCompleteSiwe>>,
    TError,
    { data: PostMiniappAuthCompleteSiweBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postMiniappAuthCompleteSiwe>>,
  TError,
  { data: PostMiniappAuthCompleteSiweBody },
  TContext
> => {
  const mutationKey = ["postMiniappAuthCompleteSiwe"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postMiniappAuthCompleteSiwe>>,
    { data: PostMiniappAuthCompleteSiweBody }
  > = (props) => {
    const { data } = props ?? {};

    return postMiniappAuthCompleteSiwe(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostMiniappAuthCompleteSiweMutationResult = NonNullable<
  Awaited<ReturnType<typeof postMiniappAuthCompleteSiwe>>
>;
export type PostMiniappAuthCompleteSiweMutationBody =
  PostMiniappAuthCompleteSiweBody;
export type PostMiniappAuthCompleteSiweMutationError = unknown;

/**
 * @summary Complete SIWE
 */
export const usePostMiniappAuthCompleteSiwe = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postMiniappAuthCompleteSiwe>>,
      TError,
      { data: PostMiniappAuthCompleteSiweBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postMiniappAuthCompleteSiwe>>,
  TError,
  { data: PostMiniappAuthCompleteSiweBody },
  TContext
> => {
  const mutationOptions =
    getPostMiniappAuthCompleteSiweMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary Get session
 */
export const getMiniappAuthSession = (signal?: AbortSignal) => {
  return customInstance<GetMiniappAuthSession200>({
    url: `/miniapp/auth/session`,
    method: "GET",
    signal,
  });
};

export const getGetMiniappAuthSessionQueryKey = () => {
  return [`/miniapp/auth/session`] as const;
};

export const getGetMiniappAuthSessionQueryOptions = <
  TData = Awaited<ReturnType<typeof getMiniappAuthSession>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getMiniappAuthSession>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMiniappAuthSessionQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMiniappAuthSession>>
  > = ({ signal }) => getMiniappAuthSession(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMiniappAuthSession>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMiniappAuthSessionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMiniappAuthSession>>
>;
export type GetMiniappAuthSessionQueryError = unknown;

export function useGetMiniappAuthSession<
  TData = Awaited<ReturnType<typeof getMiniappAuthSession>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappAuthSession>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMiniappAuthSession>>,
          TError,
          Awaited<ReturnType<typeof getMiniappAuthSession>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMiniappAuthSession<
  TData = Awaited<ReturnType<typeof getMiniappAuthSession>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappAuthSession>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMiniappAuthSession>>,
          TError,
          Awaited<ReturnType<typeof getMiniappAuthSession>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMiniappAuthSession<
  TData = Awaited<ReturnType<typeof getMiniappAuthSession>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappAuthSession>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get session
 */

export function useGetMiniappAuthSession<
  TData = Awaited<ReturnType<typeof getMiniappAuthSession>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappAuthSession>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetMiniappAuthSessionQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Verify Social X Account Callback
 */
export const getMiniappVerifySocialXCallback = (
  params: GetMiniappVerifySocialXCallbackParams,
  signal?: AbortSignal,
) => {
  return customInstance<unknown>({
    url: `/miniapp/verify/social/x/callback`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetMiniappVerifySocialXCallbackQueryKey = (
  params?: GetMiniappVerifySocialXCallbackParams,
) => {
  return [
    `/miniapp/verify/social/x/callback`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetMiniappVerifySocialXCallbackQueryOptions = <
  TData = Awaited<ReturnType<typeof getMiniappVerifySocialXCallback>>,
  TError = void,
>(
  params: GetMiniappVerifySocialXCallbackParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappVerifySocialXCallback>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetMiniappVerifySocialXCallbackQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMiniappVerifySocialXCallback>>
  > = ({ signal }) => getMiniappVerifySocialXCallback(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMiniappVerifySocialXCallback>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMiniappVerifySocialXCallbackQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMiniappVerifySocialXCallback>>
>;
export type GetMiniappVerifySocialXCallbackQueryError = void;

export function useGetMiniappVerifySocialXCallback<
  TData = Awaited<ReturnType<typeof getMiniappVerifySocialXCallback>>,
  TError = void,
>(
  params: GetMiniappVerifySocialXCallbackParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappVerifySocialXCallback>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMiniappVerifySocialXCallback>>,
          TError,
          Awaited<ReturnType<typeof getMiniappVerifySocialXCallback>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMiniappVerifySocialXCallback<
  TData = Awaited<ReturnType<typeof getMiniappVerifySocialXCallback>>,
  TError = void,
>(
  params: GetMiniappVerifySocialXCallbackParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappVerifySocialXCallback>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMiniappVerifySocialXCallback>>,
          TError,
          Awaited<ReturnType<typeof getMiniappVerifySocialXCallback>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMiniappVerifySocialXCallback<
  TData = Awaited<ReturnType<typeof getMiniappVerifySocialXCallback>>,
  TError = void,
>(
  params: GetMiniappVerifySocialXCallbackParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappVerifySocialXCallback>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Verify Social X Account Callback
 */

export function useGetMiniappVerifySocialXCallback<
  TData = Awaited<ReturnType<typeof getMiniappVerifySocialXCallback>>,
  TError = void,
>(
  params: GetMiniappVerifySocialXCallbackParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappVerifySocialXCallback>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetMiniappVerifySocialXCallbackQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Request Wallet Verification
 */
export const postMiniappVerifyWalletRequest = (
  postMiniappVerifyWalletRequestBody: PostMiniappVerifyWalletRequestBody,
  signal?: AbortSignal,
) => {
  return customInstance<PostMiniappVerifyWalletRequest200>({
    url: `/miniapp/verify/wallet/request`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: postMiniappVerifyWalletRequestBody,
    signal,
  });
};

export const getPostMiniappVerifyWalletRequestMutationOptions = <
  TError =
    | PostMiniappVerifyWalletRequest400
    | PostMiniappVerifyWalletRequest401,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMiniappVerifyWalletRequest>>,
    TError,
    { data: PostMiniappVerifyWalletRequestBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postMiniappVerifyWalletRequest>>,
  TError,
  { data: PostMiniappVerifyWalletRequestBody },
  TContext
> => {
  const mutationKey = ["postMiniappVerifyWalletRequest"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postMiniappVerifyWalletRequest>>,
    { data: PostMiniappVerifyWalletRequestBody }
  > = (props) => {
    const { data } = props ?? {};

    return postMiniappVerifyWalletRequest(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostMiniappVerifyWalletRequestMutationResult = NonNullable<
  Awaited<ReturnType<typeof postMiniappVerifyWalletRequest>>
>;
export type PostMiniappVerifyWalletRequestMutationBody =
  PostMiniappVerifyWalletRequestBody;
export type PostMiniappVerifyWalletRequestMutationError =
  | PostMiniappVerifyWalletRequest400
  | PostMiniappVerifyWalletRequest401;

/**
 * @summary Request Wallet Verification
 */
export const usePostMiniappVerifyWalletRequest = <
  TError =
    | PostMiniappVerifyWalletRequest400
    | PostMiniappVerifyWalletRequest401,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postMiniappVerifyWalletRequest>>,
      TError,
      { data: PostMiniappVerifyWalletRequestBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postMiniappVerifyWalletRequest>>,
  TError,
  { data: PostMiniappVerifyWalletRequestBody },
  TContext
> => {
  const mutationOptions =
    getPostMiniappVerifyWalletRequestMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary Get Wallet Verification Request
 */
export const getMiniappVerifyWalletGetRequest = (
  params?: GetMiniappVerifyWalletGetRequestParams,
  signal?: AbortSignal,
) => {
  return customInstance<GetMiniappVerifyWalletGetRequest200>({
    url: `/miniapp/verify/wallet/request`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetMiniappVerifyWalletGetRequestQueryKey = (
  params?: GetMiniappVerifyWalletGetRequestParams,
) => {
  return [
    `/miniapp/verify/wallet/request`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetMiniappVerifyWalletGetRequestQueryOptions = <
  TData = Awaited<ReturnType<typeof getMiniappVerifyWalletGetRequest>>,
  TError = GetMiniappVerifyWalletGetRequest401,
>(
  params?: GetMiniappVerifyWalletGetRequestParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappVerifyWalletGetRequest>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetMiniappVerifyWalletGetRequestQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMiniappVerifyWalletGetRequest>>
  > = ({ signal }) => getMiniappVerifyWalletGetRequest(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMiniappVerifyWalletGetRequest>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMiniappVerifyWalletGetRequestQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMiniappVerifyWalletGetRequest>>
>;
export type GetMiniappVerifyWalletGetRequestQueryError =
  GetMiniappVerifyWalletGetRequest401;

export function useGetMiniappVerifyWalletGetRequest<
  TData = Awaited<ReturnType<typeof getMiniappVerifyWalletGetRequest>>,
  TError = GetMiniappVerifyWalletGetRequest401,
>(
  params: undefined | GetMiniappVerifyWalletGetRequestParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappVerifyWalletGetRequest>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMiniappVerifyWalletGetRequest>>,
          TError,
          Awaited<ReturnType<typeof getMiniappVerifyWalletGetRequest>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMiniappVerifyWalletGetRequest<
  TData = Awaited<ReturnType<typeof getMiniappVerifyWalletGetRequest>>,
  TError = GetMiniappVerifyWalletGetRequest401,
>(
  params?: GetMiniappVerifyWalletGetRequestParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappVerifyWalletGetRequest>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMiniappVerifyWalletGetRequest>>,
          TError,
          Awaited<ReturnType<typeof getMiniappVerifyWalletGetRequest>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMiniappVerifyWalletGetRequest<
  TData = Awaited<ReturnType<typeof getMiniappVerifyWalletGetRequest>>,
  TError = GetMiniappVerifyWalletGetRequest401,
>(
  params?: GetMiniappVerifyWalletGetRequestParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappVerifyWalletGetRequest>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Wallet Verification Request
 */

export function useGetMiniappVerifyWalletGetRequest<
  TData = Awaited<ReturnType<typeof getMiniappVerifyWalletGetRequest>>,
  TError = GetMiniappVerifyWalletGetRequest401,
>(
  params?: GetMiniappVerifyWalletGetRequestParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappVerifyWalletGetRequest>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetMiniappVerifyWalletGetRequestQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Poll Wallet Verification Status
 */
export const getMiniappVerifyWalletPolling = (
  params: GetMiniappVerifyWalletPollingParams,
  signal?: AbortSignal,
) => {
  return customInstance<GetMiniappVerifyWalletPolling200>({
    url: `/miniapp/verify/wallet/polling`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetMiniappVerifyWalletPollingQueryKey = (
  params?: GetMiniappVerifyWalletPollingParams,
) => {
  return [
    `/miniapp/verify/wallet/polling`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetMiniappVerifyWalletPollingQueryOptions = <
  TData = Awaited<ReturnType<typeof getMiniappVerifyWalletPolling>>,
  TError = GetMiniappVerifyWalletPolling401,
>(
  params: GetMiniappVerifyWalletPollingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappVerifyWalletPolling>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetMiniappVerifyWalletPollingQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMiniappVerifyWalletPolling>>
  > = ({ signal }) => getMiniappVerifyWalletPolling(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMiniappVerifyWalletPolling>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMiniappVerifyWalletPollingQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMiniappVerifyWalletPolling>>
>;
export type GetMiniappVerifyWalletPollingQueryError =
  GetMiniappVerifyWalletPolling401;

export function useGetMiniappVerifyWalletPolling<
  TData = Awaited<ReturnType<typeof getMiniappVerifyWalletPolling>>,
  TError = GetMiniappVerifyWalletPolling401,
>(
  params: GetMiniappVerifyWalletPollingParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappVerifyWalletPolling>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMiniappVerifyWalletPolling>>,
          TError,
          Awaited<ReturnType<typeof getMiniappVerifyWalletPolling>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMiniappVerifyWalletPolling<
  TData = Awaited<ReturnType<typeof getMiniappVerifyWalletPolling>>,
  TError = GetMiniappVerifyWalletPolling401,
>(
  params: GetMiniappVerifyWalletPollingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappVerifyWalletPolling>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMiniappVerifyWalletPolling>>,
          TError,
          Awaited<ReturnType<typeof getMiniappVerifyWalletPolling>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMiniappVerifyWalletPolling<
  TData = Awaited<ReturnType<typeof getMiniappVerifyWalletPolling>>,
  TError = GetMiniappVerifyWalletPolling401,
>(
  params: GetMiniappVerifyWalletPollingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappVerifyWalletPolling>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Poll Wallet Verification Status
 */

export function useGetMiniappVerifyWalletPolling<
  TData = Awaited<ReturnType<typeof getMiniappVerifyWalletPolling>>,
  TError = GetMiniappVerifyWalletPolling401,
>(
  params: GetMiniappVerifyWalletPollingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappVerifyWalletPolling>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetMiniappVerifyWalletPollingQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Verify Social X Account
 */
export const getMiniappVerifySocialX = (signal?: AbortSignal) => {
  return customInstance<unknown>({
    url: `/miniapp/verify/social/x`,
    method: "GET",
    signal,
  });
};

export const getGetMiniappVerifySocialXQueryKey = () => {
  return [`/miniapp/verify/social/x`] as const;
};

export const getGetMiniappVerifySocialXQueryOptions = <
  TData = Awaited<ReturnType<typeof getMiniappVerifySocialX>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getMiniappVerifySocialX>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetMiniappVerifySocialXQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMiniappVerifySocialX>>
  > = ({ signal }) => getMiniappVerifySocialX(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMiniappVerifySocialX>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMiniappVerifySocialXQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMiniappVerifySocialX>>
>;
export type GetMiniappVerifySocialXQueryError = void;

export function useGetMiniappVerifySocialX<
  TData = Awaited<ReturnType<typeof getMiniappVerifySocialX>>,
  TError = void,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappVerifySocialX>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMiniappVerifySocialX>>,
          TError,
          Awaited<ReturnType<typeof getMiniappVerifySocialX>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMiniappVerifySocialX<
  TData = Awaited<ReturnType<typeof getMiniappVerifySocialX>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappVerifySocialX>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMiniappVerifySocialX>>,
          TError,
          Awaited<ReturnType<typeof getMiniappVerifySocialX>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMiniappVerifySocialX<
  TData = Awaited<ReturnType<typeof getMiniappVerifySocialX>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappVerifySocialX>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Verify Social X Account
 */

export function useGetMiniappVerifySocialX<
  TData = Awaited<ReturnType<typeof getMiniappVerifySocialX>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappVerifySocialX>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetMiniappVerifySocialXQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Verify Social X Account Proof
 */
export const postMiniappVerifySocialXProof = (
  postMiniappVerifySocialXProofBody: PostMiniappVerifySocialXProofBody,
  signal?: AbortSignal,
) => {
  return customInstance<PostMiniappVerifySocialXProof200>({
    url: `/miniapp/verify/social/x/proof`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: postMiniappVerifySocialXProofBody,
    signal,
  });
};

export const getPostMiniappVerifySocialXProofMutationOptions = <
  TError = PostMiniappVerifySocialXProof401,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMiniappVerifySocialXProof>>,
    TError,
    { data: PostMiniappVerifySocialXProofBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postMiniappVerifySocialXProof>>,
  TError,
  { data: PostMiniappVerifySocialXProofBody },
  TContext
> => {
  const mutationKey = ["postMiniappVerifySocialXProof"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postMiniappVerifySocialXProof>>,
    { data: PostMiniappVerifySocialXProofBody }
  > = (props) => {
    const { data } = props ?? {};

    return postMiniappVerifySocialXProof(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostMiniappVerifySocialXProofMutationResult = NonNullable<
  Awaited<ReturnType<typeof postMiniappVerifySocialXProof>>
>;
export type PostMiniappVerifySocialXProofMutationBody =
  PostMiniappVerifySocialXProofBody;
export type PostMiniappVerifySocialXProofMutationError =
  PostMiniappVerifySocialXProof401;

/**
 * @summary Verify Social X Account Proof
 */
export const usePostMiniappVerifySocialXProof = <
  TError = PostMiniappVerifySocialXProof401,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postMiniappVerifySocialXProof>>,
      TError,
      { data: PostMiniappVerifySocialXProofBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postMiniappVerifySocialXProof>>,
  TError,
  { data: PostMiniappVerifySocialXProofBody },
  TContext
> => {
  const mutationOptions =
    getPostMiniappVerifySocialXProofMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary Verify Wallet Proof
 */
export const postMiniappVerifyWalletProof = (
  postMiniappVerifyWalletProofBody: PostMiniappVerifyWalletProofBody,
  signal?: AbortSignal,
) => {
  return customInstance<PostMiniappVerifyWalletProof200>({
    url: `/miniapp/verify/wallet/proof`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: postMiniappVerifyWalletProofBody,
    signal,
  });
};

export const getPostMiniappVerifyWalletProofMutationOptions = <
  TError = PostMiniappVerifyWalletProof401,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMiniappVerifyWalletProof>>,
    TError,
    { data: PostMiniappVerifyWalletProofBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postMiniappVerifyWalletProof>>,
  TError,
  { data: PostMiniappVerifyWalletProofBody },
  TContext
> => {
  const mutationKey = ["postMiniappVerifyWalletProof"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postMiniappVerifyWalletProof>>,
    { data: PostMiniappVerifyWalletProofBody }
  > = (props) => {
    const { data } = props ?? {};

    return postMiniappVerifyWalletProof(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostMiniappVerifyWalletProofMutationResult = NonNullable<
  Awaited<ReturnType<typeof postMiniappVerifyWalletProof>>
>;
export type PostMiniappVerifyWalletProofMutationBody =
  PostMiniappVerifyWalletProofBody;
export type PostMiniappVerifyWalletProofMutationError =
  PostMiniappVerifyWalletProof401;

/**
 * @summary Verify Wallet Proof
 */
export const usePostMiniappVerifyWalletProof = <
  TError = PostMiniappVerifyWalletProof401,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postMiniappVerifyWalletProof>>,
      TError,
      { data: PostMiniappVerifyWalletProofBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postMiniappVerifyWalletProof>>,
  TError,
  { data: PostMiniappVerifyWalletProofBody },
  TContext
> => {
  const mutationOptions =
    getPostMiniappVerifyWalletProofMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary Verified social list
 */
export const getMiniappVerifiedSocialList = (signal?: AbortSignal) => {
  return customInstance<GetMiniappVerifiedSocialList200>({
    url: `/miniapp/verified/social/list`,
    method: "GET",
    signal,
  });
};

export const getGetMiniappVerifiedSocialListQueryKey = () => {
  return [`/miniapp/verified/social/list`] as const;
};

export const getGetMiniappVerifiedSocialListQueryOptions = <
  TData = Awaited<ReturnType<typeof getMiniappVerifiedSocialList>>,
  TError = GetMiniappVerifiedSocialList401,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getMiniappVerifiedSocialList>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetMiniappVerifiedSocialListQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMiniappVerifiedSocialList>>
  > = ({ signal }) => getMiniappVerifiedSocialList(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMiniappVerifiedSocialList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMiniappVerifiedSocialListQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMiniappVerifiedSocialList>>
>;
export type GetMiniappVerifiedSocialListQueryError =
  GetMiniappVerifiedSocialList401;

export function useGetMiniappVerifiedSocialList<
  TData = Awaited<ReturnType<typeof getMiniappVerifiedSocialList>>,
  TError = GetMiniappVerifiedSocialList401,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappVerifiedSocialList>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMiniappVerifiedSocialList>>,
          TError,
          Awaited<ReturnType<typeof getMiniappVerifiedSocialList>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMiniappVerifiedSocialList<
  TData = Awaited<ReturnType<typeof getMiniappVerifiedSocialList>>,
  TError = GetMiniappVerifiedSocialList401,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappVerifiedSocialList>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMiniappVerifiedSocialList>>,
          TError,
          Awaited<ReturnType<typeof getMiniappVerifiedSocialList>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMiniappVerifiedSocialList<
  TData = Awaited<ReturnType<typeof getMiniappVerifiedSocialList>>,
  TError = GetMiniappVerifiedSocialList401,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappVerifiedSocialList>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Verified social list
 */

export function useGetMiniappVerifiedSocialList<
  TData = Awaited<ReturnType<typeof getMiniappVerifiedSocialList>>,
  TError = GetMiniappVerifiedSocialList401,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappVerifiedSocialList>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetMiniappVerifiedSocialListQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Verified social disconnect
 */
export const deleteMiniappVerifiedSocialDisconnect = (
  deleteMiniappVerifiedSocialDisconnectBody: DeleteMiniappVerifiedSocialDisconnectBody,
) => {
  return customInstance<DeleteMiniappVerifiedSocialDisconnect200>({
    url: `/miniapp/verified/social/disconnect`,
    method: "DELETE",
    headers: { "Content-Type": "application/json" },
    data: deleteMiniappVerifiedSocialDisconnectBody,
  });
};

export const getDeleteMiniappVerifiedSocialDisconnectMutationOptions = <
  TError = DeleteMiniappVerifiedSocialDisconnect401,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMiniappVerifiedSocialDisconnect>>,
    TError,
    { data: DeleteMiniappVerifiedSocialDisconnectBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteMiniappVerifiedSocialDisconnect>>,
  TError,
  { data: DeleteMiniappVerifiedSocialDisconnectBody },
  TContext
> => {
  const mutationKey = ["deleteMiniappVerifiedSocialDisconnect"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteMiniappVerifiedSocialDisconnect>>,
    { data: DeleteMiniappVerifiedSocialDisconnectBody }
  > = (props) => {
    const { data } = props ?? {};

    return deleteMiniappVerifiedSocialDisconnect(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteMiniappVerifiedSocialDisconnectMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteMiniappVerifiedSocialDisconnect>>
>;
export type DeleteMiniappVerifiedSocialDisconnectMutationBody =
  DeleteMiniappVerifiedSocialDisconnectBody;
export type DeleteMiniappVerifiedSocialDisconnectMutationError =
  DeleteMiniappVerifiedSocialDisconnect401;

/**
 * @summary Verified social disconnect
 */
export const useDeleteMiniappVerifiedSocialDisconnect = <
  TError = DeleteMiniappVerifiedSocialDisconnect401,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteMiniappVerifiedSocialDisconnect>>,
      TError,
      { data: DeleteMiniappVerifiedSocialDisconnectBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteMiniappVerifiedSocialDisconnect>>,
  TError,
  { data: DeleteMiniappVerifiedSocialDisconnectBody },
  TContext
> => {
  const mutationOptions =
    getDeleteMiniappVerifiedSocialDisconnectMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary Verified wallet list
 */
export const getMiniappVerifiedWalletList = (signal?: AbortSignal) => {
  return customInstance<GetMiniappVerifiedWalletList200>({
    url: `/miniapp/verified/wallet/list`,
    method: "GET",
    signal,
  });
};

export const getGetMiniappVerifiedWalletListQueryKey = () => {
  return [`/miniapp/verified/wallet/list`] as const;
};

export const getGetMiniappVerifiedWalletListQueryOptions = <
  TData = Awaited<ReturnType<typeof getMiniappVerifiedWalletList>>,
  TError = GetMiniappVerifiedWalletList401,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getMiniappVerifiedWalletList>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetMiniappVerifiedWalletListQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMiniappVerifiedWalletList>>
  > = ({ signal }) => getMiniappVerifiedWalletList(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMiniappVerifiedWalletList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMiniappVerifiedWalletListQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMiniappVerifiedWalletList>>
>;
export type GetMiniappVerifiedWalletListQueryError =
  GetMiniappVerifiedWalletList401;

export function useGetMiniappVerifiedWalletList<
  TData = Awaited<ReturnType<typeof getMiniappVerifiedWalletList>>,
  TError = GetMiniappVerifiedWalletList401,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappVerifiedWalletList>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMiniappVerifiedWalletList>>,
          TError,
          Awaited<ReturnType<typeof getMiniappVerifiedWalletList>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMiniappVerifiedWalletList<
  TData = Awaited<ReturnType<typeof getMiniappVerifiedWalletList>>,
  TError = GetMiniappVerifiedWalletList401,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappVerifiedWalletList>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMiniappVerifiedWalletList>>,
          TError,
          Awaited<ReturnType<typeof getMiniappVerifiedWalletList>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMiniappVerifiedWalletList<
  TData = Awaited<ReturnType<typeof getMiniappVerifiedWalletList>>,
  TError = GetMiniappVerifiedWalletList401,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappVerifiedWalletList>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Verified wallet list
 */

export function useGetMiniappVerifiedWalletList<
  TData = Awaited<ReturnType<typeof getMiniappVerifiedWalletList>>,
  TError = GetMiniappVerifiedWalletList401,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappVerifiedWalletList>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetMiniappVerifiedWalletListQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Verified wallet disconnect
 */
export const deleteMiniappVerifiedWalletDisconnect = (
  deleteMiniappVerifiedWalletDisconnectBody: DeleteMiniappVerifiedWalletDisconnectBody,
) => {
  return customInstance<DeleteMiniappVerifiedWalletDisconnect200>({
    url: `/miniapp/verified/wallet/disconnect`,
    method: "DELETE",
    headers: { "Content-Type": "application/json" },
    data: deleteMiniappVerifiedWalletDisconnectBody,
  });
};

export const getDeleteMiniappVerifiedWalletDisconnectMutationOptions = <
  TError = DeleteMiniappVerifiedWalletDisconnect401,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMiniappVerifiedWalletDisconnect>>,
    TError,
    { data: DeleteMiniappVerifiedWalletDisconnectBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteMiniappVerifiedWalletDisconnect>>,
  TError,
  { data: DeleteMiniappVerifiedWalletDisconnectBody },
  TContext
> => {
  const mutationKey = ["deleteMiniappVerifiedWalletDisconnect"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteMiniappVerifiedWalletDisconnect>>,
    { data: DeleteMiniappVerifiedWalletDisconnectBody }
  > = (props) => {
    const { data } = props ?? {};

    return deleteMiniappVerifiedWalletDisconnect(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteMiniappVerifiedWalletDisconnectMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteMiniappVerifiedWalletDisconnect>>
>;
export type DeleteMiniappVerifiedWalletDisconnectMutationBody =
  DeleteMiniappVerifiedWalletDisconnectBody;
export type DeleteMiniappVerifiedWalletDisconnectMutationError =
  DeleteMiniappVerifiedWalletDisconnect401;

/**
 * @summary Verified wallet disconnect
 */
export const useDeleteMiniappVerifiedWalletDisconnect = <
  TError = DeleteMiniappVerifiedWalletDisconnect401,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteMiniappVerifiedWalletDisconnect>>,
      TError,
      { data: DeleteMiniappVerifiedWalletDisconnectBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteMiniappVerifiedWalletDisconnect>>,
  TError,
  { data: DeleteMiniappVerifiedWalletDisconnectBody },
  TContext
> => {
  const mutationOptions =
    getDeleteMiniappVerifiedWalletDisconnectMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary Get Verified Wallet Request
 */
export const getMiniappVerifiedWalletGetRequest = (
  requestId: string,
  signal?: AbortSignal,
) => {
  return customInstance<GetMiniappVerifiedWalletGetRequest200>({
    url: `/miniapp/verified/wallet/${requestId}`,
    method: "GET",
    signal,
  });
};

export const getGetMiniappVerifiedWalletGetRequestQueryKey = (
  requestId?: string,
) => {
  return [`/miniapp/verified/wallet/${requestId}`] as const;
};

export const getGetMiniappVerifiedWalletGetRequestQueryOptions = <
  TData = Awaited<ReturnType<typeof getMiniappVerifiedWalletGetRequest>>,
  TError = GetMiniappVerifiedWalletGetRequest401,
>(
  requestId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappVerifiedWalletGetRequest>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetMiniappVerifiedWalletGetRequestQueryKey(requestId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMiniappVerifiedWalletGetRequest>>
  > = ({ signal }) => getMiniappVerifiedWalletGetRequest(requestId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!requestId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getMiniappVerifiedWalletGetRequest>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMiniappVerifiedWalletGetRequestQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMiniappVerifiedWalletGetRequest>>
>;
export type GetMiniappVerifiedWalletGetRequestQueryError =
  GetMiniappVerifiedWalletGetRequest401;

export function useGetMiniappVerifiedWalletGetRequest<
  TData = Awaited<ReturnType<typeof getMiniappVerifiedWalletGetRequest>>,
  TError = GetMiniappVerifiedWalletGetRequest401,
>(
  requestId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappVerifiedWalletGetRequest>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMiniappVerifiedWalletGetRequest>>,
          TError,
          Awaited<ReturnType<typeof getMiniappVerifiedWalletGetRequest>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMiniappVerifiedWalletGetRequest<
  TData = Awaited<ReturnType<typeof getMiniappVerifiedWalletGetRequest>>,
  TError = GetMiniappVerifiedWalletGetRequest401,
>(
  requestId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappVerifiedWalletGetRequest>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMiniappVerifiedWalletGetRequest>>,
          TError,
          Awaited<ReturnType<typeof getMiniappVerifiedWalletGetRequest>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMiniappVerifiedWalletGetRequest<
  TData = Awaited<ReturnType<typeof getMiniappVerifiedWalletGetRequest>>,
  TError = GetMiniappVerifiedWalletGetRequest401,
>(
  requestId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappVerifiedWalletGetRequest>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Verified Wallet Request
 */

export function useGetMiniappVerifiedWalletGetRequest<
  TData = Awaited<ReturnType<typeof getMiniappVerifiedWalletGetRequest>>,
  TError = GetMiniappVerifiedWalletGetRequest401,
>(
  requestId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMiniappVerifiedWalletGetRequest>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetMiniappVerifiedWalletGetRequestQueryOptions(
    requestId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Check if X account is verified as human by username
 * @summary Check X account
 */
export const getPublicSocialCheckX = (
  params: GetPublicSocialCheckXParams,
  signal?: AbortSignal,
) => {
  return customInstance<GetPublicSocialCheckX200>({
    url: `/public/social/check/x`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetPublicSocialCheckXQueryKey = (
  params?: GetPublicSocialCheckXParams,
) => {
  return [`/public/social/check/x`, ...(params ? [params] : [])] as const;
};

export const getGetPublicSocialCheckXQueryOptions = <
  TData = Awaited<ReturnType<typeof getPublicSocialCheckX>>,
  TError = unknown,
>(
  params: GetPublicSocialCheckXParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicSocialCheckX>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetPublicSocialCheckXQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPublicSocialCheckX>>
  > = ({ signal }) => getPublicSocialCheckX(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPublicSocialCheckX>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPublicSocialCheckXQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPublicSocialCheckX>>
>;
export type GetPublicSocialCheckXQueryError = unknown;

export function useGetPublicSocialCheckX<
  TData = Awaited<ReturnType<typeof getPublicSocialCheckX>>,
  TError = unknown,
>(
  params: GetPublicSocialCheckXParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicSocialCheckX>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicSocialCheckX>>,
          TError,
          Awaited<ReturnType<typeof getPublicSocialCheckX>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPublicSocialCheckX<
  TData = Awaited<ReturnType<typeof getPublicSocialCheckX>>,
  TError = unknown,
>(
  params: GetPublicSocialCheckXParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicSocialCheckX>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicSocialCheckX>>,
          TError,
          Awaited<ReturnType<typeof getPublicSocialCheckX>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPublicSocialCheckX<
  TData = Awaited<ReturnType<typeof getPublicSocialCheckX>>,
  TError = unknown,
>(
  params: GetPublicSocialCheckXParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicSocialCheckX>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Check X account
 */

export function useGetPublicSocialCheckX<
  TData = Awaited<ReturnType<typeof getPublicSocialCheckX>>,
  TError = unknown,
>(
  params: GetPublicSocialCheckXParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicSocialCheckX>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetPublicSocialCheckXQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Check if Farcaster account is verified as human by username
 * @summary Check Farcaster account
 */
export const getPublicSocialCheckFarcaster = (
  params: GetPublicSocialCheckFarcasterParams,
  signal?: AbortSignal,
) => {
  return customInstance<GetPublicSocialCheckFarcaster200>({
    url: `/public/social/check/farcaster`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetPublicSocialCheckFarcasterQueryKey = (
  params?: GetPublicSocialCheckFarcasterParams,
) => {
  return [
    `/public/social/check/farcaster`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetPublicSocialCheckFarcasterQueryOptions = <
  TData = Awaited<ReturnType<typeof getPublicSocialCheckFarcaster>>,
  TError = unknown,
>(
  params: GetPublicSocialCheckFarcasterParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicSocialCheckFarcaster>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetPublicSocialCheckFarcasterQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPublicSocialCheckFarcaster>>
  > = ({ signal }) => getPublicSocialCheckFarcaster(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPublicSocialCheckFarcaster>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPublicSocialCheckFarcasterQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPublicSocialCheckFarcaster>>
>;
export type GetPublicSocialCheckFarcasterQueryError = unknown;

export function useGetPublicSocialCheckFarcaster<
  TData = Awaited<ReturnType<typeof getPublicSocialCheckFarcaster>>,
  TError = unknown,
>(
  params: GetPublicSocialCheckFarcasterParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicSocialCheckFarcaster>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicSocialCheckFarcaster>>,
          TError,
          Awaited<ReturnType<typeof getPublicSocialCheckFarcaster>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPublicSocialCheckFarcaster<
  TData = Awaited<ReturnType<typeof getPublicSocialCheckFarcaster>>,
  TError = unknown,
>(
  params: GetPublicSocialCheckFarcasterParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicSocialCheckFarcaster>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicSocialCheckFarcaster>>,
          TError,
          Awaited<ReturnType<typeof getPublicSocialCheckFarcaster>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPublicSocialCheckFarcaster<
  TData = Awaited<ReturnType<typeof getPublicSocialCheckFarcaster>>,
  TError = unknown,
>(
  params: GetPublicSocialCheckFarcasterParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicSocialCheckFarcaster>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Check Farcaster account
 */

export function useGetPublicSocialCheckFarcaster<
  TData = Awaited<ReturnType<typeof getPublicSocialCheckFarcaster>>,
  TError = unknown,
>(
  params: GetPublicSocialCheckFarcasterParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicSocialCheckFarcaster>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetPublicSocialCheckFarcasterQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Check if Telegram account is verified as human by username
 * @summary Check Telegram account
 */
export const getPublicSocialCheckTelegram = (
  params: GetPublicSocialCheckTelegramParams,
  signal?: AbortSignal,
) => {
  return customInstance<GetPublicSocialCheckTelegram200>({
    url: `/public/social/check/telegram`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetPublicSocialCheckTelegramQueryKey = (
  params?: GetPublicSocialCheckTelegramParams,
) => {
  return [
    `/public/social/check/telegram`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetPublicSocialCheckTelegramQueryOptions = <
  TData = Awaited<ReturnType<typeof getPublicSocialCheckTelegram>>,
  TError = unknown,
>(
  params: GetPublicSocialCheckTelegramParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicSocialCheckTelegram>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetPublicSocialCheckTelegramQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPublicSocialCheckTelegram>>
  > = ({ signal }) => getPublicSocialCheckTelegram(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPublicSocialCheckTelegram>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPublicSocialCheckTelegramQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPublicSocialCheckTelegram>>
>;
export type GetPublicSocialCheckTelegramQueryError = unknown;

export function useGetPublicSocialCheckTelegram<
  TData = Awaited<ReturnType<typeof getPublicSocialCheckTelegram>>,
  TError = unknown,
>(
  params: GetPublicSocialCheckTelegramParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicSocialCheckTelegram>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicSocialCheckTelegram>>,
          TError,
          Awaited<ReturnType<typeof getPublicSocialCheckTelegram>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPublicSocialCheckTelegram<
  TData = Awaited<ReturnType<typeof getPublicSocialCheckTelegram>>,
  TError = unknown,
>(
  params: GetPublicSocialCheckTelegramParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicSocialCheckTelegram>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicSocialCheckTelegram>>,
          TError,
          Awaited<ReturnType<typeof getPublicSocialCheckTelegram>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPublicSocialCheckTelegram<
  TData = Awaited<ReturnType<typeof getPublicSocialCheckTelegram>>,
  TError = unknown,
>(
  params: GetPublicSocialCheckTelegramParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicSocialCheckTelegram>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Check Telegram account
 */

export function useGetPublicSocialCheckTelegram<
  TData = Awaited<ReturnType<typeof getPublicSocialCheckTelegram>>,
  TError = unknown,
>(
  params: GetPublicSocialCheckTelegramParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicSocialCheckTelegram>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetPublicSocialCheckTelegramQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Check if Facebook account is verified as human by username
 * @summary Check Facebook account
 */
export const getPublicSocialCheckFacebook = (
  params: GetPublicSocialCheckFacebookParams,
  signal?: AbortSignal,
) => {
  return customInstance<GetPublicSocialCheckFacebook200>({
    url: `/public/social/check/facebook`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetPublicSocialCheckFacebookQueryKey = (
  params?: GetPublicSocialCheckFacebookParams,
) => {
  return [
    `/public/social/check/facebook`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetPublicSocialCheckFacebookQueryOptions = <
  TData = Awaited<ReturnType<typeof getPublicSocialCheckFacebook>>,
  TError = unknown,
>(
  params: GetPublicSocialCheckFacebookParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicSocialCheckFacebook>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetPublicSocialCheckFacebookQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPublicSocialCheckFacebook>>
  > = ({ signal }) => getPublicSocialCheckFacebook(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPublicSocialCheckFacebook>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPublicSocialCheckFacebookQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPublicSocialCheckFacebook>>
>;
export type GetPublicSocialCheckFacebookQueryError = unknown;

export function useGetPublicSocialCheckFacebook<
  TData = Awaited<ReturnType<typeof getPublicSocialCheckFacebook>>,
  TError = unknown,
>(
  params: GetPublicSocialCheckFacebookParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicSocialCheckFacebook>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicSocialCheckFacebook>>,
          TError,
          Awaited<ReturnType<typeof getPublicSocialCheckFacebook>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPublicSocialCheckFacebook<
  TData = Awaited<ReturnType<typeof getPublicSocialCheckFacebook>>,
  TError = unknown,
>(
  params: GetPublicSocialCheckFacebookParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicSocialCheckFacebook>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicSocialCheckFacebook>>,
          TError,
          Awaited<ReturnType<typeof getPublicSocialCheckFacebook>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPublicSocialCheckFacebook<
  TData = Awaited<ReturnType<typeof getPublicSocialCheckFacebook>>,
  TError = unknown,
>(
  params: GetPublicSocialCheckFacebookParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicSocialCheckFacebook>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Check Facebook account
 */

export function useGetPublicSocialCheckFacebook<
  TData = Awaited<ReturnType<typeof getPublicSocialCheckFacebook>>,
  TError = unknown,
>(
  params: GetPublicSocialCheckFacebookParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicSocialCheckFacebook>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetPublicSocialCheckFacebookQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Check if wallet is verified as human by address.<br/> Currently supporting Base, Arbitrum, Optimism, Worldchain
 * @summary Check wallet
 */
export const getPublicWalletCheck = (
  params: GetPublicWalletCheckParams,
  signal?: AbortSignal,
) => {
  return customInstance<GetPublicWalletCheck200>({
    url: `/public/wallet/check`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetPublicWalletCheckQueryKey = (
  params?: GetPublicWalletCheckParams,
) => {
  return [`/public/wallet/check`, ...(params ? [params] : [])] as const;
};

export const getGetPublicWalletCheckQueryOptions = <
  TData = Awaited<ReturnType<typeof getPublicWalletCheck>>,
  TError = unknown,
>(
  params: GetPublicWalletCheckParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicWalletCheck>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetPublicWalletCheckQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPublicWalletCheck>>
  > = ({ signal }) => getPublicWalletCheck(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPublicWalletCheck>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPublicWalletCheckQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPublicWalletCheck>>
>;
export type GetPublicWalletCheckQueryError = unknown;

export function useGetPublicWalletCheck<
  TData = Awaited<ReturnType<typeof getPublicWalletCheck>>,
  TError = unknown,
>(
  params: GetPublicWalletCheckParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicWalletCheck>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicWalletCheck>>,
          TError,
          Awaited<ReturnType<typeof getPublicWalletCheck>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPublicWalletCheck<
  TData = Awaited<ReturnType<typeof getPublicWalletCheck>>,
  TError = unknown,
>(
  params: GetPublicWalletCheckParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicWalletCheck>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicWalletCheck>>,
          TError,
          Awaited<ReturnType<typeof getPublicWalletCheck>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPublicWalletCheck<
  TData = Awaited<ReturnType<typeof getPublicWalletCheck>>,
  TError = unknown,
>(
  params: GetPublicWalletCheckParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicWalletCheck>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Check wallet
 */

export function useGetPublicWalletCheck<
  TData = Awaited<ReturnType<typeof getPublicWalletCheck>>,
  TError = unknown,
>(
  params: GetPublicWalletCheckParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicWalletCheck>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetPublicWalletCheckQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
